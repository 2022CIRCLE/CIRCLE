golden:
int l;
inference:

#endif
return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* GET http://www.example.org/foobar */
buf_copy_string_buffer(con->request.uri, req->uri_raw);
con->http_status = 400;
/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->uri_raw, req->uri_raw);
buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;
*/
else if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;
con->http_status = 500;
con->http_status = 400; return 0;
if (buffer_is_empty(req->uri_raw)) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
free(req->uri_raw);
splx(s);
const char *sl;
return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;
int i;
con->http_status = 0;
con->http_status = 200;
else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
srv = NULL;
buf_write_string_buffer(con->request.uri, req->uri_raw);
con->http_status = 300;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;
/* GET http://www.example.org/foobar */ char *sl;
@endif
/* XXX */
break;
size_t i;
*/ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
con->http_status = 1000;
i = 0;
buffer_copy_string_buffer(con->request.uri, con->uri_raw);
i++;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 400; return 0;
#ifdef DEBUG
*sl = NULL;
else
else if (req->method!= HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;
nsresult rv;
else  /* GET http://www.example.org/foobar */
printf("http_request_parsen");
buffer_free_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */
/* Get http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
con->protocol = HTTP_VERSION_UNSET;
CONNECTION_KEEPALIVE
char *sl;
con->http_status = 600;
(void)buffer_copy_string_buffer(con->request.uri, req->uri_raw);
i--;
return 400;
con->method = HTTP_METHOD_UNSET;
error = 0;
buffer_copy_string_buffer(con->request.uri, request.uri_raw);
con->http_status = 100;
errno = 0;
buf_copy_string_buffer(con->uri_raw, req->uri_raw);
req->method = HTTP_METHOD_UNSET;
if (srv == NULL) return 0;
free(srv);
*srv = NULL;
if (!buffer_is_empty(req->uri_raw)) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
continue;
if (req->method!= HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;
const HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE
buffer_copy_string_buffer(req->uri_raw, req->uri_raw);
printf("http_request_parse()n");
free(con->request.uri);
con->uri_raw->ptr[0] = '0';
req->uri_raw = NULL;
if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (buffer_is_empty(req->uri_raw))  con->http_status = 500; return 0;
/*
#if 0
const char *sl = strchr(BUF_STR(req->uri_raw), "http:");
else if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 500; return 0;
if (buffer_is_empty(con->uri_raw))  con->http_status = 400; return 0;
con->http_status = 405;
con->uri_raw->ptr[0] = '*';
else  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;
strncmp(BUF_STR(req->uri_raw), "http:");
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 500; /* Version not Supported */ return 0;
CONNECTION_UNSET = HTTP_CONNECTION_UNSET;
buf_copy_string_buffer(con->request.orig_uri, req->uri_raw);
srv = srv;
req->protocol = HTTP_VERSION_UNSET;
con->uri_raw->ptr[0] = '/';
req->uri_raw->ptr[0] = '0';
strncmp(BUF_STR(req->uri_raw), "http: ");
else if (req->method == HTTP_METHOD_UNSET)  con->http_status = 400; return 0;
if (NULL == sl) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (buffer_is_empty(req->uri_raw)) buffer_copy_string_buffer(con->uri_raw, req->uri_raw);
else  /* GET http://www.example.org/foobar */ char *sl;
else  buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
HTTP_CONNECTION_UNSET = HTTP_CONNECTION_UNSET;
if (buffer_is_empty(req->uri_raw))  con->uri_status = 400; return 0;
con->http_status = 505;
if (sl == NULL) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw), "http://", 7);
req->uri_raw->ptr[0] = '*';
buffer_copy_string_buffer(con->request.url, req->uri_raw);
*sl = strchr(BUF_STR(req->uri_raw), "http://", 7);
buffer_copy_string_buffer(con->request, req->uri_raw);
else if (buffer_is_empty(req->uri_raw))  con->uri_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw, NULL);
strncmp(BUF_STR(req->uri_raw), "http://", 7)
con->http_status = 800;
free(con->request.uri, req->uri_raw);
strncmp(BUF_STR(req->uri_raw), "http://", 7);
con->http_status = 250;
req->uri_raw->ptr[0] = '/';
else if (req->method == HTTP_METHOD_UNSET)  con->http_status = 500; return 0;
if (req->method == HTTP_METHOD_UNSET) return 0;
if (req->method!= HTTP_METHOD_UNSET)  con->http_status = 400; return 0;
buffer_copy_string_buffer(Con->request.uri, req->uri_raw);
return 0;  if (buffer_is_empty(req->uri_raw))  con->uri_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, request->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) return 0;
/* GEThttp://www.example.org/foobar */
strncmp(BUF_STR(req->uri_raw), "http:
if (0!= strncmp(BUF_STR(req->uri_raw), "http://"))  con->http_status = 400; return 0;
if (srv == NULL) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (buffer_is_empty(req->uri_raw))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0;  else if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;
if (srv!= NULL) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, &req->uri_raw);
buffer_copy_string_buffer(con->url, req->uri_raw);
*sl = strchr(BUF_STR(req->uri_raw), "http:");
con->http_status = 405; /* Method not allowed */ return 0;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;
buffer_copy_string_buffer(con->request.uri, NULL);
/* GEThttp://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (buffer_is_empty(req->uri_raw))  con->http_status = 500; return 0;
con->http_status = 505; /* Version not Supported */ return 0;
/* GET http://www.example.org/foobar
if (buffer_is_empty(req->uri_raw))  con->http_status = 200; return 0;
const char *sl = NULL;
if (buffer_is_empty(req->uri_raw))  con->http_status = 300; return 0;
else if (req->method == HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;
printf("http_request_parse: ");
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 300; return 0;
if (req->method == HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0;
con->http_status = 300; return 0;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 200; return 0;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 505; /* Version not supported */ return 0;
debug_printf("http_request_parse()n");
free(req->uri_raw->ptr);
*/ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
con->http_status = 255;
0,
return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 500; return 0;
/* get http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* get http://www.example.org/foobar */
if (req->method == HTTP_METHOD_UNSET) buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
else if (buffer_is_empty(con->uri_raw))  con->http_status = 400; return 0;
debug_printf("http_request_parsen");
con->http_status = 200; return 0;
/* * XXX */
if (req->method == HTTP_METHOD_UNSET)
con->http_status = 500; return 0;
if (req->protocol == HTTP_VERSION_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;
if (buffer_is_empty(req->uri_raw))  con->http_status = 405; /* Method not allowed */ return 0;
if (buffer_is_empty(con->uri_raw)) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
free(req->uri_raw->ptr[0]);
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (re
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0'))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (url_find("http_request_parse", url) == -1)  /* skip URL */ if (url->target->ptr)  url->target->ptr->ptr = url; return 0;
if (!req->get_method_reply)  if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->
/* We've got to parse the header of the header, ignoring it. */
else  buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 240; /* Disable all other protocols. */ return 0;
else if (req->method!= HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;  buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7,''))  con->http_status = 400; return 0;
/* * The web url might not have been set for http-request_parse. */
/* * Check that the server has been restarted */ buffer_free_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL)  /* No new URL */ if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '')  buffer_copy_string_buffer(con->uri_raw, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET))  if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_
con->req_status = 400; return 0;
/* * It's safe to get to check that * our * callbacks are * supported to prevent its output of * untransfer dummy. */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!url)  char *sl; if (0!= strchr(BUF_STR(url), "http://", 7))  con->http_status = 400; return 0;
con->request.error = 0;
if (req->protocol == HTTP_VERSION_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->protocol == HTTP_VERSION_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S)  if (req->url_protocol == HTTP_URL_SPATH_HEAD)  return 0;  if (req->url_protocol == HTTP_URL_PATH_HEAD)  con->url_protocol = 505; /* Version not Supported */ return 0;  if (req->protocol == HTTP_VERSION_UNSET)  con->url_protocol = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->url_protocol = 405; /* Option not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con
if (null == strchr(req->uri_raw), "http: ")  strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); return 0;
if (con->request.method == HTTP_METHOD_UNSET)  con->http_status = 5; /* Version not Supported */ return 0;
if (__FILE__ == NULL)  /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
con->http_status = 3000;
if (!con->http_raw)  con->http_status = 400; return 0;
if (req->aflags & HTTP_TRACE_SERVICE)  log_error("http_request_parse: http_request_parse: http_TRACE_SECURITY not supported in HTTP_TRACE_SERVICE"); return 0;
/* * This should be needed if we have a std::request, then add * std::request */
/* POSTCODE */ if (!srv) return 0;
if (no_ptr == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1')  char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0')  char *url;  else  char *url; if (!URLSpec(url))  buffer_copy_string_buffer(con->request.uri, url);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET)  con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0'))  con->http_status = 410; return 0;
if (http_server_srv == 0)  /* XXX don't want this anymore */ if (http_server_srv == 0)  HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE  keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400
if (req->method == HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method == HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (bu
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET)))  /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET)  2) || (len > TDF_URI_UNSET))  str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/';   if (sl!= strchr(buffer_Str(req->uri_raw), "http:"))  str = '0'; str = '0'; str = '0'; str = '0'; str = '0';  else  str = '0'
else  /* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/'))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*'))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/'))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if ((req->uri_raw->
if (!HTTP_SPACE_CLOSE)  return 0;
/* FIXME: no request  '/' */ if (req->method == HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req
con->request.protocol = HTTP_VERSION_UNSET;
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0)  if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->
if (strcmp(req->uri_raw, '/') == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (strcmp(req->uri_raw, '/') == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (strcmp(req->uri_raw, '/') == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (strcmp(req->uri_raw, '/') == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (strcmp(req->uri_raw, '/') == 0)  buffer_copy_string_bu
if (sl == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)
/* do not add http_request_parse, unless http_request_reparse: */
if (req->type == HTTP_PROTO)  const char* spec; if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (req->method!= HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.'))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->re
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http'))  buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0))  buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
else if (req->method == HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->request.uri == '0') || (req->request.uri == '0'))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else  /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET)  con->http_status = 500; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))
if (con->request.flags & FIXME_PREFIX)  if (req->request.flags & FIXME_PREFIX)  if (req->request.flags & FIXME_PREFIX)  con->http_status = 200; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 200; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))
/* XXX ns::http_request_parse_ns' check for new URLs */
con->error = 0;
if (next->flags & APPENDED)  char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET)  con->http_status = req->uri_raw;  else  /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;  if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://'))  con->http_status = 400; return 0;  if (req->method == HTTP_METHOD_CONNECTION_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 500; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!=
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req
/* GET http://www.example.org/foobar */ char *sl; if (0!= strchr(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->protocol == HTTP_VERSION_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0
if (con->protocol == HTTP_VERSION_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))
if (req->flags & DEBUG_FOCUS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))
const char *file = strdup(req->uri_raw->ptr); if (file)  buffer_copy_string_buffer(con->request.uri, file);  else if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, file);
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 5; /* Attempt to allow a URL to continue in */
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET)  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status =
if (req->uri_raw->flags & PP_RDONLY)  buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method
const char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;
if (!(sl = strchr(BUF_STR(req->uri_raw) + 8, 'http')))  return 0;
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/'))  con->http_status = 400; return 0;
if (con->orig_uri == HTTP_VERSION_UNSET)  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 480; /* Method not allowed */ return 0;
if (ptr) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;
if (!sl)  /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
const char *sl = strchr(BUF_STR(req->uri_raw) + 7, '/');
con->request.rhs_suffix = rhs_suffix;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_
/* * Then we need to * set the URI URI for a HTTP_URI in the local URL. */
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri,
if (!null)  /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *uri = aConstants->uri; const char *req = aConstants->uri;
if (req->uri_raw->ptr[0] == '*')  if (req->uri_raw->ptr[0] == '@')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '
/* * Get the request to this function */
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 200; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 200; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri
if (!HaveHostname(req->uri_raw, &__username))  return 0;
if (req->uri_raw == '/')  if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!=
if (req->request.method == HTTP_METHOD_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;
/* XXX - hw XXX */
if (req->method == HTTP_METHOD_OPTIONS)  con->http_status = 200; return 0;
if (req->i_need_page == FAILURE)  if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*')))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy
if (con->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;  if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0'))  con->http_status = 400; return 0;
const char *sl = '0';
if (req->method == HTTP_METHOD_UNSET)  con->http_status = 500; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con
if (next == NULL)  if (req->type == HTTP_SMPTYPE_HEAD)  const char *src = strdup(req->uri_raw); if (src == NULL)  if (next == NULL)  src = strdup(NULL); if (next == NULL)  strdup(NULL);   else  strdup(NULL);
if ((!device_get_parent(con))) return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/'))  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get a URL from the user that is the client, * and to allow the client to use this instead of an HTTP URI, unless we are trying to use this as a function */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (nl == NULL) return 0;
if (req->version = HTTP_VERSION_UNSET)  con->http_status = 200; return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return
else if (req->method!= HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0;  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure)  /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET)  con->http_status = 505; /* Version not Supported */ return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->
if (!__p)  return 0;
const char *name = NULL;
if (con->request.uri &&!(req->uri_raw->ptr[0] == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/'))  url = '0'; url = '0';
if (req->method!= HTTP_METHOD_UNSET)  con->http_status = 300; return 0;
else  /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(
/* This function is in the default HTTP protocol. */ if (i == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (i == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (i == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (i == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (i == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (i == 0) buffer_copy_string_bu
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/')  buffer_copy_string_buffer(con->request.uri, req->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method!= HTTP_METHOD_UNSET)  rv = 0;
if (!req->method)  printf("http_request_parse()n"); return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) || (req->method == HTTP_METHOD_READ)) return 0;
/* * XXX the url has already been loaded */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else  /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7))  con->http_status = 400; return 0;  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  con->http_status = 400; return 0
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n'))  /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
return 0;  if (req->method == HTTP_METHOD_UNSET)  con->http_status = 405; /* Method not allowed */ return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->http_status = 400; return 0;  if (buffer_is_empty(req->uri_raw))  con->
con->request.user = user;
if (srv == NULL)  log_warn("http_request_parse: http_request_parse: http_request_parse: %s", req->uri_raw); return 0;
if (req->iocmd == 0)  con->iocmd = 0;
else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->uri_raw->ptr[0] == '*')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->method!= HTTP_METHOD_OPTIONS)  buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->ptr[0] == '0')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->ptr[0] == '0')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->ptr[0] == '0')  buffer_copy_string_buffer(con->request.uri, req->uri_raw);  else if (req->ptr[0] == '0')  buffer_copy_string_bu
if (!http_request_msg_free(con->request.uri, http_request_msg_free(con->request.uri)))  return 0;
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0)  if ((req->srv == req->rv) && (req->rv == req->rv))  buf_copy_string_buffer(con->request.uri, req->uri_raw);

const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (!HTTP_SPACE_CLOSE) &return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
else if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
&else
&else if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; &if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
const char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
&else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (buffer_is_empty(req->uri_raw)) &con->http_status = 405; /* Method not allowed */ return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
<else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
else if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
<else &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->uri_raw->flags & PP_RDONLY) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
<else if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0;
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
<else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (!req->method) &printf("http_request_parse()&n"); return 0;
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
else if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
debug_printf("http_request_parse()n");
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not supported */ return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
else if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if ((req->request.uri == '<0') || (req->request.uri == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->request.uri == '<0') || (req->request.uri == '0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
if (!req->method) printf("http_request_parse()&n"); return 0;
<if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->aflags & HTTP_TRACE_SERVICE) log_error("http_request_parse: http_request_parse: http_TRACE_SECURITY not supported in HTTP_TRACE_SERVICE"); return 0;
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (buffer_is_empty(req->uri_raw)) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
<else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!__p) return 0;
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (no_ptr == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
return 0; <else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
<else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; <else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->request.method == HTTP_METHOD_UNSET) &con->http_status = 5; /* Version not Supported */ return 0;
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (!req->method) &printf("http_request_parse()<n"); return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
else
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!req->method) <printf("http_request_parse()<n"); return 0;
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 200; return 0;
if ((req->request.uri == '0') || (req->request.uri == '<0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
return 0; <else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->orig_uri == HTTP_VERSION_UNSET) if (req->method == HTTP_METHOD_UNSET) &con->http_status = 480; /* Method not allowed */ return 0;
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7,'')) &con->http_status = 400; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
<else &/* GET http://www.example.org/foobar */
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
&else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
&else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '<0'; url = '&0';
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
return 0; &if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!(sl = strchr(BUF_STR(req->uri_raw) + 8, 'http'))) &return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
else if (buffer_is_empty(con->uri_raw)) <con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
return 0; <else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!url) char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) <con->http_status = 400; return 0;
&else &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (srv == NULL) <log_warn("http_request_parse: http_request_parse: http_request_parse: %s", req->uri_raw); return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->aflags & HTTP_TRACE_SERVICE) &log_error("http_request_parse: http_request_parse: http_TRACE_SECURITY not supported in HTTP_TRACE_SERVICE"); return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if ((req->request.uri == '<0') || (req->request.uri == '<0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
&else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if ((req->request.uri == '<0') || (req->request.uri == '&0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (!req->method) <printf("http_request_parse()n"); return 0;
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
<else if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0;
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
return 0; <else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
return 0; else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (buffer_is_empty(con->uri_raw)) &con->http_status = 400; return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (url_find("http_request_parse", url) == -1) </* skip URL */ if (url->target->ptr) url->target->ptr->ptr = url; return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 5; /* Attempt to allow a URL to continue in */
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
return 0; else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
&else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else /* GET http://www.example.org/foobar */
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0;
return 0; else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method!= HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
else &/* GET http://www.example.org/foobar */ char *sl;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
&else <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
else if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* GET http://www.example.org/foobar */
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
<else <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
<else if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
if (!HTTP_SPACE_CLOSE) <return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
&else if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '<0'; url = '<0';
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
&else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
<else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
<else /* GET http://www.example.org/foobar */
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
if (__FILE__ == NULL) </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 5; /* Attempt to allow a URL to continue in */
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else &/* GET http://www.example.org/foobar */ char *sl;
&else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
<else &/* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (__FILE__ == NULL) /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->request.uri == '&0') || (req->request.uri == '&0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
<else if (buffer_is_empty(con->uri_raw)) <con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (null == strchr(req->uri_raw), "http: ") strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); return 0;
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
return 0; if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (!con->http_raw) con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if ((req->request.uri == '<0') || (req->request.uri == '0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
else if (buffer_is_empty(con->uri_raw)) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '0'; url = '&0';
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
<else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* GET http://www.example.org/foobar */ char *sl; if (0!= strchr(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->request.method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0;
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
&else &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
&else if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
&else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '<0'; url = '0';
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
else &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->uri_raw->flags & PP_RDONLY) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (buffer_is_empty(con->uri_raw)) con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&else /* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
<else </* GET http://www.example.org/foobar */ char *sl;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
<else &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
&else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (buffer_is_empty(req->uri_raw)) <con->http_status = 405; /* Method not allowed */ return 0;
if (!url) char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) &con->http_status = 400; return 0;
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
const char *sl = '<0';
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method!= HTTP_METHOD_UNSET) con->http_status = 300; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
return 0; &else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if ((req->request.uri == '0') || (req->request.uri == '&0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
<else &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
else if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '0'; url = '0';
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
&else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
<else if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
const char *sl = '&0';
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
&else buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
if (req->uri_raw->flags & PP_RDONLY) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
<else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (url_find("http_request_parse", url) == -1) &/* skip URL */ if (url->target->ptr) &url->target->ptr->ptr = url; return 0;
#endif
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
<else
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
return 0; &else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 200; return 0;
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
if (!req->method) &printf("http_request_parse()n"); return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
debug_printf("http_request_parse&n");
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (null == strchr(req->uri_raw), "http: ") <strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); return 0;
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '&0'; url = '<0';
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else &/* GET http://www.example.org/foobar */
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
/* GET http://www.example.org/foobar */ char *sl; if (0!= strchr(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (url_find("http_request_parse", url) == -1) </* skip URL */ if (url->target->ptr) <url->target->ptr->ptr = url; return 0;
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
<else if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
<else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
<else if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
<else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '&0'; url = '0';
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
&#endif
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->aflags & HTTP_TRACE_SERVICE) <log_error("http_request_parse: http_request_parse: http_TRACE_SECURITY not supported in HTTP_TRACE_SERVICE"); return 0;
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0;
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
else </* GET http://www.example.org/foobar */
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
con->uri_raw->ptr[0] = '&0';
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (srv == NULL) log_warn("http_request_parse: http_request_parse: http_request_parse: %s", req->uri_raw); return 0;
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
else <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
&else &/* GET http://www.example.org/foobar */
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if ((req->request.uri == '&0') || (req->request.uri == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &con->http_status = 400; return 0;
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (!url) <char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) <con->http_status = 400; return 0;
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0;
<else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
if (no_ptr == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
&if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (!__p) <return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->request.uri == '<0') || (req->request.uri == '<0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
<else if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7,'')) <con->http_status = 400; return 0;
if (!url) &char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) <con->http_status = 400; return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
<else if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
<else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((req->request.uri == '&0') || (req->request.uri == '&0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
else if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (buffer_is_empty(req->uri_raw)) con->http_status = 405; /* Method not allowed */ return 0;
if (0!= strncmp(BUF_STR(req->uri_raw), "http://")) <con->http_status = 400; return 0;
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (!http_request_msg_free(con->request.uri, http_request_msg_free(con->request.uri))) &return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
&else <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else &/* GET http://www.example.org/foobar */ char *sl;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
con->http_status = 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
<else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
return 0; &if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (!url) char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0;
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
&else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
<else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
&else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->orig_uri == HTTP_VERSION_UNSET) if (req->method == HTTP_METHOD_UNSET) <con->http_status = 480; /* Method not allowed */ return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method!= HTTP_METHOD_UNSET) &rv = 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
printf("http_request_parse()&n");
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
return 0; <if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
&else if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '&0'; url = '&0';
&else if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
<if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (buffer_is_empty(req->uri_raw)) &con->http_status = 300; return 0;
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
return 0; <else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
else buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
&else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0;
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 5; /* Attempt to allow a URL to continue in */
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
&else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '<0'; url = '<0';
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 240; /* Disable all other protocols. */ return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
&else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not supported */ return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if ((req->request.uri == '&0') || (req->request.uri == '0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->flags & PP_RDONLY) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->request.uri == '0') || (req->request.uri == '0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 300; return 0;
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
<else <buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (!req->method) printf("http_request_parse()n"); return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
debug_printf("http_request_parsen");
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '<0'; url = '&0';
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
return 0; &else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0;
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!null) /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->iocmd == 0) <con->iocmd = 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
return 0; <if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (url_find("http_request_parse", url) == -1) /* skip URL */ if (url->target->ptr) &url->target->ptr->ptr = url; return 0;
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (url_find("http_request_parse", url) == -1) /* skip URL */ if (url->target->ptr) url->target->ptr->ptr = url; return 0;
if (req->method!= HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
return 0; &if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
con->req_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method!= HTTP_METHOD_UNSET) &con->http_status = 300; return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '0'; url = '&0';
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
</* GET http://www.example.org/foobar */
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '<0'; url = '<0';
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
<else </* GET http://www.example.org/foobar */
else if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
else if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0;
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
&else if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
&else &buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
else if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<#endif
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
return 0; if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((req->request.uri == '0') || (req->request.uri == '0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else if (buffer_is_empty(con->uri_raw)) &con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
else <buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0;
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if ((req->request.uri == '<0') || (req->request.uri == '<0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->request.method == HTTP_METHOD_UNSET) con->http_status = 5; /* Version not Supported */ return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0;
&/* GET http://www.example.org/foobar */
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
req->uri_raw->ptr[0] = '0';
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '&0'; url = '&0';
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
<else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
else <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->request.uri &&!(req->uri_raw->ptr[0] == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
&else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (!url) &char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) &con->http_status = 400; return 0;
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * XXX the url has already been loaded */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 240; /* Disable all other protocols. */ return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) con->http_status = 240; /* Disable all other protocols. */ return 0;
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
<else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&else if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (srv == NULL) &log_warn("http_request_parse: http_request_parse: http_request_parse: %s", req->uri_raw); return 0;
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '0'; url = '0';
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->request.uri == '<0') || (req->request.uri == '&0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (buffer_is_empty(req->uri_raw)) con->http_status = 300; return 0;
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* GET http://www.example.org/foobar */ char *sl; if (0!= strchr(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '&0'; url = '&0';
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
&else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (con->orig_uri == HTTP_VERSION_UNSET) <if (req->method == HTTP_METHOD_UNSET) con->http_status = 480; /* Method not allowed */ return 0;
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
<if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if ((req->request.uri == '&0') || (req->request.uri == '<0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
<else buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
<else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
return 0; <if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
<else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
&else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!null) </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if ((req->request.uri == '0') || (req->request.uri == '0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0;
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
return 0; if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
&else if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
&if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '0'; url = '<0';
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
<else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->uri_raw->flags & PP_RDONLY) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (con->request.method == HTTP_METHOD_UNSET) <con->http_status = 5; /* Version not Supported */ return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; <if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
&if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else if (buffer_is_empty(req->uri_raw)) con->http_status = 500; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
printf("http_request_parse()<n");
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (!con->http_raw) <con->http_status = 400; return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
&else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((req->request.uri == '0') || (req->request.uri == '<0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (!HaveHostname(req->uri_raw, &__username)) <return 0;
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
printf("http_request_parse()n");
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * XXX the url has already been loaded */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
&else if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
if (!con->http_raw) &con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (buffer_is_empty(req->uri_raw)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (null == strchr(req->uri_raw), "http: ") &strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); strcpy(buffer_copy_string_buffer(con->request.uri, req->uri_raw), "http: "); return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
<else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 200; return 0;
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
&else /* GET http://www.example.org/foobar */
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, file);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
printf("http_request_parse<n");
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '&0'; url = '<0';
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
const char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
&else if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
req->uri_raw->ptr[0] = '&0';
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
return 0; &else if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0;
&else &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
<else &buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method!= HTTP_METHOD_UNSET) rv = 0;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
return 0; if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (!url) <char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) con->http_status = 400; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
else if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
con->uri_raw->ptr[0] = '0';
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (!url) <char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) &con->http_status = 400; return 0;
return 0; &if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
else </* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '&0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if ((req->request.uri == '&0') || (req->request.uri == '0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
<else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else if (buffer_is_empty(con->uri_raw)) &con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
<if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->iocmd == 0) &con->iocmd = 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '<0'; url = '0';
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
else &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
<else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
else <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
&if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '0'; url = '<0';
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
<if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
if (!(sl = strchr(BUF_STR(req->uri_raw) + 8, 'http'))) return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
if (url_find("http_request_parse", url) == -1) &/* skip URL */ if (url->target->ptr) url->target->ptr->ptr = url; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not supported */ return 0;
if ((req->request.uri == '&0') || (req->request.uri == '&0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
&else if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (!http_request_msg_free(con->request.uri, http_request_msg_free(con->request.uri))) <return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
else &/* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
con->uri_raw->ptr[0] = '<0';
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
else /* GET http://www.example.org/foobar */ char *sl;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
printf("http_request_parsen");
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '0'; url = '<0';
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (!HaveHostname(req->uri_raw, &__username)) return 0;
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
/* XXX - hw XXX */
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
&else /* GET http://www.example.org/foobar */ char *sl;
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
<if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
return 0; if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
printf("http_request_parse&n");
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (con->request.uri &&!(req->uri_raw->ptr[0] == '&0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
&else if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0;
&else </* GET http://www.example.org/foobar */
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (buffer_is_empty(con->uri_raw)) <con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
<else if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
return 0; &if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
&else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
else <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
&else </* GET http://www.example.org/foobar */ char *sl;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
<else if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (buffer_is_empty(con->uri_raw)) con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
req->uri_raw->ptr[0] = '<0';
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
&else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
else if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (!http_request_msg_free(con->request.uri, http_request_msg_free(con->request.uri))) return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
&else &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '<0'; url = '0';
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
<else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
if ((req->request.uri == '<0') || (req->request.uri == '&0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (con->orig_uri == HTTP_VERSION_UNSET) <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 480; /* Method not allowed */ return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
<else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->uri_raw->flags & PP_RDONLY) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (buffer_is_empty(req->uri_raw)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (url_find("http_request_parse", url) == -1) </* skip URL */ if (url->target->ptr) &url->target->ptr->ptr = url; return 0;
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (0!= strncmp(BUF_STR(req->uri_raw), "http://")) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '<0'; url = '&0';
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (!req->method) printf("http_request_parse()<n"); return 0;
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
debug_printf("http_request_parse<n");
/* FIXME: no request &&'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
<else if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
<if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if ((req->request.uri == '0') || (req->request.uri == '<0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
else if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
&else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) con->http_status = 400; return 0;
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (__FILE__ == NULL) &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if ((req->request.uri == '&0') || (req->request.uri == '<0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) &url = '&0'; url = '0';
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
return 0; <if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
return 0; &else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
&else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
<else if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
&if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->version = HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0;
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
return 0; else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!HaveHostname(req->uri_raw, &__username)) &return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
<else if (req->method == HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, file);
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7,'')) con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* FIXME: no request <<'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) <str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
&else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else /* GET http://www.example.org/foobar */ char *sl;
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (con->orig_uri == HTTP_VERSION_UNSET) &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 480; /* Method not allowed */ return 0;
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
<else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
<if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
&else <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
&else </* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (url_find("http_request_parse", url) == -1) /* skip URL */ if (url->target->ptr) <url->target->ptr->ptr = url; return 0;
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* FIXME: no request &<'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
return 0; <if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->version &= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
&else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
if ((req->request.uri == '0') || (req->request.uri == '&0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
&if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
<else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '0')) &con->http_status = 410; return 0;
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; <else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (url_find("http_request_parse", url) == -1) &/* skip URL */ if (url->target->ptr) <url->target->ptr->ptr = url; return 0;
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!url) &char *sl; if (0!= strchr(BUF_STR(url), "http://", 7)) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->method!= HTTP_METHOD_UNSET) <rv = 0;
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) &/* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; &if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <url = '0'; url = '0';
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) == '<0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
return 0; &else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (!req->get_method_reply) <if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
<else /* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
else &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (con->orig_uri == HTTP_VERSION_UNSET) &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 480; /* Method not allowed */ return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->version = HTTP_VERSION_UNSET) &con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
const char *sl = '0';
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (no_ptr == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
&else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '<0')) &con->http_status = 410; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
&else if (req->method == HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
debug_printf("http_request_parse()&n");
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
debug_printf("http_request_parse()<n");
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) <con->http_status = 400; return 0;
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (buffer_is_empty(req->uri_raw)) con->uri_status = 400; return 0;
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->request.method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0;
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
&else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<n')) &/* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (buffer_is_empty(con->uri_raw)) con->http_status = 400; return 0;
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (con->orig_uri == HTTP_VERSION_UNSET) &if (req->method == HTTP_METHOD_UNSET) con->http_status = 480; /* Method not allowed */ return 0;
if (!HTTP_SPACE_CLOSE) return 0;
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
&else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
return 0; else if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
&else if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) <con->http_status = 400; return 0;
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
else &buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if (con->orig_uri == HTTP_VERSION_UNSET) if (req->method == HTTP_METHOD_UNSET) con->http_status = 480; /* Method not allowed */ return 0;
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) &buf_copy_string_buffer(con->request.uri, req->uri_raw);
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* FIXME: no request <&'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->iocmd == 0) con->iocmd = 0;
&else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; &else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
else if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
const char *file = strdup(req->uri_raw->ptr); if (file) buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; &else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) con->http_status = 300; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
else </* GET http://www.example.org/foobar */ char *sl;
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
<else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '&0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
&else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* FIXME: no request '/' */ if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; &if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) &con->http_status = 400; return 0;
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
<else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
return 0; else if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) &con->http_status = 400; return 0;
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0;
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
&else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0;
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '&0') && (req->uri_raw->ptr[0] == '0')) <con->http_status = 410; return 0;
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0;
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) &if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (buffer_is_empty(req->uri_raw)) <con->http_status = 300; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
<else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
<else if (buffer_is_empty(con->uri_raw)) &con->http_status = 400; return 0;
else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->request.method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0;
&else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (con->request.uri &&!(req->uri_raw->ptr[0] == '<0')) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if ((req->request.uri == '&0') || (req->request.uri == '<0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '<n');
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
<else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
&else <buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '&0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 300; return 0;
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) con->http_status = 410; return 0;
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) con->http_status = 400; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
const char *file = strdup(req->uri_raw->ptr); if (file) <buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) <const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* This function is in the default HTTP protocol. */ if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0;
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) <if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE <keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
&else &/* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '0')) == '&0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->version = HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
<else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->version <= HTTP_VERSION_UNSET) &con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0;
<else if ((sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) == '0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of <http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
<else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->type == HTTP_PROTO) const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->version <= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
<else &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
/* FIXME: no request <'/' */ if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; &if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (next == NULL) if (req->type == HTTP_SMPTYPE_HEAD) const char *src = strdup(req->uri_raw); if (src == NULL) &if (next == NULL) src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) &con->http_status = 410; return 0;
if (con->orig_uri == HTTP_VERSION_UNSET) <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 480; /* Method not allowed */ return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '0') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
return 0; if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
<else <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (!req->method) <printf("http_request_parse()&n"); return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
if (con->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
<else <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (req->type == HTTP_PROTO) <const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0;
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
if (req->in_encoding == 'ISO-8859-1') <char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
&else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (sl == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, '&n');
else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
&else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->uri_raw == '/') if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0;
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
<else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
<else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_
<else if (buffer_is_empty(req->uri_raw)) <con->uri_status = 400; return 0;
if (next == NULL) &if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) <src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->request.url!= NULL) </* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '0'; url = '&0';
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) <HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (!__p) &return 0;
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; &buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
&if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
&else if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
<else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
<else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) &if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
<else if ((req->uri_raw->ptr[0] == '*') && (req->uri_raw->ptr[0] == '<0')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->uri_raw == '/') <if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) if (req->url_protocol == HTTP_URL_SPATH_HEAD) &return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
<else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) &if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (next == NULL) <if (req->type == HTTP_SMPTYPE_HEAD) &const char *src = strdup(req->uri_raw); if (src == NULL) if (next == NULL) &src = strdup(NULL); if (next == NULL) strdup(NULL); else strdup(NULL);
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0;
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (!req->get_method_reply) if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '<0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else if (req->method!= HTTP_METHOD_OPTIONS) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '<0')) <con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if (!(sl = strchr(BUF_STR(req->uri_raw) + 8, 'http'))) <return 0;
/* * XXX the url has already been loaded */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
<else if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; return 0;
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0;
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
/* This function is in the default HTTP protocol. */ if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else /* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
if (http_server_srv == 0) &/* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->i_need_page == FAILURE) <if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if ((req->request.uri == '0') || (req->request.uri == '&0')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (con->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '&0'; url = '<0';
if (con->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (do_create_failure) </* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
&else &/* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (!null) &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
<else if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) <con->http_status = 410; return 0;
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) </* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) &2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
<else </* * If the URL is an error, return 0 */ buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & <0)) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (con->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '&') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0;
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
<else if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (sl == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
&else if (buffer_is_empty(req->uri_raw)) &con->http_status = 500; return 0;
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->type == HTTP_URI_UNSET) con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* * Ignore if the uri */ if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '*') || (req->uri_raw->ptr[0] == '.')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->re
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '<0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
if (req->version &= HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
&else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->uri_raw == '/') &if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
else if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0;
<else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
const char * url; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '/')) url = '&0'; url = '0';
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0;
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (re
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); <else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
<else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
if (req->type == HTTP_URI_UNSET) &con->http_status = req->uri_raw; else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
else
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
<else
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of &http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) <return 0; &if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
/* do a linkage and reload the server */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0
if (req->request.url!= NULL) /* No new URL */ if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; return 0; &if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!=
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') <if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if (req->version <= HTTP_VERSION_UNSET) con->http_status = 200; return 0; <if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* * In a loop, send it to the client. */ if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '') <buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (sl == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') &char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) /* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
<else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
&else if (buffer_is_empty(con->uri_raw)) <con->http_status = 400; return 0;
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* * This has been implemented by HTTP_CONNECTION_LINK to a free list of http_url's value. */ if (req->url_protocol == HTTP_URL_PATH_S) <if (req->url_protocol == HTTP_URL_SPATH_HEAD) return 0; <if (req->url_protocol == HTTP_URL_PATH_HEAD) con->url_protocol = 505; /* Version not Supported */ return 0; if (req->protocol == HTTP_VERSION_UNSET) con->url_protocol = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->url_protocol = 405; /* Option not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri
if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '@') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
else if (buffer_is_empty(req->uri_raw)) &con->uri_status = 400; return 0;
if (!sl) &/* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
if (!sl) </* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '0') && (req->uri_raw->ptr[0] == '0')) con->http_status = 410; return 0;
if (req->uri_raw->ptr[0] == '*') if (req->uri_raw->ptr[0] == '@') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '/') &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '
/* This function is in the default HTTP protocol. */ if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (i == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (i == 0) buffer_copy_string_bu
return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if ((req->method == HTTP_METHOD_UNSET) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '*')) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if ((req->method!= HTTP_METHOD_OPTIONS) && (req->method!= HTTP_METHOD_OPTIONS) && (req->uri_raw->ptr[0] == '/')) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((req->uri_raw->
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '0') <char *url; &else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
/* * At least one of the following http servers are currently waiting for * the server to access, and we will get the http servers here. */ if (bcache_flags & HB_SECTION_REQUEST_TRUE) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0
if (http_server_srv == 0) </* XXX don't want this anymore */ if (http_server_srv == 0) &HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if (con->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->request.url!= NULL) &/* No new URL */ if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else </* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw); else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0;
if (req->method!= HTTP_METHOD_UNSET) <con->http_status = 300; return 0;
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* FIXME: no request &'/' */ if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* skip all the parameters */ buffer_set_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS)
/* POST data from the web site */ if (req->uri_raw->ptr[0] == ':') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri,
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) <con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '<0')) <con->http_status = 410; return 0;
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->ptr[0] == '<0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/')) == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if ((sl = strchr(BUF_STR(req->uri_raw) + 1, '/') == '/') buffer_copy_string_buffer(con->request.uri, req->
if (con->request.flags & FIXME_PREFIX) &if (req->request.flags & FIXME_PREFIX) if (req->request.flags & FIXME_PREFIX) &con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); &else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
/* * If we're waiting for a buffer * to add the connection to the web interface, then put it back. */ if (req->ptr[0] == '<0') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '&0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->ptr[0] == '0') buffer_copy_string_bu
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* try to see if it's the right one */ if (req->method == HTTP_METHOD_UNSET) &con->http_status = 500; /* Check if the URLs are matched in the web/foobar */ if ((req->uri_raw->ptr[0] == '<0') && (req->uri_raw->ptr[0] == '&0')) con->http_status = 410; return 0;
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
/* XXX - we can't do this here */ if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&n')) </* XXX - */ sl = strchr(BUF_STR(req->uri_raw) + 7, 'n');
if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
if (req->i_need_page == FAILURE) if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
const char *sl = strchr(BUF_STR(req->uri_raw) + 7); if (sl!= strchr(BUF_STR(req->uri_raw) + 7, '/')) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (!sl) /* * Get a random URL for this resource */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!
&else /* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
&else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method
/* Is this the HTTP server? */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status =
if (do_create_failure) &/* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; <if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) <2) || (len > TDF_URI_UNSET)) str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; <if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->uri_raw->flags & PP_RDONLY) buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->type == HTTP_PROTO) &const char* spec; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; if (req->method!= HTTP_METHOD_OPTIONS) &con->http_status = 400; return 0;
if (strcmp(req->uri_raw, '/') == 0) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (strcmp(req->uri_raw, '/') == 0) buffer_copy_string_bu
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & &0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (do_create_failure) /* the return value of the request, if the data was removed. */ if (req->method == HTTP_METHOD_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
const char *file = strdup(req->uri_raw->ptr); if (file) &buffer_copy_string_buffer(con->request.uri, file); else if (req->uri_raw->ptr[0] == '/') buffer_copy_string_buffer(con->request.uri, file);
if (req->type == HTTP_URI_UNSET) <con->http_status = req->uri_raw; <else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) con->http_status = 400; return 0; if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, 'http://')) con->http_status = 400; return 0; if (req->method == HTTP_METHOD_CONNECTION_UNSET) con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405;
&else </* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
if (con->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; &if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->options && NULL == strchr(BUF_STR(req->options) + 7, 'http')) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '/'); if (req->options &&!(req->options & 0)) &buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->options->ptr[0] == '*'
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.orig_uri, req->uri_raw); if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req
if (req->method == HTTP_METHOD_UNSET) con->http_status = 400; return 0; &if (buffer_is_empty(req->uri_raw)) &con->http_status = 400; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (bu
if (con->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) <if (req->request.flags & FIXME_PREFIX) con->http_status = 200; return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw))
<else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; /* strip absolute URLs * */ buffer_copy_string_buffer(con->request.uri, req->uri
if (req->method == HTTP_METHOD_UNSET) &con->http_status = 505; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->in_encoding == 'ISO-8859-1') &char *sl; if (strchr(BUF_STR(req->uri_raw), "http://") == '&0') <char *url; <else char *url; if (!URLSpec(url)) buffer_copy_string_buffer(con->request.uri, url);
return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; <if (buffer_is_empty(req->uri_raw)) <con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->
/* * Check for the new version of the HTTP_VERSION_UNSET */ if ((i = 0) && ((req->id == HTTP_VERSION_UNSET) && ((req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || ((req->id == HTTP_VERSION_UNSET) && (req->id == HTTP_VERSION_UNSET)) || (req->id == HTTP_VERSION_UNSET)) <if ((req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET) || (req->id == HTTP_VERSION_UNSET)) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else &buffer_
<else if (strncmp(BUF_STR(req->uri_raw), "http:") == 0) <if ((req->srv == req->rv) && (req->rv == req->rv)) <buf_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->version &= HTTP_VERSION_UNSET) <con->http_status = 200; return 0; if (req->method == HTTP_METHOD_UNSET) &con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return
/* If the url has been descriptor, then free the URL for a request. */ if (need_error == 0) <if (req->uri_raw->ptr[0] == '/') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') &if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '&') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); &else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->i_need_page == FAILURE) &if (NULL == (sl = strchr(BUF_STR(req->i_page) + 7, '*'))) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy
if (!req->get_method_reply) &if ((req->uri_raw->ptr[0] == '/') || (req->uri_raw->ptr[0] == '0') || (req->method!= HTTP_METHOD_OPTIONS)) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->
con->http_status = 400; return 0;
&else /* GET http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) <con->http_status = 400; return 0; buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
<else <buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (next->flags & APPENDED) &char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (dl && ((wd->td_typ == TDF_URI_UNSET) && (wd->td_typ == TDF_URI_UNSET))) /* Unexpected link status */ str = '/'; if ((hd->td_typ == TDF_URI_UNSET) && ((len & TDF_URI_UNSET) 2) || (len > TDF_URI_UNSET)) &str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; str = '/'; if (sl!= strchr(buffer_Str(req->uri_raw), "http:")) str = '0'; str = '0'; str = '0'; str = '0'; str = '0'; else str = '0'
if (http_server_srv == 0) /* XXX don't want this anymore */ if (http_server_srv == 0) HTTP_CONNECTION_UNSET, HTTP_CONNECTION_CLOSE, HTTP_CONNECTION_KEEPALIVE &keep_alive_set = HTTP_CONNECTION_UNSET; if (req->protocol == HTTP_VERSION_UNSET) <con->http_status = 505; /* Version not Supported */ return 0; if (req->method == HTTP_METHOD_UNSET) con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400
if ((con->uri_raw->ptr[0] == '/') &&!req->uri_raw->ptr[0] == '<') &buffer_copy_string_buffer(con->uri_raw, req->uri_raw); else &buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if (buffer_is_empty(req->uri_raw)) con->http_status = 200; return 0;
if (req->protocol == HTTP_VERSION_UNSET) con->http_status = 500; /* Version not Supported */ return 0; &if (req->method == HTTP_METHOD_UNSET) <con->http_status = 405; /* Method not allowed */ return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) con->http_status = 400; return 0; if (buffer_is_empty(req->uri_raw)) <unk>
if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method == HTTP_METHOD_OPTIONS) &buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_METHOD_OPTIONS) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (req->method!= HTTP_
if ((req->method == HTTP_METHOD_UNSET) && req->uri_raw->ptr[0] == '*') buffer_copy_string_buffer(con->request.uri, req->uri_raw); &else buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method == HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->
if (next->flags & APPENDED) <char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) &if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else if (next->flags & APPENDED) buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw);
if (req->method!= HTTP_METHOD_UNSET) con->http_status = 400; return 0;
<else if (buffer_is_empty(req->uri_raw)) <con->http_status = 500; return 0;
/* Get http://www.example.org/foobar */ char *sl; if (0!= strncmp(BUF_STR(req->uri_raw), "http://", 7)) con->http_status = 400; return 0; <if (NULL == (sl = strchr(BUF_STR(req->uri_raw) + 7, '&0')) <con->http_status = 400; return 0;
if (0!= strncmp(BUF_STR(req->uri_raw), "http://")) con->http_status = 400; return 0;
else &/* GET http://www.example.org/foobar */ buffer_copy_string_buffer(con->request.uri, req->uri_raw); if (req->method!= HTTP_METHOD_OPTIONS) <buffer_copy_string_buffer(con->request.uri, req->uri_raw); <else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(con->request.uri, req->uri_raw); else buffer_copy_string_buffer(
