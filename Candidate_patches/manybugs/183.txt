golden:
if (EXPECTED(*retval != object)) { zval_ptr_dtor(&object); } else { Z_DELREF_P(object); }
inference:

zval_ptr_dtor = &object;
zval_ptr_dtor(object);
zval_ptr_dtor(object, NULL);
zval_ptr_dtor (&object);
object = zval_ptr_dtor(&object);
zval_ptr_dtor(&object, NULL);
zval_ptr_dtor(&object, 0);
zval_ptr_dtor(&retval);
zval_ptr_dtor(&object);
ptr_dtor(&object);
zval_ptr_dtor();
zval_ptr_dtor(object, 0);
rv = zval_ptr_dtor(&object);
zval_ptr_dtor(object, type);
splx(s);
zval_ptr_dtor = object;
zval_ptr_dtor(object, rv);
(void) zval_ptr_dtor(&object);
zval_get_ptr_dtor(&object);
zval_ptr_dtor(&object, type);
zval_ptr_dtor;
zval_ptr_dtor(&obj);
zval_ptr_dtor( object );
zval_ptr_dtor(object, &rv);
zval_ptr_dtor(object, key);
zval_ptr_dtor(retval);
zval_ptr_dtor(object, &object);
zval_ptr_dtor(&object, rv);
zval_str_dtor(&object);
zval_ptr_dtor(&key);
zval_ptr_dtor((void *)&object);
zval->ptr_dtor(&object);
zval_ptr_dtor2(&object);
zval_ptr_dtor(&rv);
zval_tr_dtor(&object);
zval_ptr_dtor = NULL;
(void)zval_ptr_dtor(&object);
__zval_ptr_dtor(&object);
const zval_ptr_dtor(&object);
zval_ptr_dtor(&property);
zval_ptr_dtor(&zval_object);
zval_ptr_int(&object);
Zval_ptr_dtor(&object);
zval_ptr_dtor((int)&object);
zval_ptr_dtor(&_object);
zval_ptr_id(&object);
zval_ptr_dtor( &object );
zval_ptr_ttor(&object);
zval_object_dtor(&object);
zval_ptr_dtor(object, retval);
zval_ptr_dtor(obj);
xval_ptr_dtor(&object);
s = zval_ptr_dtor(&object);
zval_ptr_dtor(&real_object);
zval_ptr_dtor(object->dtor);
zval_ptr_dtor(object, PR_TRUE);
zval_ptr_dtor_init(&object);
sval_ptr_dtor(&object);
zval_ptr_dtor(*object);
zval_ptr_dtor(&object, key);
zval_ptr_flags(&object);
zval_ptr_ldtor(&object);
tmp_ptr_dtor(&object);
zval_ptr_dtor(object, 1);
return zval_ptr_dtor(&object);
zval_ptr_dtor((void **)&object);
zval_ptr_dtor(tmp_member);
zval_ptr_dtor(rv);
zval_ptr_dtor(object, object);
zval_ptr_dtor(&type);
zval_set_dtor(&object);
zval_set_ptr_dtor(&object);
zval_ptr_dtor(&ptr);
zval_ptr_dtor(&object_ptr);
szval_ptr_dtor(&object);
zval_ptr_dtor(&object[0]);
zval_ptr_dtor(object.get());
zval.ptr_dtor(&object);
zval_ptr_dtors(&object);
zval_ptr_dtor(&object, object);
zval_ptr_dtor(&object, &type);
zval_ptr_dtor(Object);
zval_ptr_dtor(ptr);
std::dtor(&object);
zval_ptr_dtor(&object, 1);
zval_ptr = &object;
zval_ptr_dtor_flag(&object);
zval_ptr_dtor(__func__);
retval_ptr_dtor(&object);
object = zval_ptr_dtor();
zval_ptr_dtor(&member);
zval_ptr_dtor(object, &type);
zval_ptr_dtor++;
zval_ptr_dtor(0);
zval_ptr_dtor(m);
zval_ptr_attr(&object);
result = zval_ptr_dtor(&object);
zval_ptr_dtor(p);
zval_ptr_dtor(object, &key);
zval_ptr_init(&object);
zval_ptr_dtor(object, 0, 0);
tmp_dtor(&object);
zval_ptr_dtor(object, TRUE);
zval_ptr.dtor(&object);
zval_ptr_dtor_ptr(&object);
zval_ptr_dtor(dtor);
zval_property_dtor(&object);
zval_ptr_dtor = 0;
static zval_ptr_dtor(&object);
zval_ptr_dtor(&object->dtor);
zval_ptr_dtor(key);
zval_ptr_dtor_free(&object);
const zval_ptr_dtor(&object)
zval_ptr_dtor('0');
zval_int_dtor(&object);
zvalptr_dtor(&object);
zval_ptr_dtor_set(&object);
zval_ptr_dtor(&m);
val_ptr_dtor(&object);
zval_ptr_dtor(&object, 0, 0);
zval_ptr_dtor(&state);
zval_ptr_dtor(object, name);
zval_ptr_dtor(nsnull);
zval_ptr_dtor_flags(&object);
zval_ptr_dtor(object_ptr);
zval_ptr_dtor(&dtor);
zval_ptr_str(&object);
zval_ptr_dtor1(&object);
zval_ptr_dtor(object, true);
__ptr_dtor(&object);
zval_ptr_dtor(&get_object());
err = zval_ptr_dtor(&object);
bzero(&object);
zval_ptr_dtor(&(object));
zval_ptr_dtor(&u);
zval_ptr_dtor(&obj->object);
zend_ptr_dtor(&object);
zval_ptr_retval(&object);
zval_ptr_dtor(&object, -1);
zval_ptr_dtor(object, -1);
zval_ptr_dtor(&zval->object);
zval_ptr_fd(&object);
zval_ptr_dtor(&object, false);
__dtor(&object);
zval_ptr_dtor=&object;
zval_ptr_dtor( & object );
zval_ptr_dtor(&object, true);
else zval_ptr_dtor(&object);
zval_ptr_dtor(&zobj);
zval_ptr_dtor(&id);
zval_ptr_dtor(&object) = 0;
zval_ptr_dtor(property_info);
zval_type_dtor(&object);
zval_ptr_dtor(&m_object);
zval_ptr_dtor(&object->ptr);
self.zval_ptr_dtor(&object);
zval_ptr_type(&object);
zval_ptr_dtor(&object, this);
zval_ptr_dtor(&object, name);
zval_ptr_dtor(&object) - 1;
zval_ptr_dtor(object, 0, NULL);
zval_ptr_dtor(&tmp_object);
ZVAL_PTR_DTR(&object);
zval_ptr_dtor(object, &state);
zend_object_dtor(&object);
zval_ptr_dtor(&object.dtor);
zval_ptr_dtor(&object == NULL);
zval_ptr_dtor(object.dtor());
zval_ptr_dtor(&object, &key);
zval_ptr_dtor(&retval->object);
zval_ptr_dtor(&object,0);
PZ_DTR(&object);
mtx_dtor(&object);
dtor(&object);
zval_dtor(&object);
zval_ptr_dtor(&object, 0, NULL);
zval_ptr_dtor(&tmp_member);
zval_dtor(object);
zval_ptr_dtor(&object, &state);
ZVAL_PTR_DTD(&object);
zval_ptr_dtor(zobj->object);
zval_ptr();
Z_PTR_DTR(&object);
zval_ptr_dtor(&object, p);
int dtor;
zval_ptr_dtor(&object, &object);
zval_ptr_dtor_dtor(&object);
zval_ptr_dtor(object, ptr);
set_dtor(&object);
str_dtor(&object);
zval_get_object(&object);
int i;
zval_ptr_dtor(&object, int type);
zval_ptr_dtor(object, &sc);
zval_ptr_dtor(object, object_type);
zval_ptr_dtor(&object) /* FIXME: zval_ptr_dtor should not be used */
zval_ptr_dtor(object, &zobj->object_get);
zval_ptr_dtor(object, &sig);
zval_ptr_dtor(&object, sizeof(struct proj_property_info));
zval_ptr_dtor(object, tmp_member);
zval_ptr_dtor(&object, retval);
zval_ptr_dtor(&object, &seq);
zval_ptr_dtor(&object, &retval);
zval_ptr_dtor(&object, &sig));
zval_ptr_dtor(object, object->__func__);
zval_ptr_dtor(&object)->ptr;
zval_ptr_dtor(&object, &hash);
zval_ptr_dtor(&object, sizeof(zval_ptr_dtor));
zval_ptr_dtor(&object, &sig);
zval_ptr_dtor(&object, nsnull);
zval_ptr_dtor(&object, &name);
zval_ptr_dtor(object, &is);
zval_ptr_dtor(&src);
zval_ptr_dtor(&property_object);
zval_ptr_dtor(object); /* XXX - */
zval_ptr_dtor(object, sizeof(struct property_info), sizeof(struct property_info));
zval_ptr_dtor(&object, sizeof(struct zval_ptr_dtor));
zval_ptr_dtor(&object, object->size);
zval_ptr_dtor(&object, &rv);
zval_ptr_dtor(object);  else  zval_ptr_dtor(&object);
zval_ptr_dtor(&object, tmp_member);
zval_ptr_dtor(&zobj->object);
zval_ptr_dtor(object, ptr_retval);
zval_ptr_dtor(&object)->tmp_type = TS_VAR_D;
zval_ptr_dtor(object, sizeof(object));
zval_ptr_dtor(&property_property_property_property);
zval_ptr_dtor(&object, object->path);
zval_ptr_dtor(&object, REFERENCE);
zval_ptr_dtor(object, &retval);
zval_ptr_dtor(&property_info);
zval_ptr_dtor(&property_info->dtor_id);
zval_ptr_dtor(&object, n_ptr);
zval_ptr_dtor(object, &m->m_family);
zval_ptr_dtor(&object, object->ptr_cnt);
zval_ptr_dtor(object, &zobj->ptr_ptr_dtor);
zval_ptr_dtor(&object, getter_AddRefs(err));
zval_ptr_dtor(object, &slot);
zval_ptr_dtor(&object, &obj);
zval_ptr_dtor(object, ptr_type);
zval_ptr_dtor(object); /* XXX ignores the dtor so that the object */
zval_ptr_dtor(object, (struct zval *)object);
zval_ptr_dtor(&object, &is_same_same_saved);
zval_ptr_dtor(&zval_ptr_prop);
zval_ptr_dtor(&object, PZ_TEST_WINDOW);
zval_ptr_dtor(&object, zval_ptr_property_info);
zval_ptr_dtor(&(struct object *)object);
zval_ptr_dtor(&object, (long)0);
zval_ptr_dtor(&object, &zobj);
zval_ptr_dtor(object, getter_AddRefs(tmp_member));
zval_ptr_dtor(&object, &det);
zval_ptr_dtor(&object, PR_TRUE);
zval_ptr_dtor(&object)  0;
zval_ptr_dtor(&object, nsCRT::strlen(&object));
zval_ptr_dtor(&(object? object : '0'));
zval_ptr_dtor(object, &zobj->object_ptr);
zval_ptr_dtor(&object, ptr_len);
zval_ptr_dtor(object, Z_DEFAULT_PARAMETER);
zval_ptr_dtor(&object, PZ_TYPE_P(object));
zval_ptr_dtor(&object, &object->key);
zval_ptr_dtor(object, object->offset);
zval_ptr_dtor(&(object? object : '0'));
zval_ptr_dtor(&object);
&zval_ptr_dtor(&object);
zval_ptr_dtor(&object) &0;
zval_ptr_dtor(object); <else zval_ptr_dtor(&object);
zval_ptr_dtor(object); &else zval_ptr_dtor(&object);
zval_ptr_dtor(object); else &zval_ptr_dtor(&object);
zval_ptr_dtor(&object) <0;
zval_ptr_dtor(&(object? object : '&0'));
zval_ptr_dtor('&0');
zval_ptr_dtor(object); &else &zval_ptr_dtor(&object);
zval_ptr_dtor(&object) 0;
zval_ptr_dtor = &object;
zval_ptr_dtor(&(object? object : '<0'));
zval_ptr_dtor(&object);
zval_ptr_dtor(object); <else <zval_ptr_dtor(&object);
zval_ptr_dtor(object); &else <zval_ptr_dtor(&object);
zval_ptr_dtor(object); else zval_ptr_dtor(&object);
<zval_ptr_dtor(&object);
<zval_ptr_dtor(&object);
zval_ptr_dtor('0');
&zval_ptr_dtor(&object);
zval_ptr_dtor('<0');
zval_ptr_dtor(object); else <zval_ptr_dtor(&object);
zval_ptr_dtor(object); <else &zval_ptr_dtor(&object);
zval_ptr_dtor(object);
