golden:
<extra_id_0>
inference:

#endif /* XXX */
#endif /*
#endif
#endif /* DEBUG */
# endif /* XXX */
#endif /* */
return 0;
#endif /*/
#else
# endif
#endif;
#endif */
# endif /*
#endif /* NOTREACHED */
#endif /*XXX */
#endif /* XXX*/
#endif /* DEBUG*/
#endif /* NULL */
#endif (void)
# endif /* DEBUG */
#endif /* MODULE */
#ifdef DEBUG
#endif /* endif */
#endif /* TODO */
#endif /* FILE */
*/
return (0);
#endif/*/
#endif /* ENDIF */
#endif return 0;
#endif /* XXXX */
#endif /* None */
# endif /* */
/* XXX */
#endif /*DEBUG */
#endif /* #endif
#endif /* debug */
break;
/* endif */
#endif /* * XXX */
endif
#endif /* DELETE */
continue;
#endif /* DELAY*/
#endif /* debug*/
#endif /* WARNING */
#endif /*.*/
#endif/*
Endif
#endif /* BUG */
#endif /* alloc */
#endif /* FALSE */
# endif */
#endif /* nothing to do */
return NS_OK;
#endif /* INIT */
#endif /* XXX **/
endif /* XXX */
# endif;
#endif /* 2 */
return 1;
#endif /*GENERIC*/
#endif /* XXX: */
#endif #ifdef DEBUG
pass
#endif /*ENDIF */
#endif:
endif;
#endif /* STATUS */
#endif /* FIXME: */
#endif /* FAILURE */
#endif /* #endif */
#endif /* GLOBAL */
#endif /* DIAGNOSTIC */
#endif /* READ */
else
#endif 0
#endif /* NULL*/
#endif /* 0 */
#endif /* PR_LOGGING */
#endif /* not implemented */
#endif /* GUID */
#endif /* DBG */
#endif /*GNUC*/
#endif /* UNUSED */
#endif /* NOTIFY */
#endifs
#endif /*GENERIC */
#endif /* NECKO */
#endif /* allocate */
#endif /* CONFIG */
#endif /* VFS */
#
printf("reassemble_initn");
#endif /* DPRINTF */
#endif /* Debug*/
#endif /*prefix */
#endif /* I/O */
#Endif
#endif /* MODULE*/
#endif /* DEVICE */
#endif /* NOTREACHED*/
# endif /* XXX*/
#endif_/
#endif /* BUG*/
#endif; /* XXX */
#endif /* LOCK */
#endif /* init */
#endif /* POST */
#endif /* DELAY */
#endif #ifdef DIAGNOSTIC
debug_endif
#endif /* POST*/
#endif /* prefix */
#endif /* SMP */
#endif /* XXX? */
#endif /* NAME */
#endif /* RELEASE */
#endif /* PR_LOGGING*/
#endif /*GNUC */
#endif /* RESTORE */
#endif /*reassemble_init */
exit(1);
#endif /* FIXME*/
#endif /*LOCK */
return;
#if 0
#endif /*DEBUG*/
#endif /* WEBSHELL */
#endif /* ASSERT */
#endif /* DISPLAY */
return -1;
#endif /* FIXME */
# else
#endif /* REPLACE */
#endif /* gcc */
#endif /* /*/
#endif /* EXCEPTION */
#ifdef GLIB_CHECK_VERSION
#endif /* NSS */
#endif /*REPLACE */
#endiff
#endif /* LIST_REMOVE */
#endif /* ALLOCATED */
#endif /* MAX_VERSION */
#endif /* ALLOCATE */
#endif*
DEBUG
#endif--
#endif /* ALLOCATION */
for (;;)
# endif /* DEBUG*/
#endif /* alloc*/
#endif []
#else endif
#endif /* GLIB */
#endif /* EXCLUSIVE */
/*
#endif /* /* */
#endif /* FIXME:
else #endif
#endif /* XXX #endif
*/ #endif
#ENDIF
#endif #ifdef XP_MAC
/* XXX */ #endif
#endif /* FIXME! */
#endif /* XXX. */
return result;
Destroy();
#endif();
# endif /* XXXX */
@endif
# ENDIF
stop();
int i;
#endif /* XXX/

<endif
#endif /*
# endif
endif
printf("reassemble_initn");
printf("reassemble_init&n");
else
<else
#endif;
<#endif
#
#endif /*
&# endif
&else
endif
&#endif
&#endif
# endif
&endif
#endif
#endif
<# endif
printf("reassemble_init<n");
<#endif /*
&#endif /*
#endif;
<#endif
