golden:
sprintf( dst->data, " %llu", num );
inference:
snprintf(dst->data, sizeof(dst->data), "%llu", num);

snprintf( dst->data, "%llu", num );
sprintf( dst->data, "%lu", num );
sprintf( dst->data, "%u", num );
snprintf( dst->data, sizeof dst->data );
snprintf(dst->data, "%llu", num);
snprintf( dst->data, sizeof( dst->data) );
snprintf(dst->data, sizeof dst->data, "%llu", num);
sprintf( dst->data, "%s", num );
sprintf( dst->data, "%d", num );
sprintf( dst->data, "%llu", num);
sprintf( dst->data, "%llu", num );
sprintf(dst->data, "%llu", num);
sprintf( dst->data, "%llu", (u_long)num );
sprintf(dst->data, "%lu", num);
snprintf( dst->data, sizeof( dst->data) - 1 );
/* sprintf( dst->data, "%llu", num ); */
sprintf( dst->data, "%llu", (int)num );
sprintf(dst->data, "%u", num);
sprintf( dst->data, "%ld", num );
sprintf( dst->data, num );
sprintf( dst->data, "%lu", (u_long)num );
sprintf( dst->data, "%llu", num, num );
snprintf( dst->data, sizeof( dst->data));
printf( dst->data, "%llu", num );
sprintf( dst->data, "%p", num );
sprintf( dst->data, NULL, num );
snprintf(dst->data, sizeof(dst->data));
snprintf( dst->data, sizeof( dst->data);
fprintf( dst->data, "%llu", num );
(void) sprintf( dst->data, "%llu", num );
snprintf(dst->data, "%llu", num );
sprintf( dst->data, "%lu", num);
/* sprintf( dst->data, "%llu", num );*/
snprintf( dst->data, sizeof( dst->data) + 1 );
snprintf( dst->data, sizeof( dst->data, num ) );
sprintf( dst->data, NULL, "%llu", num );
sprintf( dst->data, "%u", num);
sprintf( dst->data, " %llu", num );
snprintf( "%llu", num );
sprintf(dst->data, "%u", num );
snprintf( dst->data, sizeof dst->data);
snprintf(dst->data, sizeof(dst->data), "%lu", num);
sprintf( dst->data, "%llu", (long)num );
sprintf( dst->data, "%lx", num );
snprintf( dst->data, sizeof( dst->data ) );
snprintf(dst->data,"%llu", num);
sprintf( dst->data, "%ju", num );
_snprintf( dst->data, "%llu", num );
snprintf(dst->data, sizeof(dst->data), "%u", num);
fb_snprintf( dst->data, "%llu", num );
snprintf( dst->data, "%llu", num);
snprintf( dst->data, "%lu", num );
snprintf(dst->data, sizeof dst->data);
sprintf( dst->data, "%lu", (int)num );
snprintf(dst->data, sizeof (dst->data), "%llu", num);
snprintf( dst->data, sizeof(dst->data) );
snprintf( dst->data, sizeof( dst->data), num );
sprintf( dst->data, "%lllu", num );
snprintf(strlen(dst->data), "%llu", num);
sprintf( dst->data, "%x", num );
snprintf( dst->data, sizeof(dst->data));
sprintf(dst->data, "%lu", num );
sprintf( dst->data, "%lu", (long)num );
sprintf( "%llu", num );
PRINTF( dst->data, "%llu", num );
snprintf("%llu", num);
snprintf( dst->data, "%u", num );
sprintf( dst->data, "%u", (u_long)num );
snprintf( sizeof( dst->data), "%llu", num );
sprintf ( dst->data, "%llu", num );
sprintf( dst->data, "%llu", (unsigned long)num );
sprintf(dst->data, "%s", num);
snprintf(dst->data, sizeof(dst->data), "%LLu", num);
PRINTF( "%llu", num );
printf( "%llu", num );
snprintf( dst, "%llu", num );
sprintf( dst->data + 1, "%llu", num );
snprintf(stdout, "%llu", num);
snprintf( dst->data, size, "%llu", num );
strlcpy( dst->data, "%llu", num );
sprintf( dst->data, sizeof( dst->data), "%llu", num );
snprintf( dst->data, sizeof( data ), "%llu", num );
sprintf( dst->data, "%jd", num );
sprintf( &dst->data, "%llu", num );
snprintf (dst->data, sizeof(dst->data), "%llu", num);
snprintf( dst->data, sizeof( dst->data + 1, 10 ) );
sprintf(dst->data, "%llu", (u_long)num);
sprintf( dst->data, "%08x", num );
sprintf( dst->data, _("%llu"), num );
snprintf( dst->data, sizeof( dst->data ));
snprintf(dst->data, sizeof(dst->data) - 1);
snprintf( data, "%llu", num );
sprintf(dst->data, "%d", num);
snprintf( dst->data, sizeof(data), "%llu", num );
snprintf( dst->data, sizeof( dst->data", num ) );
sprintf( dst->data, num, "%llu", num );
sprintf( dst->data, "%02x", num );
sprintf( dst->data, "%llu", (char *)num );
sprintf( dst, "%llu", num );
snprintf( dst->data, sizeof( dst->data) + 1, num );
snprintf( dst->data, sizeof(dst->data) - 1 );
snprintf( dst->data, num );
fb_hStrSetLength(dst, strlen(dst->data));
snprintf( dst->data, sizeof( dst->data ) - 1 );
sprintf( dst->data, "%04x", num );
snprintf(dst->data, sizeof( dst->data) );
sprintf( dst->data, "%llu", (intptr_t)num );
snprintf( dst->data, sizeof dst->data, num );
snprintf(&dst->data, "%llu", num);
snprintf(stderr, "%llu", num);
snprintf( data, sizeof( data ), "%llu", num );
snprintf( sizeof( dst->data ), "%llu", num );
sprintf(&dst->data, "%llu", num);
/* snprintf( dst->data, "%llu", num ); */
sprintf( dst->data, num, num );
snprintf( dst->data, sizeof( dst->data ) * 3 );
sprintf( dst->data, "%X", num );
snprintf( dst->data,"%llu", num );
sprintf( dst->data, "%U", num );
sprintf( dst->data, "%lld", num );
sprintf( dst->data, "%c", num );
Snprintf( dst->data, "%llu", num );
sprintf("%llu", num);
snprintf( dst->data, sizeof (dst->data) );
snprintf(dst->data, sizeof( dst->data));
snprintf( dst->data, sizeof( dst->data ), num );
sprintf(dst->data, "%llu", (int)num);
snprintf(dst->data, sizeof(dst->data),"%llu", num);
sprintf( dst->data, "%j", num );
snprintf( dst->data, sizeof( num ), "%llu", num );
snprintf( dst->data, num, "%llu", num );
sprintf(dst->data, num);
sprintf( dst->data.data, "%llu", num );
sprintf( dst->data, "%llu", NULL );
sprintf( dst->data, "%d", num);
fb_hStrSetLength( dst, strlen(dst->data) );
fprintf(dst->data, "%llu", num);
snprintf(stdout, "%llu", num );
sprintf( dst->data, "%s", num, num );
snprintf( dst->data, sizeof( dst->data) - num );
snprintf( dst->data, sizeof( dst->data) + num );
fprintf(dst->data, sizeof(dst->data), "%llu", num);
sprintf( dst->data, "%w", num );
sprintf( dst->data, "%llu", num, NULL );
snprintf(dst->data, sizeof(data), "%llu", num);
sprintf( dst->data, "%i", num );
fb_hStrSetLength( dst, num );
sprintf( dst->data, "%llu", (unsigned char *)num );
SMALLF( dst->data, "%llu", num );
sprintf(snprintf(dst->data, "%llu", num));
snprintf( dst->data, "%LLu", num );
sprintf (dst->data, "%llu", num );
sprintf(dst->data, "%llu", (u_long)num );
sprintf( dst->data, "%s", num);
sprintf( dst->data, "%llu", num, NULL);
sprintf( dst->data, "%llu", num + 1 );
sprintf( *dst->data, "%llu", num );
snprintf(dst, "%llu", num);
sprintf( dst->data, "%jlu", num );
sprintf( dst->data, "%llu", (void *)num );
snprintf( dst->data, sizeof( "%llu", num ) );
snprintf(stdout, sizeof(stdout), "%llu", num);
sprintf (dst->data, "%llu", num);
sprintf(dst->data, "%ld", num);
sprintf( dst->data, "%llu" );
sprintf( dst->data, "%lu", (unsigned long)num );
snprintf( dst->data, sizeof( dst->data ) + 1 );
sprintf( dst->data, "%llu", num, 0 );
snprintf(dst->data, sizeof dst->data );
sprintf( dst->data, "%llu", (long long)num );
strncpy( dst->data, "%llu", num );
snprintf(data, sizeof(data), "%llu", num);
sprintf(dst->data, "%lu", (u_long)num);
sprintf( dst->data, "%llu", NULL);
snprintf( dst->data, sizeof( dst->data + num ) );
fb_hStrSetLength(dst, strlen( dst->data ) );
sprintf( dst->data, "%LLu", num );
snprintf (dst->data, sizeof dst->data, "%llu", num);
snprintf(dst->data, sizeof( dst->data) - 1 );
snprintf(dst->data, sizeof(dst->data) );
ui64toa( dst->data + 1, 10 );
snprintf(dst->data, sizeof(dst->data), "%u", num );
sprintf( dst->data, dst->data + 1, 10 );
sprintf( dst->data, "%LLu", num);
sprintf( dst->data, NULL );
PRINTF("%llu", num);
sprintf( dst->data, "%lu", num, num );
sprintf( dst->data, "%llu", NULL, num );
fb_hStrSetLength( dst, strlen( dst->data ));
return dst;
sprintf( dst->data, NULL);
printf("%llu", num);
sprintf( dst->data, "%d", num, num );
snprintf( dst->data, sizeof( dst->data), "%llu", num );
snprintf( dst->data, sizeof( dst->data ), "%llu", num );
snprintf( dst->data, sizeof( dst->data) + 1, "%llu", num );
/* XXX */ sprintf( dst->data, "%llu", num );
sprintf( dst->data, "%llu", num, dst->data[0] );
snprintf(dst->data, sizeof( dst->data), "%llu", num );
/* snprintf( dst->data, sizeof( dst->data), "%llu", num ); */
sprintf( dst->data, "%llu", num, (int)num );
/* * We can't try to use /var/fb-dty-data: do not use the /var/fb-data-dty-value function. */ sprintf( dst->data, "%llu", num );
/* XXX - snprintf( dst->data, "%llu", num );*/
/* XXX - i64toa */ fb_hStrSetLength( dst, strlen( dst->data ) );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 )  /* convert */ sprintf( dst->data[0], "''", num );  else sprintf( dst->data[0], "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1, "%llu", num );
/* XXX */ snprintf(dst->data, sizeof(dst->data), "%llu", num);
/* snprintf( dst->data, sizeof( dst->data ), "%llu", num ); */ /*snprintf( dst->data, "%llu", num ); */
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' )  /* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 );  else snprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) </* convert */ sprintf( dst->data[0], "''", num ); else sprintf( dst->data[0], "%llu", num );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) /* convert */ sprintf( dst->data[0], "''", num ); &else sprintf( dst->data[0], "%llu", num );
<sprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) /* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); else snprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) </* convert */ sprintf( dst->data[0], "''", num ); &else sprintf( dst->data[0], "%llu", num );
sprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) &/* convert */ sprintf( dst->data[0], "''", num ); else sprintf( dst->data[0], "%llu", num );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) &/* convert */ sprintf( dst->data[0], "''", num ); <else sprintf( dst->data[0], "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) &/* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); <else snprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) /* convert */ sprintf( dst->data[0], "''", num ); <else sprintf( dst->data[0], "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) &/* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); else snprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) </* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); &else snprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) /* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); <else snprintf( dst->data, "%llu", num );
sprintf( dst->data, "%llu", num);
<sprintf( dst->data, "%llu", num);
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) /* convert */ sprintf( dst->data[0], "''", num ); else sprintf( dst->data[0], "%llu", num );
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) </* convert */ sprintf( dst->data[0], "''", num ); <else sprintf( dst->data[0], "%llu", num );
&sprintf( dst->data, "%llu", num);
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) &/* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); &else snprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) /* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); &else snprintf( dst->data, "%llu", num );
<sprintf(dst->data, "%llu", num);
snprintf( dst->data, sizeof( dst->data) ); if ( num >= 0 ) &/* convert */ sprintf( dst->data[0], "''", num ); &else sprintf( dst->data[0], "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) </* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); <else snprintf( dst->data, "%llu", num );
&sprintf( dst->data, "%llu", num );
snprintf( dst->data, sizeof( dst->data) - 1 ); if (dst->data[1] =='' ) </* convert */ snprintf( dst->data[1], sizeof( dst->data[2] ) * 3 ); else snprintf( dst->data, "%llu", num );
&sprintf(dst->data, "%llu", num);
sprintf(dst->data, "%llu", num);
