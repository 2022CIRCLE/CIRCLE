golden:
if (index == -1) { /* not found in regular list */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); } else { regentry->refcount++; (*stream)->rsrc_id = index; }
inference:

(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, NULL);
(*stream)->rsrc_id = NULL;
le->refcount++;
le->refcount++; (*stream)->rsrc_id = NULL;
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char *)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char *) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (u_long)*stream, le_pstream);
((*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream));
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char*) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(null, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char*)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (int) *stream, le_pstream);
le->refcount++; rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (int)*stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void *)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, 0);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (u_long) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, 0);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (long)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void *) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, strlen(*stream), le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(nsnull, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_stream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned long)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(nu, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, NULL, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE (NULL, *stream, le_pstream);
*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, le->refcount++);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (long) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (caddr_t) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned long) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, NULL, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (caddr_t)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, &le->ptr, le_pstream);
rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, &len, le_pstream);
le->flags++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_stream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned char *)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (ptr_t) *stream, le_pstream);
( *stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, NULL, le_pstream);
(*stream)->refcount++;
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, &le->refcount);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(nu, *stream, le_pstream);
le->refcount++;(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, &le->ptr);
rsrc = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
*stream = NULL; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, rsrc_id, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE (NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (u_long)len);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, 0);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void*)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned char *) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (int)len);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le);
rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, rsrc_id);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, __func__, le_pstream);
le->refcount++; le->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (*stream) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, rsrc_id);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, buffer, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (*stream)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, &le->refcount);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, NULL, le_pstream);
p->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void*) *stream, le_pstream);
id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char **) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char **)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, buf, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le->refcount++);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (PRUint32)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (ptr_t)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void **)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le->ptr);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void **) *stream, le_pstream);
return ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, &le->ptr);
(*stream)->src_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, &le, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_REOURCE(NULL, *stream, le_pstream);
le_refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, **stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, NULL, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, ptr);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned char*)*stream, le_pstream);
rsrc->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned int) *stream, le_pstream);
(*stream)->rsrc_id=ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->ptr++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->ptr = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, pstream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, 0);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (int)le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, &len);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, &le->refcount++);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, path, le_pstream);
le->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, le->ptr);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_pstream);
result = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = PZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned int)*stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_SOURCE(NULL, *stream, le_pstream);
le->refcount++; ( *stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned char*) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le->ptr, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE( NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char *) le_pstream);
(*stream)->rsrc_id = ZEND_GET_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char *)stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_REOURCE(NULL, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, lepstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_stream, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(null, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (u_long)le_pstream);
(*stream)->rsrc_id = le_pstream;
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_stream, NULL);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (unsigned char) *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, 1);
if (*stream) (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
cnt++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, cnt);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (unsigned long)len);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le->ptr);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (long)len);
(*pstream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *pstream, le_pstream);
*stream = NULL;
stream->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, stream);
l->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, l);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le->pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (intptr_t)len);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, &le->refcount++, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE();
(*stream)->id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
rs = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id=ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, &len);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, &le->refcount);
rs_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, rsrc_id);
le->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (caddr_t)le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, 0, NULL);
(*stream)->rsrc_id = 0;
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, &len);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (unsigned char *)len);
(*stream)->rsrc_id = rsrc_id;
error = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, PL_strlen(le));
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (caddr_t)len);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, &le->refcount++);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, ptr);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE( NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, ptr);
*stream = (php_stream*)le->ptr;
le->id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_REQUEST(NULL, *stream, le_pstream);
ret = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
r = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
splx(s);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_stream);
(*stream)->rsrc_id = FALSE;
le->refcount++; *stream = NULL;
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, *stream);
s = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_stream, res);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void *)*stream, le_pstream);
if (!z_refcount)  /* We've been deprecated because the stream does not have a resource. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, &le->refcount);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, aStream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, l);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, 0);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, &le->ptr);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (intptr_t) *stream, le_pstream);
if (strlen(len))  if (len)  if (*stream)  /* XXX */ if (len)  /* * XXX */ if ((strlen(len))  0)  /* * XXX */  else  /* XXX */  (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);   else  /* * XXX */
/* XXX if we can't specify a re-loading stream, this will be the next queue */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++) (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, NULL);
cnt++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, &le->rsrc_id);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (u_int32_t) *stream, le_pstream);
if ((*stream)->rsrc_id == ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))  /* * We may not get a null result in the following way. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char *)le->ptr, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, hwnd_hwnd_hwnd);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, &rsrc_id);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (char*)len);
ucs_refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, cd->cd_name);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, cfg_netio);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, hp);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (long) le_pstream);
ret->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, (struct sockaddr *)(struct sockaddr *)(struct sockaddr *)(struct sockaddr *)&rsrc_id);
if (! le->refcount)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_stream, rsrc_id);
/* * We must allocate a bit of value, so we don't * get the buffer and write it back. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_pstream);
u.d = u.d; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, u.d);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, &hash_rsrc);
src_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!(*stream)->rsrc_id)  return 0;
f->refcount++; rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, f->rsrc_id);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, (u_long) le->ptr);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, PL__get_file_name(le));
if (!tmp_refcount)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream, (unsigned char*) le->refcount++);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char *)*stream, le_pstream);
if (syntax)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);  else  if ((flags & ZER_F_P) = 0)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount == 0) return (R_OK);  /* we need to make this right if necessary */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_pstream);
/* * FIXME: */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (void *) le_pstream);
if (le->refcount++ == 0)  if (Z_TYPE_P(le) == le_pstream)  *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);   else  /* XXX */
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, ptr_t);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_flags);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char*)stream, le_pstream);
if (*stream)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (l->refcount++)  /*refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_id);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, ptr_refcount);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);  else  /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0)  /* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))))  if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))  if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))  rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);  else  rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, PL_strlen(len));
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, a_refcount);
le->refcount++; if (!rsrc_id)   *stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream)  return
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, ctrl);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, lpstream);
u.d = (u.d = u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d->u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/u.d/
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (char*)le, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, &le->refcount);
if (!l_refcount)  rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);  else  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (void *)len);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, p);
l->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (u_int64_t *)(len), le_pstream);
if (len == -1) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
ret_ptr_lock(&rsrc_lock); (*stream)->rsrc_id = ret_ptr_reg(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, &le->rsrc_id, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (void **) *stream, le_pstream);
le->refcount++; /* FIXME: -rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (void *)len);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, spld_stream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (unsigned long)le_pstream);
if (le->refcount++  (*stream)->rsrc_id)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);  if (*stream)  *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (unsigned long) le_pstream);
if (len > le->refcount)  if (*stream)  le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (u_long) le_pstream);
n = le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
nrefcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_flags);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, l->rsrc_id, le_pstream);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (u_long)le->ptr);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, (intptr_t) le->ptr);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, (intptr_t)le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, aLen, aLen);
if (refcount  0)  refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!msg_errno)  msg_errno = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!msg_errno) return EFINVAL;
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, hs.tv_sec);
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, (struct len *)*stream, le_pstream);
/* XXX*/ ptr_list_t s = NULL; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, ptr_list_t);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
le->refcount++; if (!rsrc_id) &&*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) return
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) <if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount &0) <refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
le->refcount++; if (!rsrc_id) <*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) &return
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (strlen(len)) <if (len) if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) &if (len) &if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) if (len) &if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; if (!rsrc_id) <&*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) &return
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) &if (len) &if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!tmp_refcount) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (! le->refcount) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++;
if (!msg_errno) <msg_errno = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!msg_errno) return EFINVAL;
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) <if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) <if (len) &if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) &if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) if (len) if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if ((*stream)->rsrc_id == ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)) /* * We may not get a null result in the following way. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!(*stream)->rsrc_id) <return 0;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if ((*stream)->rsrc_id == ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)) </* * We may not get a null result in the following way. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) &if (len) <if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (refcount 0) <refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) <if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) if (len) if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
if (len > le->refcount) &if (*stream) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) <if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) &if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) if (len) &if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) &if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (strlen(len)) <if (len) <if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) <if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
le->refcount++; if (!rsrc_id) <<*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) <return
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (len > le->refcount) if (*stream) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) &if (len) if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (refcount <0) &refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) &if (len) if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (refcount == 0) return (R_OK); /* we need to make this right if necessary */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_pstream);
if (strlen(len)) &if (len) &if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) if (len) &if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) if (len) if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount == 0) return (R_OK); &/* we need to make this right if necessary */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
if (strlen(len)) &if (len) <if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) &if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
le->refcount++; if (!rsrc_id) &<*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) return
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
if (strlen(len)) if (len) if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (!(*stream)->rsrc_id) return 0;
le->refcount++; if (!rsrc_id) &*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) return
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (*stream) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (l->refcount++) </*refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = NULL;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount <0) refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; if (!rsrc_id) &&*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) <return
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) if (len) &if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) &if (len) if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
if (strlen(len)) &if (len) if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) if (len) <if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) <if (len) <if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
&(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (!msg_errno) msg_errno = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!msg_errno) return EFINVAL;
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) &if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount &0) refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) &if (len) <if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) <if (len) &if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (len > le->refcount) &if (*stream) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) if (len) <if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; if (!rsrc_id) &&*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) &return
if (strlen(len)) if (len) <if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; if (!rsrc_id) <&*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) return
if (strlen(len)) <if (len) if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (len > le->refcount) &if (*stream) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
le->refcount++; if (!rsrc_id) &*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) &return
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (l->refcount++) &/*refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (! le->refcount) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (len > le->refcount) <if (*stream) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
if (strlen(len)) if (len) &if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
if (!tmp_refcount) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (len > le->refcount) <if (*stream) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) &if (len) <if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; if (!rsrc_id) &<*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) &return
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (*stream) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (len > le->refcount) if (*stream) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; if (!rsrc_id) <<*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) return
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) &if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount &0) &refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) <if (len) <if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) <if (len) if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
le->refcount++; if (!rsrc_id) <*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) <return
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) &if (len) &if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (strlen(len)) <if (len) <if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
if (strlen(len)) &if (len) <if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!(*stream)->rsrc_id) &return 0;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
if ((*stream)->rsrc_id == ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)) &/* * We may not get a null result in the following way. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (!z_refcount) </* We've been deprecated because the stream does not have a resource. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) &if (len) <if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (len > le->refcount) <if (*stream) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (strlen(len)) <if (len) <if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) <if (len) <if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
if (strlen(len)) &if (len) if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (!z_refcount) &/* We've been deprecated because the stream does not have a resource. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) <if (*stream) /* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) <if (len) &if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
if (strlen(len)) if (len) &if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!msg_errno) &msg_errno = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!msg_errno) return EFINVAL;
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
le->refcount++; if (!rsrc_id) &*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) <return
le->refcount++; if (!rsrc_id) <<*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) &return
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (strlen(len)) if (len) <if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
le->refcount++; if (!rsrc_id) *stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) &return
if (strlen(len)) <if (len) <if (*stream) &/* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
if (strlen(len)) &if (len) &if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) &if (len) <if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) if (*stream) </* XXX */ if (len) /* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) <if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
<(*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
le->refcount++; if (!rsrc_id) <*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) return
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (le->refcount++ (*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (strlen(len)) <if (len) <if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
le->refcount++; if (!rsrc_id) &<*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) <return
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (strlen(len)) if (len) <if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* XXX */
le->refcount++; if (!rsrc_id) *stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) return
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount 0) &refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else <if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (!l_refcount) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount == 0) return (R_OK); </* we need to make this right if necessary */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream, le_pstream);
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ (*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (refcount 0) refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) &if (*stream) </* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) if (len) &if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
if (strlen(len)) <if (len) &if (*stream) /* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
le->refcount++; if (!rsrc_id) *stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) <return
if (l->refcount++) /*refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &if ((flags & ZER_F_P) = 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (! le->refcount) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ <(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) <if (len) &if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (!l_refcount) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* XXX */
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &<else /* XXX */
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (syntax) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else <if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
if (!l_refcount) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (*stream) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) if (len) if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
le->refcount++; if (!rsrc_id) <&*stream = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (!*stream) <return
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) <if (len) &if (*stream) &/* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (!z_refcount) /* We've been deprecated because the stream does not have a resource. */ le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) <if (Z_TYPE_P(le) == le_pstream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <<else /* XXX */
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ &(*stream)->rsrc_id) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (syntax) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else if ((flags & ZER_F_P) &= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (strlen(len)) &if (len) &if (*stream) /* XXX */ if (len) </* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (!tmp_refcount) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) /* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else &/* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) &*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (strlen(len)) <if (len) if (*stream) </* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) &rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
/* * Note that we're not actually a rsrc stream. The result will be removed from the cache of rsrc_stream_len by the entry_length, and we've got this from a cache that is not guaranteed * by * the entry-length of the rsrc_id. */ if (!(rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream)))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <if ((rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream))) <rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *
if (le->refcount++ <(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (len > le->refcount) if (*stream) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ &(*stream)->rsrc_id) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); if (*stream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else </* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) </* This function */ ptrlen(ptrlen)--;
if (strlen(len)) &if (len) &if (*stream) &/* XXX */ if (len) &/* * XXX */ if ((strlen(len)) 0) /* * XXX */ else /* XXX */ (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else /* * XXX */
if (refcount <0) <refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
if (le->refcount++ == 0) if (Z_TYPE_P(le) == le_pstream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <&else /* XXX */
if (le->refcount++ &(*stream)->rsrc_id) &le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &if (*stream) <*stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
/* Get the first integer in the err. */ if (ptrlen(ptrlen) >= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); <else /* Get the last integer in the list */ if (ptrlen(ptrlen) >= 0) &/* This function */ ptrlen(ptrlen)--;
if (le->refcount++ == 0) &if (Z_TYPE_P(le) == le_pstream) *stream = (php_stream*)le->ptr; le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); &&else /* XXX */
if (syntax) <le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream); else &if ((flags & ZER_F_P) <= 0) le->refcount++; (*stream)->rsrc_id = ZEND_REGISTER_RESOURCE(NULL, *stream, le_pstream);
