golden:
<extra_id_0>
inference:

#endif /* XXX */
#endif /*
# endif /* XXX */
#endif
return 0;
#endif /* DEBUG */
return (0);
#endif /* * XXX */
# endif /*
#endif /* NOTREACHED */
break;
#endif /*/
#endif */
#endif /* XXX*/
*/
endif
endif /* XXX */
# endif
#endif (void)
endif  0
/* endif */
endif;
#endif /* */
continue;
#else
#endif /* XXX XXX */
/* Endif */
#endif;
/* XXX */
#endif/*/
#endif /* *
#ifdef DEBUG
Endif
#endif /* ENDIF */
# endif */
#endif /* endif */
#endif:
stop();
#endif /* NULL */
#endif/*
@endif /* XXX */
#endif /* DEBUG*/
#ifdef DIAGNOSTIC
#endif /* FALSE */
#endif /* XXX endif */
debug_endif
else
#endif /* TODO */
#endif /* None */
return -1;
pass
splx(s);
# endif /* * XXX */
#ifdef XP_MAC
return 1;
#endif /*XXX */
#endif /* XXXX */
#endif /* XXX why? */
#endif /* MODULE */
#else endif
#endif /* this function */
# endif /* DEBUG */
# endif /* NOTREACHED */
#endif/* XXX */
#endif /* Not implemented */
endif:
#endif /* PR_LOGGING */
#endif /* SIGNAL */
free(fragment_data);
#endif /* Endif */
*endif
DEBUG
#endif /* FAILURE */
#endif /* 0 */
#endif /* XXX - */
#endif /* XXX
# endif;
#endif /* #endif */
#endif; /* XXX */
#endif /* XXX: */
#endif /* XXX */ #endif
for (;;)
#endif /* XXX **/
int i;
#endif /* FIXME:
#endif #ifdef DEBUG
# endif /* XXX*/
#endif #ifdef DIAGNOSTIC
#endif /* DBG */
endif /*
#endif /* PACKED */
#endif /* EXCEPTIONS */
#endif /* WARNING */
#endif /* not implemented */
#endif /* EXCEPTION */
#endif /* ALLOCATED */
return NULL;
#endif /* FALLTHROUGH */
#endif /* BUG */
#endifif /* XXX */
else  #endif
#endif /* #endif
::endif
# endif:
#endif--
#endif /* FILE */
#endif /* debug */
# endif /* XXX XXX */
#endif /* READ */
#endif /* Not implemented yet */
#endif /* DELETE */
#endif /* /* XXX */
/*
#endif /* STATUS */
#endif /* Reassembled */
#endif /* NOTREACHED*/
return;
#endif /* PR_LOGGING*/
# ENDIF
#endif #ifdef XP_MAC
endif (void)
#endif /* POSTOPATTR */
#endif /* XXX? */
#endifs
return FALSE;
#endif /* this function adds fragment_data structure */
#endif /* XXX ENDIF */
#endif*
#endif /* XXX/
#endif /* FIFO */
#endif /* XXX XX */
#endif*/
endif */
#endif /* XXX fixup */
#endif /* XXX:
break
Stop();
do
# endif/*
#endif /* NS_DEBUG */
#if 0
#
#endiff
else endif
#endif /* XXXn*/
#endif /* FIXME: */
debug_info("fragment_reassembled");
#endif /* XXX INCLUDE */
if (fd_head == NULL) return;
exit(1);
#endif /* XXX-- */
out:
#endif /* XXX Endif */
**/
finally
printf("fragment_reassembled: ");
#endif /* XXX this function */
exit(1)
return
# endif /* XXX - */
# else
;
#endif /* XXX ENDIF
#endif /* XXX __unused */
#endif /* XXX */ /*
[]
postgres
#endif /* This function adds fragment_data structure */
#endif if (fd_head!= NULL)
#endif /* XXX - this function */
#endif /* FIXME: FIXME:

#endif /*
endif;
<else &#endif
else <#endif
&else
&#endif /* XXX */
&*/
&#endif
&#endif
#endif /* XXX&n*/
&else <#endif
*/
&else #endif
#endif /* XXX */
endif &0
else
endif 0
<#endif
#endif /* XXX */
#endif /*
&else
endif <0
#endif /* XXX<n*/
<# endif
&#endif /*
<else <#endif
#endif;
else #endif
<else <#endif
&endif
<endif
endif
#endif;
break;
#endif /* XXXn*/
&else #endif
else &#endif
# endif
#endif
#endif
else &#endif
&else <#endif
<#endif /*
else <#endif
<*/
else
# endif
<else
<else
<else #endif
endif
&# endif
<else &#endif
<#endif /* XXX */
&else &#endif
else #endif
&else &#endif
<#endif
<else #endif
