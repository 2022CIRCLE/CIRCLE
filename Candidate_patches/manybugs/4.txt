golden:
<extra_id_0>
inference:
b2p = tp + n;
b2p = bp + 2*n;

b2p = tp + 2 * n;
b2p = tp + 2*n;
b2p = tp + tn;
b2p = tp + 3*n;
b2p = tp + bn;
b2p = tp;
b2p = tp + 1*n;
b2p = tp + cnt;
b2p = tp + 2*n + 1;
b2p = tp + 4*n;
b2p += 2*n;
b2p = tp + 1 * n;
b2p = p + 2*n;
b2p = tp + (int)n;
b2p = (u_long)tp + 2*n;
b2p = (long)tp + 2*n;
b2p = tn + 2*n;
b2p = (long) tp + 2*n;
b2p = (int)tp + 2*n;
b2p = tp + N;
b2p = (int) tp + 2*n;
b2p = b2p + 2*n;
b2p = tp + 3 * n;
b2p += tp + 2*n;
b2p = rp + 2*n;
b2p = tp + 2*n - 1;
int b2p = tp + 2*n;
b2p = tp + (long)n;
b2p = tp + 2, n;
b2p = tp + len;
b2p = tp + n - 1;
b2p = tp + n + 1;
b2p = *tp + 2*n;
b2p = tp+2*n;
b2p = tp + *n;
b2p = tp + i;
b2p = tp + 4 * n;
b2p = n + 2*n;
b2p = tp + p;
b3p = tp + 2*n;
b2p = tp + tn + 2*n;
b2p = ip + 2*n;
b2p = tp + 2*(int)n;
b2p = tp + ln;
b2p = tp + 2*n+1;
b2p = tp + (int)2*n;
b2p = lp + 2*n;
b2p = tp + 2*tn;
b2p = tp + n + 2*n;
b2p = bp + 2 * n;
p2p = tp + 2*n;
b2p = tp[2] + 2*n;
b2p = tp+n;
b2p = tp + tn + 1;
b2p = tp + 2 * N;
b2p = tp + 2*m;
b2p = &tp + 2*n;
b2p = tp + tn - 1;
b2p = bn + 2*n;
b2p = tp + b2p;
b2p = tp + 2*bn;
(void) b2p = tp + 2*n;
b2p = tp + 1;
b2p = (tp + 2)*n;
const b2p = tp + 2*n;
b2p = tp + n+1;
b2p = tmp + 2*n;
b2p = tp + 2*n-1;
b2p = vp + 2*n;
b2p = tp + 1 + n;
b2p = tp++;
b2p = tp + dn;
b2p = tp+1;
b2p = tp + 2 *n;
b2p = cnt + 2*n;
b2p = (tp + 2) * n;
b2p = ap + 2*n;
b2p = tp + 2 * (int)n;
b2p = (b2) + 2*n;
b2p = tp + m;
b2p = tp + p + 2*n;
b2p = (ulong) tp + 2*n;
b2p = tp[n] + 2*n;
b2p = (int)(tp + 2*n);
b1p = tp + 2*n;
B2P = tp + 2*n;
b2p = ip[2] + 2*n;
b2p = tp + 5*n;
b2p = tp + tp + 2*n;
b2p = tp + bn + 2*n;
b2p = buf + 2*n;
b2p = cp + 2*n;
b2p = tp + 1, n;
b2p = int(tp + 2*n);
b2p = tp + 2*n + 2;
b2p = tp + tn+1;
b2p = (tp + 2) + 2*n;
b2p = tp[2*n];
b2p = tp + 6*n;
b2p = pp + 2*n;
b2p = tp + size_t n;
b2p = tp - 2*n;
b2p = tp + size * n;
b2p = ep + 2*n;
b2p++ = tp + 2*n;
b2p = (void *) tp + 2*n;
b2p = tp + size;
b2p = tp + bn+1;
b2p = tp + tp;
b2p = tp + n - 2*n;
b2p = bp + n;
b2p = n;
b2p = tp + 2*(long)n;
b2p = tp + 8*n;
b2p = size(tp) + 2*n;
b2p = tp + size*n;
b2p = (void *)tp + 2*n;
b2p = tp + bn - 1;
b2p = tp + 2*n + n;
tp = tp + 2*n;
b2p = tp + (u_long)n;
b2p = p2p + 2*n;
b2p = tp + 5 * n;
b2p = tp[1] + 2*n;
b2p = sp + 2*n;
b2p = (ulong)tp + 2*n;
b2p = (long)(tp + 2*n);
b2p = tp + 1 + 2*n;
b2p++;
b2p = m + 2*n;
b2p = tp + intn;
b2p = tp + &n;
b2p = tp + n-1;
b2p = tp + 2, *n;
b2p += n;
b2p = tp + p + n;
m2p = tp + 2*n;
b2p = tp + tp + n;
p = tp + 2*n;
b2p = tp + bp + 2*n;
b2p = tp + d;
b2p = tp + bp;
b2p = tp + 2*cnt;
b2p = n + tp + 2*n;
b2p = tp + tn + n;
b2p = tp + 2*p;
b2p = bp+2*n;
b2p = tp + 2 + n;
b2p = tp + (n+1)*n;
b2p = tp + ap;
b2p = i + 2*n;
b2p = tp + bn + 1;
b2p = tp + (int) 2*n;
*b2p = tp + 2*n;
b2p = tp + (size_t)n;
b2p = tp + 2*n + 2*n;
b2p = tp + rp + 2*n;
b2p = tp + (int) n;
b2p = tp + (ulong)n;
b2p = tp + bp + n;
b2p = tp + strlen(n);
b2p = tp + 2*n + size;
b2p = tp + 2*n - 2;
b2p = tp + p2p;
b2p = tp + (u_int)n;
b2p = tp + 2*n * 2;
b2p = tp + (unsigned long)n;
b2p = 2*n;
b2p = tp + bn + n;
b2p = tp + sizeof tp;
b2p = tp + strlen (n);
tp += 2*n;
b2p = tp + n + 2 * n;
b2p = tp + ap + 2*n;
b2p = tp + mip;
b2p = tp + 2*n; #endif
b2p = tp + 2*n--;
b2p = bp;
b2p = tp + 2*n + tp;
b2p = tp + b2p + n;
b2p = tp + tn * n;
b2p = tp + tn + 3*n;
b2p = tp + 2*n = 0;
b2p = tp + cnt * n;
b2p = tp + 2*n + i;
b2p = tp + n / 2*n;
b2p = tp + 2*n * n;
b2p = tp + n + n;
b2p = tp + 2*n + len;
b2p = tp + tn - n;
b2p = tp + rp + n;
b2p = tp + tn + tn;
b2p = tp + 2*n / 2;
b2p = tp + snprintf(tp + snprintf(n) + 2*n);
b2p = tp + tp - 2*n;
b2p = tp + 2*n; /* * XXX - try again. */
b2p = tp + 2*n; /* this'','';
b2p = tp + 2*n; /* XXX - keep it in for now */
b2p = tp + bn + bn - n;
b2p = tp + 2*n; bp = bp + n;
b2p = tp + (tp - n) * n;
b2p = tp + (b2p / sizeof(mp_limb_t) - 1) / sizeof(mp_limb_t) / sizeof(mp_limb_t) - 1);
b2p = tp + (tp - bn) * n;
b2p = tp + pn;
b2p = tp + 2*n + (tp - ip[0]) / 2 - ip[1] /* ip[2] /* ip[3] /* ip[4] /* ip[5] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[8] /* ip[8] /* ip[7] /* ip[8] /* ip[7] /* ip[8] /* ip[9]
b2p = tp + b2p * n;
b2p = tp + 2*n / 2 * np;
b2p = tp + 2*n + n + n;
b2p = tp + b2ln;
b2p = tp + 2*n + cnt;
b2p = tp + tp + tn;
b2p = tp + p2p_n;
b2p = tp + 2*n + bn;
b2p = tp + (mp_limb_t) n;
b2p = tp + (int)(n+1)*n;
b2p = tp + 2*n; mp_limb_t limb_t bp; mp_limb_t bp[bn];
b2p = tp + 2*n; /* * There are 2 limbs in ip[2] to make ptr '0'. */
b2p = tp + 2*n + h;
b2p = tp + ((struct sockaddr *)n);
b2p = tp + bplen;
b2p = tp + 2*n + ((mp_srcptr_t)&tp[2]);
b2p = tp + bp[n] + 2*n;
b2p = tp + ((mp_ptr_t)n+1) * n;
b2p = tp + 2 * (unsigned char) n;
b2p = tp + (mp_limb_t *) 2*n;
b2p = tp + ((mp_limb_t)tp + n)*n;
b2p = tp + ((b2)*n);
b2p = tp + bn + bn + 1;
b2p = tp + 2*n + bp - 2*n;
b2p = tp + tn - 2*n;
b2p = tp + (tp + n) * sizeof (tp);
b2p = tp + (n - tp) / 2 * n;
b2p = tp + n;
b2p = tp + 2*n; /* this '','';
b2p = tp + 2*n + (tp - ip[0]) / 2 - ip[1] /* ip[2] /* ip[3] /* ip[4] /* ip[5] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[8] /* ip[8] /* ip[7] /* ip[8] /* ip[7] /* ip[8] /* ip[9]
b2p = tp + 2*n; /* * There are 2 limbs in ip[2] to make ptr '&0'. */
b2p = tp + 2*n;
b2p = tp + 2*n; /* this &'','';
b2p = tp + 2*n + (tp - ip[0]) / <2 - ip[1] /* ip[2] /* ip[3] /* ip[4] /* ip[5] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[8] /* ip[8] /* ip[7] /* ip[8] /* ip[7] /* ip[8] /* ip[9]
b2p = tp + 2*n; /* * There are 2 limbs in ip[2] to make ptr '0'. */
&b2p = tp + 2*n;
<b2p = tp + 2*n;
b2p = tp + 2*n; /* this <'','';
b2p = tp + 2*n; /* * There are 2 limbs in ip[2] to make ptr '<0'. */
b2p = tp + 2*n + (tp - ip[0]) / &2 - ip[1] /* ip[2] /* ip[3] /* ip[4] /* ip[5] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[6] /* ip[6] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[7] /* ip[8] /* ip[8] /* ip[7] /* ip[8] /* ip[7] /* ip[8] /* ip[9]
