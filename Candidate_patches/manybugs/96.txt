golden:
TRACE("checking if the parent (%s) evaluates to 'true'", BUF_STR(dc->parent->key));
inference:
log_error_write(srv, "sb", "go parent", dc->parent->key);

log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent");
log_error_write(srv, "sb", dc->parent->key);
log_error_write(srv, "%s", __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, "sb", "go parent");
log_error_write(srv, "go parent", dc->parent->key);
log_error_write (srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", __func__);
log_error_write(srv, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, NULL, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go");
log_error_write(srv, __FILE__, __LINE__, "sb");
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", &dc->parent->key);
log_error_write(srv, dc->parent->key, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go parent", dc->parent->key, NULL);
log_error_write(srv, 0, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go prev", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->parent->key);
log_error_write(srv, __FILE__, LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", dc->parent->key);
log_error_write(srv, "Go parent", dc->parent->key);
log_error_write(srv, "sb");
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->prev->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go ");
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->conf.key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", NULL);
log_error_write(srv, __FILE__, __LINE__, "sb", "go ", dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go parent", key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go param", dc->parent->key);
log_error_write(srv, srv, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go proc", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", 0, dc->parent->key);
log_error_write(srv, __LEVEL__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", 0, "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", dc->parent->key, NULL);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->conf.parent->key);
config_check_cond_cached(srv, con, dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go first parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->context->key);
log_error_write(srv, "");
log_error_write(srv, "%s", dc->parent->key);
log_error_write(srv, __FILE__, 0, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go parent");
log_error_write(srv, "sb", "go parent", dc->parent->key, NULL);
log_error_write(srv, 0, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, dc->parent, "sb", "go parent", dc->parent->key);
log_error_write(srv, NULL, NULL, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "__LINE__", "sb", "go parent", dc->parent->key);
log_error_write(srv, NULL, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", srv->parent->key);
log_error_write(srv, dc->parent->key, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", key);
log_error_write(srv, &__FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, "sb", "go", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", NULL);
error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", srv);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", parent);
log_error_write(srv, "sb", "go parent", key);
log_error_write(srv, __FILE__, &__LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "go parent", dc->parent->key, NULL);
log_error_write(srv, __FILE__, __LINE__, "sb", "go to parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->name);
log_error_write(srv, con, dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->context->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", l);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go in parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go dev", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__);
log_error_write(srv, con, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, LOG_LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go child", dc->parent->key);
log_error_write(srv, __PATH__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->flags);
log_error_write(srv, __FILE__, __LINE__, "db", "go parent", dc->parent->key);
log_error_write(srv, dc->parent->key, "sb", "go parent");
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent.key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->path);
log_error_write(srv, __FILE__, __LINE__, ("sb", "go parent", dc->parent->key));
log_error_write(srv, __LINE__, "sb", "go parent", dc->parent->key, NULL);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", sc->parent->key);
log_error_write(srv, l, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, 0, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", p->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->child->key);
log_error_write(srv, "%s", "go parent", dc->parent->key);
log_error_write(srv, dc->parent->context_ndx, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILES__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, "%s", __FILE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "%s", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go parent", dc->parent->key, 0);
log_error_write(srv, __FILE__, __LINE__, "sb", __func__);
log_error_write(srv, __FILE__, "sb", "go parent", __func__);
log_error_write(srv, __FILE__, __LINE__, "b", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go");
log_error_write(srv, __FILE__, "sb", __LINE__, "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go-parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "Sb", "go parent", dc->parent->key);
log_error_write(srv, 0, __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, con, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, dc->parent->key, __FILE__, __LINE__);
register_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, "go", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go cond", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "/sb", "go parent", dc->parent->key);
log_error_write(srv, "Sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb", NULL, "go parent", dc->parent->key);
log_error_write(srv, __FILE__, dc->parent->key, "sb", "go parent", dc->parent->key);
log_error_write(con->conf, __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __LE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write("sb", "go parent", dc->parent->key);
log_error_write(srv, __FULL__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go parent", &dc->parent->key);
log_error_write(srv, "sb", __LINE__, "go parent", dc->parent->key);
log_error_write(srv, "sb", "go");
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", c->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sa", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", NULL, NULL);
log_error_write(srv, __FILE__, FILE_LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, "go parent");
log_error_write(srv, __LEVEL__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", p);
log_error_write(srv, __FILE__, __LINE__, "sb", "go with parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "s", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go 1", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", str);
log_error_write(srv, __FILE__, M_LINE__, "sb", "go parent", dc->parent->key);
Log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, "sb");
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", key->key);
log_error_write(srv, __FILE__ + __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, "%s", __LINE__, "sb", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dev->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->conf.key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->key);
log_error_write(srv, __FILE__, "sb", "go prev", dc->parent->key);
log_error_write(srv, "__FILE__", __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", NULL);
log_error_write(srv, __FILE__, __LINE__, "sb ", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go principal", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go_parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "go parent", key);
log_error_write(srv, __FILE__, __LINE__, "");
log_error_write(srv, dc->parent->key, __FILE__);
log_error_write(srv, __FILE__,'sb', "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", 0, dc->parent->key);
error("sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", &dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go pa", dc->parent->key);
log_error_write(srv, __LINE__, "sb", "go parent", key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go,");
log_error_write(srv, __FILE__, TRUE, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent")
log_error_write(srv, "sb", "go parent", dc->parent->key, __FILE__);
log_error_write(srv, __FILE__, dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->p->key);
log_error_write(srv, __FILE__, "sb", "go ", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key)
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->conf->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", *dc->parent->key);
log_error_write(srv, __FILE__, "sb", "go parent", dc->dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->dc->key);
log_error_write(srv, __FILE__, "sb", "go parent", NULL);
log_error_write(srv, "sb", "go param", dc->parent->key);
log_error_write(srv, "sb", "go parent", dc->prev->key);
log_error_write(srv, __FILE__, "sb", "go parent", con->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", 0);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", 0);
log_error_write(srv, __FILE__, __LINE__, "sb", __LINE__);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->device->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", prev->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go")
log_error_write(srv, dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->dir);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->state);
log_error_write(srv, __FILE__, __LINE__, "go parent");
log_error_write(srv, "sb", "go ", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", strerror(dc->parent));
log_error_write(srv, "%s", __LINE__);
log_error_write(srv, __LINE__, "sb", dc->parent->key);
log_error_write(srv, __LINE__, "sb", "go parent");
log_error_write(srv, __FILE__, "sb", dc->parent->key);
log_error_write(srv, 0, "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->id);
log_error_write(srv, "%s", dc->parent->key, __LINE__);
config_check_cond_cached(srv, con, dc->parent);
log_error_write(srv, "%s", __LINE__, dc->parent->key);
log_error_write(srv, "sb, go parent", dc->parent->key);
log_error_write(srv, NULL, "go parent", dc->parent->key);
log_error_write(srv, NULL, NULL, "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, config_check_cond_cached(srv, con, dc->parent->key));
log_error_write(srv, __FILE__, __LINE__, "sb", "go", "start", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", "go", "parent", dc->parent->key, dc->parent->flags);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->key, dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->key, 0, 0);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->parent->key, 0);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, "no context");
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->path);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, __LINE__);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (struct cond_socket *)dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", "db", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->p->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, NULL);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, 0, dc->conf.log_state, dc->conf.log_state, dc->conf.log_state, dc->conf.log_state, dc->conf.log_state, dc->conf.log_state, dc->conf.log_state);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (void **)dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (const char*)dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", srv_sock);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, 0);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, srv_state);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->dc->dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->dc->flags);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, srv_srv);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, "cache is not null", dc->path);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->context_ndx);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->desc->id);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", srv->srv->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, "context %s", con->device->nv->request);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->parent->key, dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (u_long)dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, 0, dc->dv_flags);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->conf.report_error);
log_error_write(srv, "%s", __FILE__, __LINE__, "sb", "go parent", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->key, 0);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (u_long) dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->prev->key);
log_error_write(srv, "%s", "go parent", dc->parent->key, __FILE__);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->socket->ptr_name);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->parent->key, dc->ds_cache->ds_cache_key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (void *) dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (unsigned long)dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->flags);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->dc_parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->parent->key, NULL);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->key, NULL);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->dc_key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->srv->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->cache_key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (unsigned long) dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", "go aparent", dc->parent->key);
log_error_write(srv, "%s", __LINE__, "sb", "go parent", dc->parent->key, dc->prev->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (const char*) dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, "null ptr", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->key, __FILE__);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->key_size);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->dc->dc->dc->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, &con->conf.conf.conf.conf_proc);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", dc->parent->key, dc->dev);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, __FILE__);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->parent->key, &dc->context_none);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, 0, 0);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", (const char *)dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go", "go prev", dc->parent->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, &c->conf.log_line);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->context_ndx->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, l);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, &dc->retval);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", con->context->context_ndx);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", srv_sock->key);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->conf.conf.conf.conf.conf.conf_state);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->conf.flags);
log_error_write(srv, __FILE__, __LINE__, "sb", "go parent", dc->parent->key, dc->conf.name);
