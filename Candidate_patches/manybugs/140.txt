golden:
xmlNode *node; xmlBufferPtr buf; dom_object *intern, *nodeobj; xmlChar *mem = NULL;
inference:
dom_object *intern, xmlChar *mem;

const dom_object *intern; xmlChar *mem;
dom_object *intern, mem;
const dom_object *intern, xmlChar *mem;
const dom_object *intern; const xmlChar *mem;
xmlChar *mem;
dom_object *intern, const xmlChar *mem;
dom_object *intern ATTRIBUTE_UNUSED;
dom_object *intern; xmlChar *mem;
dom_object *intern, *mem;
dom_object *intern; const xmlChar *mem;
dom_object *intern, xmlChar *mem, int size;
dom_object *intern = NULL; xmlChar *mem;
dom_object *intern, xmlChar *mem,
dom_object *intern;
dom_object *intern, char *mem;
dom_object *intern, xmlChar *mem, int flags;
dom_object *intern, XMLChar *mem;
const dom_object *intern, const xmlChar *mem;
dom_object *intern, xmlChar *mem, size;
dom_document_object *intern; xmlChar *mem;
dom_object *intern, *xmlChar *mem;
dom_object *intern; XMLChar *mem;
const dom_object *intern; XMLChar *mem;
dom_object *internp; xmlChar *memp;
static dom_object *intern; xmlChar *mem;
dom_object *intern = 0; xmlChar *mem;
dom_object *intern, xmlChar *mem, dummy;
dom_object *intern; char *mem;
dom_object *intern, const char *mem;
(void)dom_object *intern; xmlChar *mem;
void *intern; xmlChar *mem;
struct dom_object *intern; xmlChar *mem;
dom_object *intern, xmlChar **mem;
dom_object **intern; xmlChar *mem;
dom_object*intern; xmlChar*mem;
dom_object *intern; xmlChar *mem = NULL;
static const dom_object *intern; xmlChar *mem;
dom_object *intern, *xmlChar;
dom_object *intern, xmlChar *mem, flags;
dom_object *id; xmlChar *mem;
dom_object *intern = NULL, xmlChar *mem;
dom_object *intern; xmlChar **mem;
dom_object (intern); xmlChar (mem);
dom_object **intern; xmlChar **mem;
dom_object *intern, xmlChar *mem, retval;
u_int32_t *intern; xmlChar *mem;
DOM_Object *intern, xmlChar *mem;
dom_object *intern, xmlChar *mem = NULL;
dom_object *intern, xmlChar mem;
static dom_object *intern; static xmlChar *mem;
dom_object *intern, xmlChar *mem, uid;
dom_object *intern, xmlChar *mem, p;
dom_object *intern = xmlChar;
xmlChar *mem; dom_object *intern;
mem;
const DOM_object *intern; xmlChar *mem;
dom_object *id, xmlChar *mem;
static dom_object *intern, xmlChar *mem;
dom_document_object *intern, xmlChar *mem;
const DOM_object *intern, xmlChar *mem;
int dom_object *intern; xmlChar *mem;
char *intern; xmlChar *mem;
dom_doc_propsptr doc_props;
dom_object *intern, int mem;
dom_object *intern, mem, xmlChar *mem;
dom_document *intern; xmlChar *mem;
static const dom_object *intern, xmlChar *mem;
doc_object *intern; xmlChar *mem;
dom_object *intern, xmlChar *mem; int size;
dom_object *intern,
(void) dom_object *intern; xmlChar *mem;
dom_object *intern, xmlChar *mem __unused;
dom_object *internp, xmlChar *memp;
dom_doc_object *intern, xmlChar *mem;
dom_object *intern = NULL;
dom_object *intern, xmlChar *mem, int length;
const dom_object *intern; char *mem;
struct dom_object *intern, xmlChar *mem;
dom_object *internp, xmlChar *mem;
dom_doc_object *intern; xmlChar *mem;
dom_object *intern, xmlChar *mem, ptr;
dom_object *intern, xmlChar *mem, int format;
dom_object __unused; xmlChar __unused;
dom_object *intern, xmlChar *mem
dom_object *intern, xmlChar *mem, format;
dom_object *intern; mem;
DOM_object *intern, xmlChar *mem;
dom_object *intern, xmlChar *mem, int len;
dom_object *intern, xmlCHAR *mem;
dom_object *intern; u_char *mem;
const xmlChar *mem;
dom_object *intern, mem, size;
dom_object _intern; xmlChar _mem;
dom_object *intern, xmlChar *mem, int i;
dom_object &intern; xmlChar &mem;
dom_object *intern, mem; xmlChar *mem;
dom_object *intern; const char *mem;
const dom_object *intern;
dom_object *intern, xmlChar *mem, rv;
self.dom_object *intern; xmlChar *mem;
dom_object* intern; xmlChar* mem;
dom_object *intern; xmlChar *mem, size;
dom_object *intern2; xmlChar *mem2;
*intern; xmlChar *mem;
dom_object *intern, const XMLChar *mem;
dom_object *intern = 0, xmlChar *mem;
dom_object &intern, xmlChar &mem;
dom_object *intern = NULL; XMLChar *mem = NULL;
void *intern, xmlChar *mem;
dom_object_t *intern; xmlChar_t mem;
dom_object *intern; xmlChar *mem; int size;
dom_object *intern, flags; xmlChar *mem;
dom_object *internn, xmlChar *mem;
dom_object *intern; int mem;
dom_object *intern, xmlChar *mem, cp;
dom_object_t *intern; xmlChar_t *mem;
xmlChar *mem, dom_object *intern;
dom_object *intern; xmlChar *mem = 0;
dom_object *intern, xmlChar *mem, len;
const dom_object *intern; const XMLChar *mem;
dom_object *intern, xmlChar *mem, buf;
dom_object *intern = xmlChar(mem);
dom_object *internat; xmlChar *memat;
u_char *intern; xmlChar *mem;
dom_object *intern, xmlChar *mem, encoding;
dom_object *intern, xmlChar *mem, int error;
dom_object *intern, xmlChar *mem, int type;
xmlChar *mem ATTRIBUTE_UNUSED;
dom_object *intern, xmlChar *mem, j;
int dom_object *intern, xmlChar *mem;
xmlChar *intern;
dom_object *intern, xmlChar *mem, size, format;
dom_object *internt; xmlChar *memt;
dom_object [intern]; xmlChar [mem];
dom_object *inner, xmlChar *mem;
dom_object *intern, xmlchar *mem;
std::dom_object *intern; xmlChar *mem;
const dom_object *intern; const dom_object *mem;
dom_object *intern, format; xmlChar *mem;
dom_object *inner; xmlChar *mem;
dom_object *intern, xmlChar *mem, PR_TRUE;
dom_object *intern, xmlChar;
u_int8_t *intern; xmlChar *mem;
object *intern; xmlChar *mem;
dom_object *intern, xmlChar *mem, prefix;
dom_object *intern); xmlChar *mem;
const char *intern; xmlChar *mem;
dom_object *internp; xmlChar *mem;
dom_object *intern; xmlChar *mem, int size;
dom_object *intern, xmlChar *mem, u_char;
dom_object *intern; xmlString *mem;
dom_object *intern = xmlChar *mem;
static DOM_object *intern; xmlChar *mem;
dom_object *intern, xmlChar *mem, id;
dom_object *intern; xmlChar *mem,
dom_object *intern
dom_object *intern1; xmlChar *mem1;
dom_object *intern = 0;
xmlChar mem;
dom_object **intern, xmlChar **mem;
dom_object *intern,mem;
dom_object *intern, xmlChar *mem, cnt;
dom_object *i; xmlChar *mem;
dom_object *intern, xmlChar *mem, int mem;
doc_object *intern, xmlChar *mem;
dom_document_save_html();
dom_object *intern, xmlChar *mem, val;
dom_object *intern, xmlChar *mem, int index;
dom_object *intern, u_char *mem;
dom_object *intern; xmlChar *mem, dummy;
dom_object *intern __unused; xmlChar *mem;
dom_object *i, xmlChar *mem;
dom_object *intern, mem, flags;
dom_object *intern, uid; xmlChar *mem;
XMLChar *mem;
dom_object *intern; xmlChar mem;
dom_object *intern, buf; xmlChar *mem;
dom_object *intern; /* xmlChar *mem */
dom_object *intern,xmlChar *mem;
dom_object *intern, xmlChar *mem, 0;
xmlChar *mem, *intern;
dom_object *intern, &mem;
dom_object *intern, xmlChar *mem, mem;
dom_object *intern, /* xmlChar *mem */
dom_object *intern, xmlChar *mem, __unused;
do  dom_object *intern; xmlChar *mem;
dom_object *intern, xmlChar *mem, tmp;
dom_object *intern; xmlChar *mem, *id;
dom_object *intern, xmlChar *mem, char_type;
dom_object *intern, xmlChar *mem, rc;
int mem;
dom_object *intern = 0; xmlChar *mem = 1;
const dom_object *intern = NULL; xmlChar *mem;
dom_object *intern, xmlChar *mem, char *name;
dom_object *intern = xmlChar();
dom_object *intern, xmlChar *mem, uap;
dom_object *intern ATTRIBUTE_UNUSED; xmlChar *mem ATTRIBUTE_UNUSED;
dom_object *intern, xmlChar *mem, xmlChar_inline;
dom_object *intern, xmlChar *mem, s;
dom_object *intern, xmlChar *mem, cstrlen(mem) == 0;
dom_object *intern, xmlChar *mem, xmlFlags;
dom_object *intern, xmlChar *mem, uint32_t *fn;
dom_object *intern, xmlChar *mem, xmlDigit *n, xmlLimit *n, xmlObject *n);
dom_object *intern, xmlChar *mem, xmlProperty_fixup;
dom_object *intern, xmlChar *mem, xmlChar *procp;
dom_object *intern, xmlChar *mem, xml_format;
dom_object *intern, xmlChar *mem, u_long cnt;
dom_object *intern, xmlChar *mem, int size, format;
dom_object *intern, xmlChar *mem, nsresult
dom_object *intern, xmlChar *mem, n, n, rgb, n, rgb;
dom_object *intern, xmlChar *mem, uint32_t len, max_ptrs;
dom_object *intern, xmlChar *mem, xmlFileName;
dom_object *intern, xmlChar *mem, xmlUrl;
dom_object *intern, xmlChar *mem, u_char *newline;
dom_object *intern, xmlChar *mem, xmlDoc_props;
dom_object *intern, xmlChar *mem, xmlChar_intern_property;
dom_object *intern, xmlChar *mem, int dummy, dummy;
dom_object *intern, xmlChar *mem, const char* spec;
dom_object *intern, xmlChar *mem, int size, format, xmlDocPtr;
dom_object *intern, xmlChar *mem, ncp, ptr;
dom_object *intern, xmlChar *mem, xmlFormat;
dom_object *intern, xmlChar *mem, int type, int len, int len;
&dom_object *intern; xmlChar *mem;
<dom_object *intern; xmlChar *mem;
&dom_object *intern; xmlChar *mem;
<dom_object *intern; xmlChar *mem;
dom_object *intern; xmlChar *mem;
dom_object *intern; xmlChar *mem;
do <dom_object *intern; xmlChar *mem;
do dom_object *intern; xmlChar *mem;
do &dom_object *intern; xmlChar *mem;
