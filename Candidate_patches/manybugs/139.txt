golden:
zval *id, *nodep = NULL;
inference:

const zval *id;
zval *id = NULL;
zval *id = 0;
const char *id;
xval *id;
zval *id;
std::zval *id;
u_int32_t *id;
void *id;
int id;
sval *id;
char *id;
szval *id;
u_int32_t id;
zval id;
ZVAL *id;
zval *uid;
const void *id;
zval *id, *name;
val *id;
u_char *id;
const char* id;
struct zval *id;
zval_id;
zval **id;
id;
retval *id;
zval * id;
nsAutoString id;
u_int64_t *id;
zval *aid;
zval *id, *p;
rval *id;
(void) zval *id;
*id;
u_int8_t *id;
zval *id, *mem;
zval *id, *data;
uid *id;
zval *oid;
uint32_t *id;
xmlDoc *id;
zval *id, *ptr;
zval *id, *id;
const xmlDoc *id;
nsresult rv;
zval *id, *end;
u_int16_t *id;
zval *eid;
dom_document_save_html();
zval *_id;
u_long *id;
static zval *id;
const u_char *id;
zval *id, *cnt;
zval *id, flags;
int *id;
zval *id, *id2;
zval *id, *retval;
xmlString *id;
zval *idp;
zval_t *id;
jsval *id;
xmlChar *mem;
zval *sid;
(void)zval *id;
sig *id;
zval _id;
xmlId *id;
const struct zval *id;
zval *nid;
uint32_t id;
const val *id;
uint8_t *id;
const nsString& id;
std::id;
nsString *id;
zval *intern;
zval *id, *uid;
&zval *id;
/* zval *id; */
static const char *id;
zval *id = -1;
zval *id, *intern;
u_int64_t id;
splx(s);
zval* id;
zval *intern, id;
zval *ptr;
zval *id __unused;
static void *id;
__zval *id;
zval *id = "";
zval *p;
bool *id;
zval *id, *flags;
xmlDoc *docp;
zval id = 0;
zval *id, *format;
zval *id2;
uid_t id;
xmlChar *id;
zval *tid;
static const zval *id;
sva *id;
zval *name;
zval *id1, *id2;
zval *aID;
zval *id, *newline;
u_int16_t id;
yval *id;
zval uid;
::zval *id;
zval *id, *prefix;
const char *id = NULL;
zval *id, *info;
zval *id, *null;
zval *id, mem;
zval *id, *nu;
const nsString *id;
zval *id, *tmp;
zval *id, *url;
zval *id, *class;
zval *id, *idp;
zval *inited;
zval *in_id;
zval *id, *cp;
zval *mem;
zval *lid;
static char *id;
zval *id, *ret;
zval *id1;
zval *id, len;
val *id = NULL;
zval *id=0;
const id *id;
xval id;
wsval *id;
zval *id, *tag;
zval *id, size;
uid_t *id;
zval *id, p;
const xmlString *id;
zval *id, *value;
zval *id, *maxid;
zval *id, *new;
u_int8_t id;
zval *id, *c;
u_int *id;
zval *id; int size;
zval *id, *args;
zval *url;
zval *id, *m;
zval *id, value;
struct id *id;
static int id;
char* id;
u_int id;
zval *i;
zval *id, *nid;
zval *id, *size;
Zval *id;
zval *id, *string;
size_t id;
zval *id, *type;
zval *id, *method;
int i;
zval *id, *arg;
zval *id, uid;
const xmlDoc *docp;
zval *id, *parent;
zval *id, buf;
zval *id, *params;
zval *id, *param;
zval *id, *v;
zval *id, *vp;
free(id);
zval *id, retval;
u_int32_t i;
zval *id, *obj;
zval *id, *msg;
zval *id, *fmt;
zval *id, *len;
zval *id, *val;
mem;
zval *id, *file;
zval *id, *next;
zval *id = %s;
zval *id, *idx;
zval *id, id;
zval *id, *dir;
zval *id, *id1;
zval *id, id2;
zval *id, *oid;
zval *id, *message;
zval *id, tmp;
zval *id ATTRIBUTE_UNUSED;
zval *id, *abd, *bd, *rv;
zval *id, *method_propsptr;
struct dom_document_save_html *id;
zval *id, xmlCmd_class;
zval *id, *e;
zval *id, *sid;
xmlDisklabel *id;
zval *id, *encoding;
zval *id, *id = 0;
dom_document_save_html(int)
zval *id, m;
zval *id = '0';
xmlInt *id;
zval *id, *pstr;
xmlFile *f;
/* Note that XXX he's just called if a XML document is not null */ zval *id;
zval *id, *a_name;
/* * XXX do not allow -xml as first argument if the method was * created */ zval *id, *uid, *uid;
zval *id, *p, *cnt;
zval *id, xmlChar *id;
zval *id, *class_list;
zval *id, *inn, *filename;
zval *id, *v, *vp, *vp, *vp;
struct sockaddr *sockaddr;
zval *id, *objp;
zval *id, *encoded;
zval *id, *new_tmp_name;
zval *id, uid, flags, const char *mode, const uid_type_value_value_value_value_type;
zval *id, *advance;
zval *id, *intern, *name;
zval *id, *mlName;
zval *id, *p, *p, *p2;
zval *id, *num_props;
splx(id);
zval *id, *h, *hp;
zval *id, *nb;
struct xml_doc_propsptr doc_props; if (zval *id)  xml_get_id(docp, id, xml_doc_propsptr, intern);
dom_document_get_object(docp, id, xmlDocPtr, intern);
xmlDoc *docp; dom_object *intern;
nsresult res = xmlDocInfo->ci_data;
zval *id, *fp;
zval *id, *new_id;
zval *id, nv;
dom_document_save_html_nstr[] = 'n';
zval *id, *msg, *end;
zval *id, n, n;
dom_doc_propsptr doc_props;
zval *id, *ps, *xml_name;
nsCRT::strdup(zval *id);

dom_document_save_html_nstr[] = '<n';
struct xml_doc_propsptr doc_props; if (zval *id) <xml_get_id(docp, id, xml_doc_propsptr, intern);
zval *id;
zval *id = '0';
struct xml_doc_propsptr doc_props; if (zval *id) &xml_get_id(docp, id, xml_doc_propsptr, intern);
&zval *id;
zval *id = '<0';
dom_document_save_html_nstr[] = 'n';
<zval *id;
&zval *id;
zval *id = '&0';
struct xml_doc_propsptr doc_props; if (zval *id) xml_get_id(docp, id, xml_doc_propsptr, intern);
zval *id;
<zval *id;
dom_document_save_html_nstr[] = '&n';
