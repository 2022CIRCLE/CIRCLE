golden:
hufts += 3;
inference:

hufts = hufts + 2;
hufts += 2;
hufts++;
hufts += 1;
hufts += 3;
hufts = hufts;
hufts += 4;
hufts = 2;
hufts -= 2;
hufts = hufts + 1;
int hufts += 2;
hufts += len;
hufts = 1;
hufts.append(2);
hufts.add(2);
hufts += s;
hufts += d;
hufts[0] += 2;
hufts |= 2;
hufts = 0;
unsigned hufts += 2;
hufts += m;
hufts += t;
hufts--;
hufts += l;
hufts[1] += 2;
hufts += hufts;
hufts += 2 + 1;
hufts += p;
hufts += n;
hufts += two;
hufts += 2 - 1;
hufts = hufts++;
s += 2;
hufts[i] += 2;
hufts += '0';
hufts += 5;
hufts[i] = 2;
hufts.addr += 2;
hufts2 += 2;
hufts += huft_size;
hufts = hufts + 3;
lhufts += 2;
/* hufts += 2; */
hufts += 8;
hufts += i;
hufts.s += 2;
hufts *= 2;
hufts += 0;
hufts += b;
ufts += 2;
else hufts += 2;
long hufts += 2;
hufts -= 1;
hufts = len;
hufts += 6;
hufts = hufts+2;
_hufts += 2;
hufts += h;
hufts[2] += 2;
hufts += length;
hufts = 3;
(void)hufts += 2;
hufts = hufts+1;
huft = hufts + 2;
hufts+=2;
hufts = 4;
hufts = h;
*hufts += 2;
hufts = hufts +2;
hufts += 32;
hufts += 2 + 2;
hufts = huft_addr;
hfts += 2;
int h;
int hufts;
hufts += ch;
hufts[2] = '0';
const hufts += 2;
hufts;
hufts += 2 * 2;
hufts = huft;
hufts += NULL;
hflags += 2;
hufts[0] = 2;
hufts.len += 2;
decode_hufts += 2;
hufts += '2';
hufts += v;
hufts = huft + 2;
hufts += e;
hufts = hufts * 2;
hufts = huft_size;
/* hufts += 2;*/
hufts += k;
int hufts = 2;
huft.hufts += 2;
hufts += 10;
hufts.width += 2;
self.hufts += 2;
ush *hufts += 2;
hufts += a;
hufts += c;
i = hufts + 2;
hufts += r;
hufts = hufts + 4;
hufts. += 2;
hufts.hufts += 2;
hufts += 2 * m;
p += 2;
hufts += (int)2;
hufts[hufts] = 2;
hufts += g;
hufts = hufts();
return hufts + 2;
hufts +=  2;
ush_hufts += 2;
hufts = hufts2;
hufts[1] = 2;
hufts += 2, hufts;
hufts += 16;
ch = hufts + 2;
hufts >>= 2;
hufts.p += 2;
hufts1 += 2;
hufts[i]++;
hufts >= 2;
hufts += f;
hufts = hufts >> 2;
*hufts = hufts + 2;
__hufts += 2;
p = hufts + 2;
hufts++; hufts++;
huft += 2;
hufts += errno;
hufts = hufts = 2;
hufts += 2 + d;
hufts += huft_count;
hufts = *hufts + 2;
hufts = huft_count;
hufts += 2; #endif
hufts[m] += 2;
hufts[0] += 1;
hufts += w;
hufts += j;
t += 2;
hufts = NULL;
hufts += 2 - 2;
hufts += 2 + m;
hufts = huft_next;
hufts.add(hufts);
t = hufts + 2;
hufts += 2; break;
hufts += max_hufts;
hufts = huft_len;
h = hufts + 2;
hufts += 2 + len;
hufts += 2 * 1;
hufts += BUFFER_SIZE;
hufts.append('0');
hufts += q;
hufts[2] = 2;
hufts += (long)2;
hufts += (u_long)2;
bufts += 2;
hufts += 2 + t;
hufts.advance(2);
hufts += hufts++;
hufts += LIST_SIZE;
hufts += 1, hufts;
hufts += N_MAX;
hufts += huft_length;
i += 2;
hufts = new hufts;
hufts = *hufts;
hufts += 2 * s;
ret = hufts + 2;
hufts[2] += 1;
struct huft *hufts;
hufts = h[2];
hufts = hufts + 2);
s = hufts + 2;
len = hufts + 2;
hufts = hfts + 2;
m += 2;
v += 2;
hufts += BUFFER_LEN;
hufts += ret;
hufts += 2, p;
hufts += 2; */
d += 2;
len += 2;
n += 2;
hufts += 2, l;
hufts += hufts.length;
hufts += 2 + s;
hufts += huft_list;
hufts += 2; /* the code lengths if there are any * the same code lengths as a BMAX in a fixed table. */
hufts += 2; /* * Set of tables to decode that set of codes. */
hufts = huft_make(hufts, hufts);
hufts += 2; /* we can't have a huft */
hufts = huft_size(hufts);
hufts = huft_get(&hufts);
hufts = huft_build(huft_p, p, m, n, s, e, t, m);
hufts += 2; /* only work with sched_links. */
hufts = hufts.sqrt();
hufts += hfss_nr;
hufts += huft_number;
hufts = hufts.s + 2;
hufts += 2; /* use this prefix. */
hufts += rc;
hufts = huft_get_hufts(hufts);
hufts = huft_num_hufts + 2;
hufts += bs;
hufts += hufts + 2;
hufts += 2; /* only if valid for huft_rel() */
hufts = huft_list(hufts);
hufts = huft_prno;
hufts += 2 + sizeof(hufts);
hufts += 2; /* copy it from the previous code. */ if (t > 0)  ush *e; /* copy it from the next table */ u.. */ u.. */ u.. */ u.. */ u.. */ hufts += 1;
hufts += 2; /* are two of the hufts with * hufts */
hufts = huft_add(hufts, 2);
hufts = hufts.addr;
hufts += huft_num_h;
hufts += 2 + huft_size;
hufts += e[H_INT_PARSEN];
hufts += huft_offset;
hufts = huft_get_desc(&huft_t);
hufts = huft_build(b, t, t, huft_len, s, huft_len, &hufts);
hufts = huft_number;
hufts += 2 + hufts;
hufts += cp;
hufts += rv;
hufts = huft_build(b, n, s, e, t, m);
hufts += 2;  else hufts += 2;
hufts = huft_mdp[mdp].md_huft; hufts += 2;
hufts += 2; /* the * length of the last hufts of a set. */
hufts = huft_s + 2;
<hufts += 2;
hufts += &2;
hufts += 2; /* the code lengths if there are any * the same code lengths as a &BMAX&in a fixed table. */
hufts += 2; /* the code lengths if there are any * the same code lengths as a &BMAXin a fixed table. */
hufts += 2; else hufts += 2;
hufts[2] = '&0';
hufts[2] = '0';
&hufts += 2;
hufts += 2; /* the code lengths if there are any * the same code lengths as a <BMAXin a fixed table. */
hufts += 2; &else hufts += 2;
hufts += 2; /* the code lengths if there are any * the same code lengths as a &BMAX<in a fixed table. */
hufts += <2;
hufts += 2; /* copy it from the previous code. */ if (t > 0) ush *e; /* copy it from the next table */ u.. */ u.. */ u.. */ u.. */ u.. */ hufts += 1;
hufts += 2; /* the code lengths if there are any * the same code lengths as a <BMAX&in a fixed table. */
hufts += 2; /* the code lengths if there are any * the same code lengths as a <BMAX<in a fixed table. */
hufts[2] = '<0';
hufts += 2; /* the code lengths if there are any * the same code lengths as a BMAX<in a fixed table. */
hufts += 2;
hufts += 2; /* the code lengths if there are any * the same code lengths as a BMAXin a fixed table. */
hufts.append('0');
hufts += 2; /* copy it from the previous code. */ if (t > 0) &ush *e; /* copy it from the next table */ u.. */ u.. */ u.. */ u.. */ u.. */ hufts += 1;
hufts += '0';
hufts += '<0';
hufts += '&0';
hufts += 2; <else hufts += 2;
&hufts += 2;
hufts.append('&0');
hufts.append('<0');
hufts += 2; /* copy it from the previous code. */ if (t > 0) <ush *e; /* copy it from the next table */ u.. */ u.. */ u.. */ u.. */ u.. */ hufts += 1;
hufts += 2; /* the code lengths if there are any * the same code lengths as a BMAX&in a fixed table. */
<hufts += 2;
hufts += 2;
