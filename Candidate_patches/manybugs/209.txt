golden:
} else if (PyBytes_GET_SIZE(self->unconsumed_tail) > 0) { /* All of the compressed data was consumed. Clear unconsumed_tail. */ Py_DECREF(self->unconsumed_tail); self->unconsumed_tail = PyBytes_FromStringAndSize("", 0); } if (self->unconsumed_tail == NULL) {  Py_DECREF(RetVal);  RetVal = NULL; goto error;
inference:
Py_DECREF(RetVal);
Py_DECREF(RetVal); return NULL;
Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); goto error;

return NULL;
goto error;
Py_DECREF(retval); goto error;
if(!self->unconsumed_tail) return NULL;
Py_DECREF(retval);
self->unconsumed_tail = NULL;
if (!self->unconsumed_tail) return NULL;
Py_DECREF(retval); return NULL;
Py_DECREF(RetVal); RetVal = NULL;
Py_DECREF(RetVal = NULL); goto error;
Py_DECREF(RetVal); ReturnVal = NULL; goto error;
self->unconsumed_tail = NULL; goto error;
Py_DECREF(RetVal); REtVal = NULL; goto error;
if(!self->unconsumed_tail) goto error;
Py_DECREF(RetVal);RetVal = NULL; goto error;
Py_DECREF(RetVal) return NULL;
Py_DECREF(RetVal, NULL); goto error;
Py_DECREF(RetVal); RetVal = NULL; return NULL;
Py_DECREF(RetVal); Py_buffer pinput;
Py_DECREF(RetVal); result = NULL; goto error;
Py_DECREF(RetVal); return null;
Py_DECREF(RetVal = NULL);
if(!self->unconsumed_tail)
Py_DECREF(RetVal); break;
Py_DECREF(retval); RetVal = NULL; goto error;
if (!self->unconsumed_tail) goto error;
Py_DECREF(RetVal); RetVal = 0; goto error;
Py_DECREF(RetVal, NULL);
PyBuffer_Release(&pinput);
PY_DECREF(RetVal);
Py_DECREF(RetVal)
return null;
Py_DECREF(RetVal); Goto error;
PyObject *RetVal;
Py_DECREF(RetVal); RetVal = null; goto error;
Py_DECREF(RetVal); RetVal = NULL; break;
Py_DECREF(RetVal);retval = NULL; goto error;
PY_DECREF(RetVal); return NULL;
PyRetVal = NULL; goto error;
Py_DECREF(RetVal); returned = NULL;
Py_DECREF(RetVal = NULL); return NULL;
Py_DECREF(RetVal); Return value;
Py_DECREF(RetVal); return (NULL);
self->unconsumed_tail = NULL; return NULL;
PyObject *RetVal = NULL; goto error;
PyObject *RetVal = NULL;
self->unconsumed_tail = 0;
Py_DECREF(RetVal);goto error;
Py_DECREF(RetVal, 0); goto error;
return self->unconsumed_tail;
break;
Py_DECREF(RetVal) goto error;
Py_DECREF(RetVal); rep = NULL; goto error;
PY_DECREF(RetVal); goto error;
Py_DECREF(RetVal); ReturnVal = NULL;
Py_DECREF(RetVal, 0);
Py_DECREF(RetVal, NULL); return NULL;
return (NULL);
Py_DECREF(RetVal), RetVal = NULL; goto error;
Py_decr(RetVal);
Py_DECREF(RetVal = NULL, goto error);
Py_DECREF(RetVal);retVal = NULL; goto error;
if (!self->unconsumed_tail)
Py_DECREF(RetVal);  return NULL;
Py_DECREF(RetVal); rv = NULL; goto error;
Py_DECREF(result);
PyObject *retval = NULL;
Py_DECREF(RetVal); geto error;
Py_DECREF(RetVal); RetVal = NULL; geto error;
PyObject *retval;
self->unconsumed_tail.clear();
Py_DECREF(RetVal); goto err;
Py_DECREF(RetVal); (void)NULL; goto error;
Py_DECREF(retVal); goto error;
Py_DECREF(RetVal); else return NULL;
Py_DECREF(RetVal); returned NULL;
Py_DECREF(RetVal); #endif
Py_DECREF(RetVal); RetVal=NULL; goto error;
Py_DECREF(RetVal); ret = NULL; goto error;
Py_DECREF(RetVal); done:
Py_DECREF(RetVal); Return value = NULL; goto error;
Py_DECREF("%s", self->unconsumed_tail);
Py_DECREF(RetVal); return NULL; goto error;
}else return NULL;
Py_decrypt(RetVal);
Py_DECREF(RetVal); PyVal = NULL; goto error;
Py_DECREF(RetVal, 0); return NULL;
}else Py_DECREF(RetVal);
Py_DECREF(RetVal); error = NULL; goto error;
RetVal = NULL; goto error;
Py_DECREF(RetVal);return NULL;
Py_DECREF(RetVal); RetVal = NULL; return error;
Py_decr(RetVal); goto error;
Py_DeCREF(RetVal);
PyPy_DECREF(RetVal);
Py_decr(RetVal); return NULL;
Py_DECREF(RetVal); Py_buffer pinput = NULL;
Py_DECREF(RetVal); Abort();
Py_DeCREF(RetVal); RetVal = NULL; goto error;
Py_DeCREF(RetVal); return NULL;
Py_DECREF(RetVal); else goto error;
Py_deCREF(RetVal);
PyRetVal = NULL;
Py_DECREF(RetVal); hash = NULL; goto error;
Py_DECREF(RetVal); rval = NULL; goto error;
Py_DECREF(self->unconsumed_tail);
Py_DECREF(RetVal); ref = NULL; goto error;
Py_DECREF(RetVal); return 0;
Py_DECREF(&RetVal); return NULL;
Py_DECREF("%s", RetVal); goto error;
Py_deCREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(ret);
Py_DECREF(RetVal); (void) NULL; goto error;
Py_DECREF(RetVal); int error;
Py_DECREF(RetVal, size); goto error;
Py_DECREF(RetVal); Return NULL; goto error;
Py_DECREF(&retval);
Py_DECREF(RetVal);  else goto error;
return 0;
Py_deCREF(RetVal); return NULL;
Py_DECREF(&RetVal);
if(!self->unconsumed_tail) break;
Py_DECREF(result); return NULL;
if (!self->unconsumed_tail) break;
Py_DECREF(RetVal) = NULL; goto error;
Py_DECREF(RetVal); RetVal = NULL; return 0;
Py->unconsumed_tail = NULL;
Py_DECLEF(RetVal);
self->unconsumed_tail.RetVal = NULL; goto error;
Py_DECREF(RetVal);  else return NULL;
self->unconsumed_tail;
Py_DECREF("%s", RetVal);
self->unconsumed_tail = null; goto error;
Py_BUffer_Release(&pinput);
Py_DECREF(RetVal); RetVal = NULL;goto error;
Py_DECREF(RetVal); Init();
Py_DECREF(RetVal); goto fail;
Py_DECREF(RetVal); goto error; return NULL;
}else goto error;
return result;
Py_DECREF(RetVal); result = NULL;
int err;
Py_DECREF(RetVal); int err;
Py_DECREF(RetVal); RetVal = -1; goto error;
Py_DECREF(RetVal); RetVal = NULL; goto break;
Py_DECREF(RetVal);  else  return NULL;
Py_DECREF();
Py_DECREF(RetVal);retval = NULL;goto error;
Py_DECREF(RetVal); Py_buffer p;
int error;
PyByte *input;
Py_DECREF(RetVal); RetVal = NULL; goto failure;
Py_DECREF(RetVal); Py_buffer old_buf;
if(!self->unconsumed_tail) return NULL; return NULL;
Py_DECREF(RetVal, PR_TRUE); goto error;
Py_DECREF(self->unconsumed_tail); return NULL;
#endif
Py_DECREF(RetVal); *retval = NULL;
Py_DECREF(RetVal, PR_FALSE);
Py_DECREF(RetVal, PR_TRUE);
Py_DECREF(RetVal); goto error, err;
Py_DECREF(RetVal = NULL; goto error;
Py_DECREF(RetVal); ++retval; goto error;
Py_DECREF(RetVal); Py_buffer pinput.buf;
Py_DECREF(RetVal); RetVal = ""; goto error;
Py_DECREF(RetVal);RetVal = NULL;
Py_DECREF(RetVal); returned = NULL; goto error;
Py_DECREF(RetVal); Return value = NULL;
if(!self->unconsumed_tail) return NULL; goto error;
goto err;
Py_DECREF(RetVal); RetVal = NULL; goto fail;
if (!self->unconsumed_tail) return NULL; return NULL;
Py_DECREF(RetVal); Py_buffer pbuf;
Py_DECREF(RetVal = NULL; goto error);
return (0);
Py_DECREF(RetVal); repaint();
Py_DECREF(RetVal); RetVal = NULL; returned error;
Py_DECREF(RetVal, sizeof(RetVal));
Py_DECREF(RetVal); RetVal = NULL; goto exception;
Py_DECREF(RetVal); if (!self->unconsumed_tail) goto error;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; unsigned long start_total_out;
Py_DECREF(RetVal); if (!self->unconsumed_tail)  Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); /* XXX should be correct if the xml device can handle this device */
Py_DECREF(RetVal); if (!self->unconsumed_tail) return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (!PyArg_ParseTuple(args, "y*|i:decompress", &pinput, &max_length)) return NULL;
Py_DECREF(RetVal); Py_buffer pinput; byte *input;
Py_DECREF(RetVal); /* * Unconsumed the whole timetable if it has * been decompressed */ if(!self->unconsumed_tail)  Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; inplen = pinput.len;
Py_DECREF(RetVal); Py_buffer pinput; Py_ssize_t old_length, length = DEFAULTALLOC; Py_output ntohs(NULL);
Py_DECREF(RetVal); Py_buffer pinput; Byte *input;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length  0)  PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); Py_DECREF(RetVal); goto error;
Py_DECREF(RetVal); Py_buffer pinput; Py_ssize_t old_length, length = DEFAULTALLOC; Py_buffer pinput.buf;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length  0)  PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); Py_buffer fput;
Py_DECREF(RetVal); /* Unconsumed input data will be stored inn" "the unconsumed_tail attribute.");
Py_DECREF(RetVal); /* * Remove the consumed val */ if(!self->unconsumed_tail)  Py_DECREF(RetVal); RetVal = NULL; goto error;

Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length <0) <PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal);
Py_DECREF(RetVal); else &return NULL;
Py_DECREF(RetVal); &else &return NULL;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length <0) <PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); <return NULL;
Py_DECREF(RetVal); &else goto error;
Py_DECREF(RetVal); return NULL;
goto error;
Py_DECREF(RetVal); /* Unconsumed input data will be stored in&n" "the unconsumed_tail attribute.");
Py_DECREF(RetVal); &else return NULL;
self->unconsumed_tail = NULL; goto error;
Py_DECREF(RetVal); return NULL;
Py_DECREF(RetVal); <else <return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length &0) <PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); <else &return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length 0) PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); else return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length &0) &PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); <else goto error;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length 0) &PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); /* * Unconsumed the whole timetable if it has * been decompressed */ if(!self->unconsumed_tail) &Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); if (!self->unconsumed_tail) <Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); RetVal = NULL;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length 0) PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); /* Unconsumed input data will be stored in<n" "the unconsumed_tail attribute.");
Py_DECREF(RetVal); &else return NULL;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length 0) <PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(retval); goto error;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length <0) &PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length 0) <PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); /* * Unconsumed the whole timetable if it has * been decompressed */ if(!self->unconsumed_tail) <Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length &0) <PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); /* * Unconsumed the whole timetable if it has * been decompressed */ if(!self->unconsumed_tail) Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); /* * Remove the consumed val */ if(!self->unconsumed_tail) &Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); goto error;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length &0) PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(retval); return NULL;
Py_DECREF(RetVal); else return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length <0) PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); if (!self->unconsumed_tail) &Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); &else <return NULL;
Py_DECREF(retval);
Py_DECREF(RetVal); &else &return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length 0) &PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); <else &return NULL;
Py_DECREF(RetVal); /* * Remove the consumed val */ if(!self->unconsumed_tail) Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); &else <return NULL;
Py_DECREF(RetVal); else <return NULL;
Py_DECREF(RetVal); /* Unconsumed input data will be stored inn" "the unconsumed_tail attribute.");
Py_DECREF(RetVal = NULL); goto error;
Py_DECREF(RetVal); /* * Remove the consumed val */ if(!self->unconsumed_tail) <Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); <else <return NULL;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length <0) PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); if (!self->unconsumed_tail) Py_DECREF(RetVal); RetVal = NULL; goto error;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length &0) PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); <else return NULL;
Py_DECREF(RetVal); <else return NULL;
Py_DECREF(RetVal); Py_buffer pinput; Byte *input; unsigned long start_total_out; if (max_length <0) &PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); &return NULL;
Py_DECREF(RetVal); Py_buffer pinput; byte *input; inplen = pinput.len; if (max_length &0) &PyBuffer_Release(&pinput); PyErr_SetString(PyExc_ValueError, "max_length must be greater than zero"); return NULL;
Py_DECREF(RetVal); else &return NULL;
return NULL;
Py_DECREF(RetVal); else goto error;
Py_DECREF(RetVal); else <return NULL;
