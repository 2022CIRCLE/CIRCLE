golden:
<extra_id_0>
inference:

#endif /* XXX */
#endif /*
#endif
# endif /* XXX */
#endif /* DEBUG */
return (0);
return 0;
#endif /* NULL */
#endif /*/
#endif /* */
# endif
#endif;
#endif /* NOTREACHED */
#endif */
#endif /* packet_info */
return NULL;
#endif /* GHashTable */
/* XXX */
*/
/* endif */
#endif /* XXX*/
#endif (void)
# endif /*
#endif /*XXX */
#else
break;
#endif /* DEBUG*/
splx(s);
#endif /* fragment_data */
return -1;
#endif /* * XXX */
#endif /* endif */
endif
#endif/*/
#endif /* FIXME: */
#ifdef DEBUG
#endif /* NULL*/
#endif /* debug */
endif;
#endif /* FAILURE */
*fragment_table = NULL;
#endif /* None */
continue;
#endif /* TODO */
#endif:
# endif */
#endif /* FIFO */
else
pass
#endif /* debug*/
/*endif */
# endif /* DEBUG */
return fragment_data;
#endif /* BUG */
#endif /* SIGNAL */
endif /* XXX */
#endif /* RETURN */
# endif;
@endif /* XXX */
free(fragment_table);
#endif /* ENDIF */
#endif /* WARNING */
NS_RELEASE(fragment_table);
#endif /* alloc */
Endif
#endif /* DISPLAY */
#endif /* size_t */
#endif /* PR_LOGGING */
#endif /* NSS */
#ifdef XP_MAC
#endif /* 2 */
#endif /*fragment_data */
#endif /* GCashTable */
#endif /* package_info */
#endif /* DELAY*/
#endif /* XXXX */
#endif /* the packet_info */
#endif /* GHashTable*/
#endif /* DIAGNOSTIC */
#endif /* nothing to do */
#endif /* READ */
#endif /* DBG */
#endif /* #endif */
#endif /* nothing */
#endif /* data */
/* * XXX */
#endif/*
#endif /* The packet_info */
return 1;
#endif /* 1024 */
debug_endif
#endif /* POSTCODE */
#endif /* not implemented */
#endif /* XXX **/
#endif /* FIXME*/
#endif /* allocate */
#endif /* NOTREACHED*/
#endif /* FIXME */
#endif /* DELAY */
#endif /* FILE */
#endif /* GLOBAL */
stop();
#endif /* new packet_info */
#endif /* STATUS */
#endif /*.*/
#endif /* #endif
#endif /* XXX: */
#endif; /* XXX */
const guint32 id;
#endif /* 0 */
#endif /*next */
#endif /* SMP */
DEBUG
#endif /*? */
#endif /* PR_LOGGING*/
#endif /* NEXT */
#endif /* VFS */
if (fragment_table)
#endif /* GNUC */
#endif /* BUG*/
#endif /* '0' */
#endif /* NOTIFY */
/*
#endif /* INCLUDE */
#endif /* NECKO */
#endif /* gdbarch */
if (pinfo == NULL) return;
#endif /* SECTION */
#endif []
#endif /* invalidate */
#endif /* SIZE */
#endif /* SECOND */
#endif /* the packet */
#endif /* TARGET */
#endif /* FINALLY */
#endif /* unsigned long */
# endif /* * XXX */
return;
#endif*
#endif /* packet_data */
#endif /* I/O */
#endif /* WEB */
# endif /* XXX*/
#endif /* EXCEPTION */
DELAY(1);
#endif /* POST */
#endif /* FAST */
#endif /* id */
#endifs
#Endif
#endif /* FIXME! */
#endif /* POSTOPATTR */
#endif /* EXIT */
#endif #ifdef XP_MAC
#endif /* PACKAGE */
#endif /* static int */
#endif /* ALLOCATION */
#endif /* DISPATCH */
int i;
#endif /* EXCEPTIONS */
#endif /* POSTOP */
#endif /* end of packet_info */
#
#endif /*fragment_data*/
#endif /* TAILQ_END */
#endif /* __unused */
#endif /* alloc*/
exit(1);
#endif /* GNUC*/
#endif /* end of packet */
#endif /* XXX/
#endif /* SEEK */
do
#endif /* gdb */
#endif /* FIXME:
#endif /* RETURN*/
# endif /* FIXME: */
exit(1)

<endif
#endif /*
# endif
endif
else
<else
<else
#endif /* '0' */
#endif;
&else
<#endif
<#endif /* DEBUG */
#endif /*
&*/
&# endif
endif
&else
&#endif
&#endif
#endif /* DEBUG */
# endif
&endif
#endif
#endif
<# endif
<#endif /*
&#endif /*
#endif;
*/
#endif /* '&0' */
<*/
&#endif /* DEBUG */
#endif /* '<0' */
<#endif
else
