golden:
if (!_TIFFMergeFields(tif,
inference:
if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif->tif_curdir,
if (!TIFFMergeField(tif,
if ((!_TIFFMergeField(tif,
if (!_TIFF_MergeField(tif,
TIFFMergeField(tif,
if (!_TIFFMergeField(tif->tif_diroff,
if (_TIFFMergeField(tif,
if (!_TIFFMergeField(tif->tif_clientdata,
if (!_TIFFField(tif,
if (TIFFMergeField(tif,
if (!_TIFFMergeField(curdir,
if (!_TIFFMergeField(dir,
if (!_TIFFMergeField(&tif,
if (!_TIFFMergeField(if,
if (!_TIFFMergeField(fif,
if (!_TIFFMergeField(ifp,
if (!GetTIFFMergeField(tif,
if (!_TIFFGetField(tif,
if (!get_TIFFMergeField(tif,
if (!_MergeField(tif,
if (!_TIFFFetchField(tif,
if (!_TIFFMergeField(tif->tif_data,
if (!_TIFFMergeField(p,
if (!TIFF_MergeField(tif,
if (!_TIFFMergeFields(tif,
if (! TIFFMergeField(tif,
if(!_TIFFMergeField(tif,
if (!MergeField(tif,
if (!_TIFFMergeField((unsigned long)tif,
if (!_TIFFMemoryField(tif,
if (!_TIFFMergeField((long)tif,
else if (!_TIFFMergeField(tif,
if (!&_TIFFMergeField(tif,
if (!__TIFFMergeField(tif,
if (!_TIFFMergeField((int)tif,
if ((_TIFFMergeField(tif,
if (!_TIFFMetricsField(tif,
if (&_TIFFMergeField(tif,
if (!getTIFFMergeField(tif,
if (!_TIFFMergeField(tif, &dir,
if (!_TIFFMergeField((tif)tif,
if (!_TIFFMergeField(tif->tif_list,
if (!_TIFFMergeField(&tif->tif_data,
if (!_TIFFMergeField(tif->tif_name,
if (!_TIFFMergeField(dev,
if (!_TIFFMergeField(tif,,
if (!_TIFFMergeField(tif->tif_file,
if (!_TIFFMemField(tif,
if (!_TIFFMergeField(&tif->tif_file,
if (!_TIFFMakeField(tif,
if (NS_TIFFMergeField(tif,
if (!TIFFField(tif,
if (!_TIFFMergeField(nextdiroff,
if (!TIFFMergeField(tif->tif_curdir,
if (!_TIFFMergeField(file,
if (!_TIFFMergeField(&tif->tif_list,
if (!_TIFFMergeField(buf,
if (!_TIFFMergeField( tif,
if (!_TIFFMergeField((TIFF)tif,
if (!_TIFFMergeField(dp,
if (!_TIFFMergeField(tif,dir,dircount);
if (!_TIFFMergeField(tif->tif_target,
if (!_TIFFMergeField(tif,0,
if (!_TIFFMergeField(tif,nextdiroff,
if (!_TIFFMergeField(s,
if (!_TIFFMergeField(tif);
if (!_TIFFMergeField(tif->tif_filename,
if (!_FetchField(tif,
if (!_TIFFMergeField(tif,p,
if (!_TIFFMergeField(nextdir,
if (! _TIFFMergeField(tif,
if (!_TIFFMergeField(tif, NULL,
if (!_TIFFMergeField(tif)
if (!_TIFFMergeField(str,
if (!_TIFFMergeField(tif->tif_fixup,
if (!(_TIFFMergeField(tif,
if (!_TIFFMergeField(p,tif,
/* if (!_TIFFMergeField(tif,
if (!_TIFFMergeField((void *)tif,
if (!_TIFFMergeField(fip,
TIFFField(tif,
if (=_TIFFMergeField(tif,
if (!TIFFMergeField(tif->tif_diroff,
if (TIFF_MergeField(tif,
if (!_TIFFMergeField(name,
if (!_TIFFMergeField(tif, FALSE,
if (!_TIFFMergeField(*tif,
if (!getField(tif,
if (!_TIFFMergeField(tif,module,
if (!_TIFFMergeField(tif->tif_dir,
if (!g_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,'0',
if (!LIST_TIFFMergeField(tif,
if (!_TIFFSearchField(tif,
if (!_TIFFCheckField(tif,
if (!_TIFFReadField(tif,
if (_TIFFMergeField(tif->tif_curdir,
if (!_TIFFRemoveField(tif,
if (!_TIFFMergeField(module,
if (!PL_TIFFMergeField(tif,
if (_TIFF_MergeField(tif,
if (!_TIFFMergeField(tif->tif_base,
if (!_TIFFMergeField(tif, 0,
if (!_TIFFModeField(tif,
if (!_TIFFMergeField((char *)tif,
if (!_TIFFMergeField(si,
if (!_TIFFMLergeField(tif,
if (!_TIFFMerge(tif,
if (!(TIFFMergeField(tif,
if (!_TIFFMergeField(sc,
if (!GetTIFFField(tif,
if (!_TIFFMergeField((uint16)tif,
if (!_TIFFMergeField(tif, &dp,
if (!_TIFFMergeField(tif, di,
if (!_TIFFMergeField(tif,this,
if (!_TIFMergeField(tif,
if (!_TIFFMergeField2(tif,
if (!_TIFFMergeField (tif,
TIFF_MergeField(tif,
if (!_TIFFMergeField(&tif->tif_name,
if (!_TIFFMergeField(tifp,
if (!_TIFF_Field(tif,
if (!_TIFFMergeField(tif->tif_dp,
if (!_TIFFMergeField(tif, &dircount,
if (!_TIFFMergeField(tif[0],
if (!_TIFFMergeField(&tif->tif_target,
if (!_TIFFMergeField(tif,name,
if (!_TIFFMergeField((u_long)tif,
if (!_TIFFMergeField(tif,=0,
if (!_TIFFMergeField((unsigned char)tif,
if (!NS_TIFFMergeField(tif,
if (!_TIFFMethodField(tif,
if (!FLAG_TIFFMergeField(tif,
if (!_TIFFChangeField(tif,
if (!_TIFFMergeField(strlen(tif),
if (!_TIFFMergeField(tif,fif,
if (!TIFFGetField(tif,
if (!_TIFFMergeField(tif->tif_parent,
if (_TIFFMergeField(tif->tif_diroff,
if (!_TIFFMergeField((void **)tif,
if (!_TIFFMergeField(tif, TRUE,
if (!_TIFFMergeField(tif,ifp,
if (!_TIFFMergeField(tif,tif_diroff,
if (!_TIFFMergeField(data,
if (!_TIFFMergeField(tif,file,
if (!_TIFFMergeField(tif->tif_entry,
if (!_TIFFMergeField(&tif->tif_dir,
if (!_TIFFMergeField(tif->tif_path,
if (!_TIFFMergeField(tif->tif_addr,
if (!_TIFFMergeField(tif->tif_dev,
if (!_TIFFMergeField(tif, fip,
if ( TIFFMergeField(tif,
if (!_TIFFMergeField(v,
if (!_TIFFMergeField(tif.tif_curdir,
if (!_TIFFMergeField(&tif->tif_field,
if (!_TIFFMergeField(tif->tif_valid,
if (!_TIFFMergeField(tif, false,
if (!_TIFFMergeField(tif,fii,
if (!_TIFFMergeField(tif->tif_server,
if (!_TIFFMergeField(tif->tif_directory,
if (!_TIFFMergeField(tif,&dir,
if (!_TIFFMergeField(tif, 0)
if (!TIFFMergeField(tif->tif_clientdata,
if (!_TIFFMultipleField(tif,
if (!_TIFFMergeField(dir,tif,
if (!_TIFFMergeField(src,
if (!_TIFFMergeField(tif,None,
if ((TIFFMergeField(tif,
if (!_TIFFMergeField(tif,dir,dircount))
if (!_TIFFMergeField(tif->tif_field,
if (!_TIFFMergeField(tif,flags,
if (!_TIFFMergeField(tif, null,
if (_TIFFField(tif,
if (!_TIFFUpdateField(tif,
if (!RTIFFMergeField(tif,
if (!_TIFFMergeField(tif, &ifp,
if (!_TIFFMergeField(tif->tif_source,
if (!_TIFFTypeField(tif,
if (!_TIFFItemField(tif,
if (!_TIFFEditField(tif,
if (!_TIFFMergeField(i,
if (!_TIFFMergeField(tif->tif_fields,
if (!_TIFFMergeField(tif->tif_key,
if (!_TIFFMergeField(tif->tif_family,
if (!_TIFFMergeField(tif_dir,
if (!_TIFFMergeField(tif->tif_device,
if (!_TIFFMergeField(tif,=NULL,
if (!_TIFFMergeField(tif->tif_map,
if (!_TIFFMergeField(tif->tif_ifp,
if (!TIFFMergeField(&tif->tif_curdir,
if (!Field(tif,
if (!_TIFFMergeField(tif, dir,
if (!_TIFFMergeField(tif->tif_info,
if (!FindField(tif,
TIFFFieldField(tif,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&tif->tif_flags&=TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif, &tif->tif_flags&=TIFF_UNSTANDING,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFEr
if (!_TIFFMergeField(tif, tif->tif_nextdiroff,
if (!_TIFFMergeField(tif, TIFF_FRAME_DEBUG_ARG,
if (!_TIFFMergeField(tif,&splib(s))) return 0; /* last offset or bad offset (IFD looping) */ (*splib(s))(tif); /* cleanup any previous compression state */ (*splib(s))(tif); /* cleanup any previous compression state */ (*splib(s))(tif); /* cleanup any previous compression state */ (*splib(s))(tif); /* cleanup any previous compression state */ splib(s)); /* cleanup any previous compression state */ splib(s)(tif); if (!_TIFFMergeField(tif,splib(s),
if (!_TIFFMergeField(tif, tif->tif_diroff,
if (!_TIFFMergeField(tif,tif->tif_clientdata,
if (!_TIFFMergeField(&tif->tif_diroff,
if (!_TIFFMergeField(tif,str,
if (!_TIFFMergeField(tif,tif->tif_diroff,
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff,
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &sp,
if (!_TIFFMergeField(tif,scr,
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,TIFFFlatString(tif->tif_flags));
if (!_TIFFMergeField(&tif->tif_cnt,
if (!_TIFFMergeField(tif, &dircount) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif, TIFFDirEntry* dir,
if (!_TIFFMergeField(&tif->tif_curdir,
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,
if (!_TIFFMergeField(tif,_TIFFFIND_REG) ||!_TIFFMergeField(tif,_TIFFFIND_REG,
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff,
if (!_TIFFMergeField(tif,_tif_cleanup)(tif,
if (!_TIFFMergeField(tif, TIFF_REFERENCE,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG_UNSIGNED,
if (!_TIFFMergeField(tif, &tif->tif_flags || tif->tif_iocmd == TIFF_MIKED) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(&tif->tif_clientdata,
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_flags&=TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,slp,
if (!_TIFFMergeField(tif,saved)
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,dir,dircount); tif->tif_flags&=TIFF_BEENWRITING; /* reset before new dir */ /* free any old stuff and reinit */ TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG, TIFF
if (!_TIFFMergeField(tif, TIFF_FORWARD_LOCALE,
if (!_TIFFMergeField(tif, TIFFTAG_PLANARCONFIG,
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, TIFF_FILTER_FIRST(&tif->tif_file))) return 0; /* XXX: nsFileSystemField: no tif file if needed for the TIFF, and the TIFF option * will be discarded */
if (!_TIFFMergeField(tif,_TRANS_PLUGIN_LEFT,
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt
if (!_TIFFMergeField(&tif->tif_nextdiroff,
if (!_TIFFMergeField(tif, TIFF_NO_ADDR)) return 0; /* * In case of RFC 24856, we need to put a new variable for the data. */
if (!_TIFFMergeField(tif,&tif->tif_file,
if (!_TIFFMergeField(tif, &ifd);
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_flags&=TIFF_CLAY_HEADER_UNSET);
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_BEENWRITING || TIFF_BEENFIRST);
if (!_TIFFMergeField(tif,&tif->tif_diroff,
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_name,
if (!_TIFFMergeField(tif,_IF_DEBUG,
if (!_TIFFMergeField(tif,tif->tif_filesize,
if (!_TIFFMergeField(tif,TIFF_IS_TEMP,
if (!_TIFFMergeField(tif,&fifi,
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&tif->tif_clientdata,
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, TIFF_DEAD_FIELD,
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFF
if (!_TIFFMergeField(tif,tif->tif_ifdef,
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,_PREFIXPLANARCONFIG_CONTIG_FILE,
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_curdir + 1);
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_dp,
if (!_TIFFMergeField(&tif->tif_dt,
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif, tif->tif_type,
if (!_TIFFMergeField(&tif->tif_container,
if (!_TIFFMergeField(tif,&tif->tif_filters,
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG); return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ t
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG,
if (!_TIFFMergeField(tif, &tif->tif_retval,
if (!_TIFFMergeField(tif,tif->tif_sync_file,
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &tif->tif_file)) return 0; /* XXX check for a default value. */ TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG, TIFFDirEntry, &tif->tif_file, &tif->tif_diroff, &tif->tif_diroff, &tif->tif_diroff);
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif, tif->tif_flags& TIFF_BEENWRITING)) return 0; if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif, TIFF_READ_M_TIFF,
if (!_TIFFMergeField(tif, TIFF_DIRPROTECT,
if (!_TIFFMergeField(tif, TIFF_PROTOCOL_DEFAULT_PLANARCONFIG,
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount)  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0;  TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &tif->tif_flags&=&TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_flags&=TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, tif->tif_flags& <TIFF_BEENWRITING)) return 0; if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_BEENWRITING || TIFF_BEENFIRST);
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
<if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_BEENWRITING || TIFF_BEENFIRST);
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif, &tif->tif_flags&=&TIFF_UNSTANDING,
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_flags&=<TIFF_CLAY_HEADER_UNSET);
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,dir,dircount); tif->tif_flags&=TIFF_BEENWRITING; /* reset before new dir */ /* free any old stuff and reinit */ TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG, TIFF
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif,&tif->tif_flags&=&TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &tif->tif_flags&=TIFF_UNSTANDING,
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_BEENWRITING || TIFF_BEENFIRST);
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,dir,dircount); tif->tif_flags&=<TIFF_BEENWRITING; /* reset before new dir */ /* free any old stuff and reinit */ TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG, TIFF
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_flags&=TIFF_CLAY_HEADER_UNSET);
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif, tif->tif_flags& TIFF_BEENWRITING)) return 0; if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
&if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,&tif->tif_flags&=<TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,dir,dircount); tif->tif_flags&=&TIFF_BEENWRITING; /* reset before new dir */ /* free any old stuff and reinit */ TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG, TIFF
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFEr
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif, &tif->tif_flags&=<TIFF_UNSTANDING,
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &tif->tif_flags&=<TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFF
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,&tif->tif_flags&=TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, tif->tif_flags& &TIFF_BEENWRITING)) return 0; if (!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,'0',
if (!_TIFFMergeField(tif, tif->tif_flags & TIFF_DEADLINE)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFReadDirectoryCheckOrder(tif,dir,dircount); TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /* * Electronic Arts writes gray-scale TIFF files without a
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &dp)) return 0; if (!dp->dp_iocmd(tif->tif_iocmd)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); TIFFDefaultDirectory(tif); /*
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,TIFF_STATUS,TIFF_STATUS_OFFSET)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt
if (!_TIFFMergeField(tif, &savedircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif,'<0',
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif, &dircount)) return 0; if (!_TIFFDirOffset(tif,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt
if (!_TIFFMergeField(tif,dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,dir,dircount,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFDirEntry* dir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,tif->tif_flags&=TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, TIFF_REMOVED(tif->tif_diroff))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFF
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFEr
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_diroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif,tif->tif_data)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read
if (!_TIFFMergeField(tif,&dir,dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at
if (!_TIFFMergeField(tif,&strncmp(tif->tif_diroff, ""))) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif
if (!_TIFFMergeField(tif, tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif,&tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "
if (!_TIFFMergeField(tif, &tif->tif_list[0])) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_nextdiroff,tif->tif_flags&=&TIFF_CLAY_HEADER_UNSET);
if (!_TIFFMergeField(tif,tif->tif_curdir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to
if (!_TIFFMergeField(tif,TIFFFAG_PLANARCONFIG,PLANARCONFIG_CONTIG_CONTIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFF
if (!_TIFFMergeField(tif,savedir)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif); TIFFDefaultDirectory(tif); /* Electronic Arts writes gray-scale TIFF files * without a PlanarConfiguration directory entry. * Thus we setup a default value here, even though * the TIFFspec says there is no default value. */ TIFFSetField(tif,
if (!_TIFFMergeField(tif,tif->tif_flags&=&TIFF_BEENWRITING) &&!_TIFFMergeField(tif,
if (!_TIFFMergeField(tif, &tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif,tif->tif_flags&=<TIFF_FLOW_SIZE_PLAYED)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
if (!_TIFFMergeField(tif, &dircount)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset
if (!_TIFFMergeField(tif,TIFF_DEFAULT_PLANARCONFIG,TIFF_NOPLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFEr
if (!_TIFFMergeField(tif,'&0',
if (!_TIFFMergeField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFFreeDirectory(tif->
if (!_TIFFMergeField(tif,tif->tif_diroff,tif->tif_nextdiroff)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); if (!dircount) TIFFErrorExt(tif
if (!_TIFFMergeField(tif, &tif->tif_list)) return 0; /* last offset or bad offset (IFD looping) */ (*tif->tif_cleanup)(tif); /* cleanup any previous compression state */ tif->tif_curdir++; dircount=TIFFFetchDirectory(tif,tif->tif_nextdiroff,&dir,&tif->tif_nextdiroff); if (!dircount) &TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; <TIFFErrorExt(tif->tif_clientdata,module, "Failed to read directory at offset %llu",tif->tif_nextdiroff); return 0; TIFFErrorExt(tif->tif_clientdata,module,
