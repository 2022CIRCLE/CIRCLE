golden:
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) { zval_dtor(value); } break;
inference:

if (value == &tmp_value)  zval_dtor(value);
zval_dtor(value);
obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) zval_dtor(value);
value = &tmp_value;
tmp_value = value;
if (value == tmp_value)  zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)
if (value == &tmp_value)
if (value->type!= IS_STRING)  tmp_value = *value;
if (value)  zval_dtor(value);
tmp_value = &tmp_value;
found = 1; obj->diff->n = Z_LVAL_P(value);
if(value == &tmp_value)  zval_dtor(value);
if (obj->diff->n == Z_LVAL_P(value))  zval_dtor(value);
found = 0; obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING)  tmp_value = *value;
obj->diff->n = Z_LVAL_P(value); zval_dtor(value);
if (value == 0)  zval_dtor(value);
obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
value = Z_LVAL_P(value);
if (value == NULL)  zval_dtor(value);
found = 1; if (value == &tmp_value)  zval_dtor(value);
splx(s);
zval_dtor(value); found = 1; obj->diff->n = Z_LVAL_P(value);
zval_dtor(obj->diff->n);
zval_dtor(obj->diff->value);
found = 0;
p = Z_LVAL_P(value); if (p == &tmp_value)  zval_dtor(p);
if (value!= &tmp_value)  zval_dtor(value);
zval_dtor(value, 0);
obj->diff = Z_LVAL_P(value);
if (obj->diff->n == 0)  zval_dtor(value);
obj->diff->n = value;
zval_dtor(value, &tmp_value);
found = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
zval_dtor(&tmp_value);
p = Z_LVAL_P(value); if (p == &tmp_value)  zval_dtor(value);
zval_dtor(value); found = 1;
if (value == &tmp_value) zval_dtor(value); else zval_dtor(value);
n = Z_LVAL_P(value); if (n == &tmp_value)  zval_dtor(value);
zval_dtor(value, obj->diff->n);
zval_dtor(value, 1);
obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
n = Z_LVAL_P(value);
found = 1;
tmp_value = value; zval_dtor(tmp_value);
if (value == tmp_value) zval_dtor(value);
zval_dtor(tmp_value);
if (value) zval_dtor(value);
found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)
obj->diff->n = value; if (value == &tmp_value)  zval_dtor(value);
zval_dtor(obj->diff->n, value);
if (value == &tmp_value)  zval_dtor(&tmp_value);
zval_dtor(&value);
val = Z_LVAL_P(value); if (val == &tmp_value)  zval_dtor(val);
found = 0; if (value == &tmp_value)  zval_dtor(value);
if (obj->diff->n == NULL)  zval_dtor(value);
obj->diff->n = Z_LVAL_P(value, &tmp_value);
result = Z_LVAL_P(value);
obj->diff->n = zval_dtor(value);
break;
find = 1; obj->diff->n = Z_LVAL_P(value);
result = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
tmp_value = value; zval_dtor(value);
if (value->type!= IS_STR)  tmp_value = *value;
if (value->type!= IS_LONG)  tmp_value = *value;
zval_dtor(value); obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value)  zval_dtor(value, 0);
if (value == &tmp_value)  zval_dtor(value); return 0;
return 0;
p = Z_LVAL_P(value); if (p == &tmp_value) zval_dtor(value);
zval_dtor = Z_LVAL_P(value);
if (value == &tmp_value)  zval_dtor(value); return;
found = 1; zval_dtor(value);
if (value->type == IS_STR)  tmp_value = *value;
found = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
convert_to_string(&tmp_value);
zval_dtor(obj->diff, value);
if (value->type == IS_STRING)  zval_dtor(value);
if (value->type == IS_LONG)  tmp_value = *value;
zval_dtor (value);
tmp_value = Z_LVAL_P(value);
zval_dtor((void *)value);
else  zval_dtor(value);
*value = &tmp_value;
tmp_value = tmp_value;
if (value == &tmp_value)  zval_dtor(value); return 1;
value = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
zval_dtor(obj->diff);
zval_dtor();
n = Z_LVAL_P(value); if (n == 0)  zval_dtor(value);
if (value == &tmp_value) obj->diff->n = Z_LVAL_P(value);
tmp_value = 0;
obj->diff->n = Z_LVAL_P(value->type);
if (value == &tmp_value)  zval_dtor((void *)value);
zval_dtor(value, Z_LVAL_P(value));
else zval_dtor(value);
p = Z_LVAL_P(value);
free(value);
n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
dtor = Z_LVAL_P(value);
if (value == &tmp_value)  zval_dtor(value->type);
found = 1; if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) zval_dtor(value);
n = Z_LVAL_P(value); if (n == &tmp_value) zval_dtor(value);
zval_dtor(obj, value);
val = Z_LVAL_P(value); if (val == &tmp_value)  zval_dtor(value);
if (tmp_value == 0)  zval_dtor(tmp_value);
obj->diff->value = Z_LVAL_P(value);
return 1;
value = &tmp_value; zval_dtor(value);
if (obj->diff->n == Z_LVAL_P(value)) zval_dtor(value);
if(value == &tmp_value) zval_dtor(value);
found = Z_LVAL_P(value);
value = tmp_value;
found = 0; zval_dtor(value);
Z_LVAL_P(value);
find = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)
else  obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value)  zval_dtor(value); break;
value = &tmp_value; obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value)  zval_dtor(value);  else
if (val == &tmp_value)  zval_dtor(val);
val = Z_LVAL_P(value);
if (value == &tmp_value)  zval_dtor( value );
zval_dtor(value->type);
if (value == &tmp_value)  zval_dtor(&value);
zval_dtor(value,0);
found = 0; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)
if (obj->diff->n == value)  zval_dtor(value);
if (value == &tmp_value) found = 1; obj->diff->n = Z_LVAL_P(value);
obj->diff->n = Z_LVAL_P(value); value = &tmp_value;
if (value!= 0)  zval_dtor(value);
obj->diff->value = value;
if (!value)  zval_dtor(value);
find = 1; if (value == &tmp_value)  zval_dtor(value);
i = 0;
if (value->type == IS_LONG)  zval_dtor(value);
return (0);
if (value == &tmp_value)  zval_dtor(value);  found = 1;
if (value == &tmp_value)  zval_dtor(value); return (0);
if (value == &tmp_value)  zval_dtor(value, &tmp_value);
if (obj->diff->n == &tmp_value)  zval_dtor(value);
value = &tmp_value; found = 1; obj->diff->n = Z_LVAL_P(value);
if (tmp_value == &tmp_value)  zval_dtor(tmp_value);
l = Z_LVAL_P(value); if (l == &tmp_value)  zval_dtor(l);
p = Z_LVAL_P(value); if (p == NULL)  zval_dtor(value);
if (value == &tmp_value)  obj->diff->n = Z_LVAL_P(value);
a = Z_LVAL_P(value); if (a == &tmp_value)  zval_dtor(a);
p = Z_LVAL_P(value); if (p == &tmp_value) zval_dtor(p);
obj->diff->n = Z_LVAL_P(value); if (!value)  zval_dtor(value);
obj->diff->n = Z_LVAL_P(value);  else  zval_dtor(value);
n = Z_LVAL_P(value); if (n == &tmp_value)  zval_dtor(n);
d = Z_LVAL_P(value); if (d == &tmp_value)  zval_dtor(d);
data = Z_LVAL_P(value); if (data == &tmp_value)  zval_dtor(value);
if (obj->diff->n == 0)  zval_dtor(&tmp_value);
if (value == &tmp_value)  zval_dtor(value);  else  found = 1;
found = 1; obj->diff->n = Z_LVAL_P(value, &tmp_value);
if (obj->diff->n == 0)  zval_dtor(obj->diff->n);
if (obj->diff->n == Z_LVAL_P)  zval_dtor(value);
if (value->type == IS_STRING)  tmp_value = *value;  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING)  tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0)  zval_dtor(obj->diff->value);  else  obj->diff->n = Z_LVAL_P(value);
obj->diff->n = Z_LVAL_P(value);  if (value == &tmp_value)  zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
if (value->type!= IS_STRING)  tmp_value = *value;  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL)  zval_dtor(value);  else  found = 1;  obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value)  zval_dtor(tmp_value);  else  zval_dtor(value);
if (value == &tmp_value)  zval_dtor(value);  else  /* *n't */ if (is_nsymbol(*value))  /*n't */ if (is_nsymbol(*value))  /*n't */ if (is_nsymbol(*value))  /*n't */ if (is_nsymbol(*value))  /* *n't */ if (is_nsymbol(*value))  /*n't */ if (is_nsymbol(*value))  /*n't */ if (is_nsymbol(*value))  /*n't */ if (is_nsymbol(*value))  /*n't */  /*
if (value->type == IS_STRING)  tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG)  tmp_value = *value;  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value->type!= IS_STRING)  tmp_value = *value;  convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value)  zval_dtor(value);  else  obj->diff->n = Z_LVAL_P(value);
if (!__func__)  obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
else  if (value->type!= IS_STRING)  tmp_value = *value;  convert_to_string(&tmp_member); member = &tmp_member;
else  /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
if (value->type == IS_STR)  tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if ((value == &tmp_value) && (!value->type == IS_STRING))  zval_dtor(value);
zval_dtor((const struct date_interval_object *)obj->diff->value);
tmp_value = value;  zval_dtor(value);
if (!__free(value))  zval_dtor(value);
/* * The npbd isn't called properly for npbd */ npbd = ((npbd = npbd->npbd)->pbd->pbd->pbd_pbd); if (npbd == 0)  npbd = (struct npbd *)((npbd)->pbd->pbd->pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_p
if (obj->diff->n == NULL)  zval_dtor(&tmp_value);
if (value->type == IS_STR)  tmp_value = *value;  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING)  tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0)    zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
/* If a tmp_value is non-zero, the value is only equal to * a Z_LVAL_P. */ if (value == &tmp_value)  zval_dtor(value);
if (value->type!= IS_STRING)  tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else  if (value->type!= IS_STRING)  tmp_value = *value;  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (!value)  return (0);
/* XXX - the value is not the value, and we need to return a zero string */ if (value == &tmp_value)  zval_dtor(value);
if (value->type == IS_STRING)  tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
zval_dtor(value, m);
else  zval_dtor(&tmp_value);
/* find = 1; */ if (value->type!= IS_STRING)  tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
/* XXX nsDependentString* values are converted into a tmp_value. */ obj->diff->n = 0; if (value == &value)  zval_dtor(value);
else  if (value->type == IS_STRING)  tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m)  if (strcmp(Z_STRVAL_P(member), m) == 0)
if ((value->type!= IS_STRING) && obj->diff->n == 0)  zval_dtor(value);
if (value->type == IS_STRING)  tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type == IS_STRING)  tmp_value = *value;  convert_to_string(&tmp_value); member = &tmp_member;
else  if ((value->type!= IS_STRING) && (value->type!= IS_LONG))  zval_dtor(value);  convert_to_string(&tmp_member); member = &tmp_member;
tmp_value = value; if (value == &tmp_value)  zval_dtor(tmp_value);
if (obj->diff->n == NULL)  if (value == &tmp_value)  zval_dtor(value);
if (! obj->diff->n)  /* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
/* Now that we've got it out! */
if ((value == &tmp_value) || (value->type == IS_LONG))  zval_dtor(value);
if ((value == &tmp_value) || (obj->diff->n == NULL))  zval_dtor(value);
/* find=1; */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING)  tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);  else  obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)  zval_dtor(value);
if (value->type == IS_LONG)  tmp_value = *value;  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type == IS_STRING)  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING))  tmp_value = *value;  zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING)  tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;  obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value)  zval_dtor(value);

else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) zval_dtor(&tmp_value);
<else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_value); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
<obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
<else if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) <zval_dtor(value); <else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); &else &found = 1;
if (obj->diff->n == NULL) <zval_dtor(&tmp_value);
if (value == &tmp_value) zval_dtor(value); return 1;
if (value!= 0) &zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); <else zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else <found = 1;
if (value == &tmp_value) <zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else <zval_dtor(value);
if ((value->type!= IS_STRING) && obj->diff->n == 0) zval_dtor(value);
d = Z_LVAL_P(value); if (d == &tmp_value) &zval_dtor(d);
if (obj->diff->n == NULL) &zval_dtor(value); &else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else &obj->diff->n = Z_LVAL_P(value);
<else &if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) <zval_dtor(value);
&else <if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
obj->diff->n = Z_LVAL_P(value); else <zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == NULL) &if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value;
&obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) <zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else <if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&else zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if(value == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value; <convert_to_string(&tmp_value); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); &else obj->diff->n = Z_LVAL_P(value);
&else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
found = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value) &zval_dtor(value);
else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) &zval_dtor(value); <else &obj->diff->n = Z_LVAL_P(value);
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value!= &tmp_value) <zval_dtor(value);
else &if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else &if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
if (value!= &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (obj->diff->n == NULL) &zval_dtor(value); &else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == value) &zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); <else &zval_dtor(value);
if (obj->diff->n == Z_LVAL_P(value)) <zval_dtor(value);
if (tmp_value == 0) &zval_dtor(tmp_value);
else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
/* If a tmp_value is non-zero, the value is only equal to * a Z_LVAL_P. */ if (value == &tmp_value) &zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) zval_dtor(value);
<if (value->type == IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == NULL) zval_dtor(value);
if ((value == &tmp_value) && (!value->type == IS_STRING)) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) zval_dtor(value); else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) tmp_value = *value; convert_to_string(&tmp_value); member = &tmp_member;
else if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (obj->diff->n == NULL) zval_dtor(value); else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (val == &tmp_value) <zval_dtor(val);
&else <if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) <tmp_value = *value;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); else zval_dtor(value);
else <if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); &else
if (value == &tmp_value) <zval_dtor(value); <else <found = 1;
&if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
n = Z_LVAL_P(value); if (n == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); &else &obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (obj->diff->n == value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == value) zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); &else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); &else <zval_dtor(value);
else zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (obj->diff->n == Z_LVAL_P) zval_dtor(value);
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); else found = 1;
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == &tmp_value) <zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
if ((value == &tmp_value) || (value->type == IS_LONG)) zval_dtor(value);
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == Z_LVAL_P) <zval_dtor(value);
&else &zval_dtor(&tmp_value);
if (value->type == IS_LONG) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (obj->diff->n == NULL) &zval_dtor(value); else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
&else zval_dtor(&tmp_value);
if (value->type == IS_LONG) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type == IS_LONG) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
d = Z_LVAL_P(value); if (d == &tmp_value) <zval_dtor(d);
<else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == value) <zval_dtor(value);
if (tmp_value == &tmp_value) <zval_dtor(tmp_value);
if (value->type == IS_LONG) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (obj->diff->n == NULL) zval_dtor(value); &else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<if (value == &tmp_value) <zval_dtor(value);
else if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value);
<if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else <if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
&if (value == &tmp_value) &zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type == IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if(value == &tmp_value) &zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); else <zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
else &if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
n = Z_LVAL_P(value); if (n == 0) &zval_dtor(value);
if (value->type == IS_STR) tmp_value = *value;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&else if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) <zval_dtor(value);
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) zval_dtor(value); else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
n = Z_LVAL_P(value); if (n == &tmp_value) zval_dtor(n);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); &else zval_dtor(value);
l = Z_LVAL_P(value); if (l == &tmp_value) <zval_dtor(l);
else <if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
result = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(&tmp_value);
if (value->type == IS_LONG) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else &if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
obj->diff->n = value; if (value == &tmp_value) &zval_dtor(value);
<if (value->type == IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
value = &tmp_value;
if (value == &tmp_value) <zval_dtor(value); return 0;
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); <else found = 1;
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
if (value == NULL) &zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); &else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); <else
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) <tmp_value = *value;
if (value == &tmp_value) <zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value, &tmp_value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) &zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else &obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
if (value->type!= IS_LONG) &tmp_value = *value;
if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value->type == IS_LONG) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &zval_dtor(&tmp_value);
if (!value) zval_dtor(value);
/* If a tmp_value is non-zero, the value is only equal to * a Z_LVAL_P. */ if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(&tmp_value);
if (obj->diff->n == NULL) &zval_dtor(value); <else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<if (value->type == IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); &else <found = 1;
else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else &if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value;
if (obj->diff->n == 0) zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
if (! obj->diff->n) /* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) zval_dtor(value, 0);
<if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == NULL) <zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) <if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(&value);
if (value == &tmp_value) &zval_dtor(value); else &obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); &else zval_dtor(value);
<obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) zval_dtor(value);
else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
n = Z_LVAL_P(value); if (n == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<if (value == &tmp_value) zval_dtor(value);
&else &zval_dtor(value);
tmp_value = value; <zval_dtor(value);
if (value == &tmp_value) <zval_dtor( value );
else <if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); return;
<obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); <else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else <if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
&if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) zval_dtor(value); <else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (value->type == IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); <else found = 1;
/* * The npbd isn't called properly for npbd */ npbd = ((npbd = npbd->npbd)->pbd->pbd->pbd_pbd); if (npbd == 0) npbd = (struct npbd *)((npbd)->pbd->pbd->pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_p
if (! obj->diff->n) &/* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_LONG) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
<else <if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (!value) <return (0);
<if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) <zval_dtor(value); else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else <if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if(value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor((void *)value);
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
&if (value->type == IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) &zval_dtor(value); <else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == NULL) zval_dtor(value); else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value) &zval_dtor(value);
if (value) <zval_dtor(value);
else if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) zval_dtor(value); &else found = 1;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (! obj->diff->n) &/* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
&&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == value) <zval_dtor(value);
<else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
found = 1; if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == Z_LVAL_P(value)) <zval_dtor(value);
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value == &tmp_value) zval_dtor(value); <else obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == Z_LVAL_P(value)) zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
else <if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
/* XXX nsDependentString* values are converted into a tmp_value. */ obj->diff->n = 0; if (value == &value) zval_dtor(value);
&else if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
&else <if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else <if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else &if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); <else zval_dtor(value);
n = Z_LVAL_P(value); if (n == &tmp_value) &zval_dtor(n);
if (obj->diff->n == NULL) <zval_dtor(value); <else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
p = Z_LVAL_P(value); if (p == &tmp_value) zval_dtor(p);
<else <zval_dtor(&tmp_value);
if (value == &tmp_value) <zval_dtor(value); <else obj->diff->n = Z_LVAL_P(value);
<else <if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value!= &tmp_value) &zval_dtor(value);
if (value == &tmp_value) zval_dtor(&tmp_value);
<if (value->type == IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) &zval_dtor(value); &else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); else <found = 1;
if (value == tmp_value) &zval_dtor(value);
&else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else <if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
&if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (!value) <zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_LONG) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else <obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STR) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); <else <zval_dtor(value);
&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
found = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
tmp_value = value; if (value == &tmp_value) <zval_dtor(tmp_value);
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
<else &zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); &else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); <else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else &obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) <zval_dtor(value); <else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_STRING) &zval_dtor(value);
if (value->type == IS_LONG) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value == &tmp_value) zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
found = 1; if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); <else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else &if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == NULL) &zval_dtor(value); else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else zval_dtor(value);
n = Z_LVAL_P(value); if (n == 0) zval_dtor(value);
if (value->type == IS_STRING) &zval_dtor(value);
if (!value) <zval_dtor(value);
else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) zval_dtor(value); <else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
&else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type!= IS_STR) <tmp_value = *value;
l = Z_LVAL_P(value); if (l == &tmp_value) &zval_dtor(l);
if (value == &tmp_value) <zval_dtor(value); &else &obj->diff->n = Z_LVAL_P(value);
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
<else <obj->diff->n = Z_LVAL_P(value);
<else if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (tmp_value == 0) <zval_dtor(tmp_value);
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor( value );
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
&else if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); <else
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); return 1;
<<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
else <if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else &zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) <zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); <else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (value->type == IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) <zval_dtor(value); &else &found = 1;
val = Z_LVAL_P(value); if (val == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if(value == &tmp_value) <zval_dtor(value);
else if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
obj->diff->n = Z_LVAL_P(value); <else <zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); <else &obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else <if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) <zval_dtor(value); return 1;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
/* find = 1; */ if (value->type!= IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
&obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); else <zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) &zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
p = Z_LVAL_P(value); if (p == &tmp_value) <zval_dtor(value);
else if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
&else if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<else &if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else &if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* find=1; */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
else <if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
<else <if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
<else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
/* find = 1; */ if (value->type!= IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (tmp_value == &tmp_value) &zval_dtor(tmp_value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
<else <zval_dtor(value);
<if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value->type == IS_STRING) <tmp_value = *value; convert_to_string(&tmp_value); member = &tmp_member;
if (value == tmp_value) &zval_dtor(value);
if (value->type == IS_STRING) &tmp_value = *value;
if (obj->diff->n == NULL) zval_dtor(value); <else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); return;
p = Z_LVAL_P(value); if (p == NULL) &zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); &else &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) zval_dtor(value); <else found = 1;
&else <obj->diff->n = Z_LVAL_P(value);
val = Z_LVAL_P(value); if (val == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else <zval_dtor(value);
<else &if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); else
else <if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<else &zval_dtor(value);
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else &if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<else &if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (!__free(value)) &zval_dtor(value);
&else if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (!value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (obj->diff->n == NULL) &zval_dtor(value); &else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* find = 1; */ if (value->type!= IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&else <if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value!= 0) zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
found = 1; if (value == &tmp_value) <zval_dtor(value);
<else if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); <else &found = 1;
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(&tmp_value);
data = Z_LVAL_P(value); if (data == &tmp_value) &zval_dtor(value);
if (value->type!= IS_STR) &tmp_value = *value;
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
<else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
&if (value->type == IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) &zval_dtor(value);
if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
&else &if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value == &tmp_value) <zval_dtor(value); <found = 1;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
val = Z_LVAL_P(value); if (val == &tmp_value) &zval_dtor(value);
if (tmp_value == 0) zval_dtor(tmp_value);
&obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value!= &tmp_value) &zval_dtor(value);
if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
else &if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) <zval_dtor(value);
&else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else <obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
<if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) &zval_dtor(value); &else &obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) &zval_dtor(value); found = 1;
if (tmp_value == 0) &zval_dtor(tmp_value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); &else <zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* find = 1; */ if (value->type!= IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value == &tmp_value) <zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(&tmp_value);
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) &zval_dtor(obj->diff->n);
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
d = Z_LVAL_P(value); if (d == &tmp_value) zval_dtor(d);
if (obj->diff->n == 0) &zval_dtor(value);
if (! obj->diff->n) </* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); &else obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == 0) zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); <else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); else <zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
n = Z_LVAL_P(value); if (n == 0) &zval_dtor(value);
if (value->type == IS_STR) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); else zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); <else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else &if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if ((value == &tmp_value) || (obj->diff->n == NULL)) zval_dtor(value);
if (obj->diff->n == &tmp_value) zval_dtor(value);
else &if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX - the value is not the value, and we need to return a zero string */ if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); return 0;
a = Z_LVAL_P(value); if (a == &tmp_value) zval_dtor(a);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) zval_dtor(value);
<else &if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) <zval_dtor(value); <else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
&else &if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
data = Z_LVAL_P(value); if (data == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); <else obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); &else &found = 1;
<else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<else zval_dtor(&tmp_value);
if (value->type == IS_STRING) tmp_value = *value; &convert_to_string(&tmp_value); member = &tmp_member;
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value)
if (value == &tmp_value) &zval_dtor(value); return (0);
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
else <if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) &tmp_value = *value;
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
/* find=1; */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (val == &tmp_value) &zval_dtor(val);
if (value->type == IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_value); member = &tmp_member;
if (obj->diff->n == Z_LVAL_P(value)) &zval_dtor(value);
else if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
/* XXX - the value is not the value, and we need to return a zero string */ if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* find=1; */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); <else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
else &zval_dtor(value);
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
if (! obj->diff->n) /* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value->type == IS_LONG) tmp_value = *value;
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
<else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) &zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) &zval_dtor(value); &found = 1;
<else <if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); &else zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == &tmp_value) &zval_dtor(value);
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
/* * The npbd isn't called properly for npbd */ npbd = ((npbd = npbd->npbd)->pbd->pbd->pbd_pbd); if (npbd == 0) <npbd = (struct npbd *)((npbd)->pbd->pbd->pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_p
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); return (0);
data = Z_LVAL_P(value); if (data == &tmp_value) <zval_dtor(value);
if (value->type == IS_LONG) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); <else zval_dtor(value);
<&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value->type == IS_STR) &tmp_value = *value;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) <zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else &if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
p = Z_LVAL_P(value); if (p == &tmp_value) <zval_dtor(p);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value == &tmp_value) zval_dtor(value); return (0);
&else &if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (!value) &zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) <zval_dtor(value); else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) <zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); else <obj->diff->n = Z_LVAL_P(value);
&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
found = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STR) <tmp_value = *value;
if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;
<else obj->diff->n = Z_LVAL_P(value);
else if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (! obj->diff->n) &/* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
<else if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) &zval_dtor(value); &else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); <else <obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) &zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == 0) <zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); <else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) &zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (obj->diff->n == &tmp_value) <zval_dtor(value);
<else <if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STR) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) zval_dtor(value, &tmp_value);
if (value == &tmp_value) &zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if ((value == &tmp_value) || (value->type == IS_LONG)) &zval_dtor(value);
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if ((value == &tmp_value) || (value->type == IS_LONG)) <zval_dtor(value);
if (value == 0) &zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) <zval_dtor(value); &else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else &if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
a = Z_LVAL_P(value); if (a == &tmp_value) &zval_dtor(a);
if (value->type!= IS_STRING) <tmp_value = *value;
<else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); &else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) <zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else &if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
<&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); else &zval_dtor(value);
<else <if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
if (value->type!= IS_STR) tmp_value = *value;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); else &zval_dtor(value);
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
tmp_value = value; if (value == &tmp_value) &zval_dtor(tmp_value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); break;
else &obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
&if (value->type == IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == NULL) zval_dtor(value); <else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value!= &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); break;
if (value == &tmp_value) &zval_dtor(value); <else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
found = 1; if (value == &tmp_value) &zval_dtor(value);
&else if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) <zval_dtor(&tmp_value);
else <if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if ((value == &tmp_value) || (obj->diff->n == NULL)) <zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&else <zval_dtor(&tmp_value);
&else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) &zval_dtor(value); else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); &else found = 1;
if (value == &tmp_value) obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) &zval_dtor(value->type);
obj->diff->n = Z_LVAL_P(value); &else &zval_dtor(value);
if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_value = *value;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
found = 1; if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); &else obj->diff->n = Z_LVAL_P(value);
n = Z_LVAL_P(value); if (n == 0) zval_dtor(value);
a = Z_LVAL_P(value); if (a == &tmp_value) <zval_dtor(a);
if (obj->diff->n == NULL) <zval_dtor(value); &else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
find = 1; if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value == &tmp_value) <zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) <zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
obj->diff->n = Z_LVAL_P(value); if (!value) &zval_dtor(value);
else <if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
obj->diff->n = Z_LVAL_P(value); <else &zval_dtor(value);
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) zval_dtor(value); <else &found = 1;
if (value == &tmp_value) zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
p = Z_LVAL_P(value); if (p == NULL) zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
if (obj->diff->n == NULL) <if (value == &tmp_value) &zval_dtor(value);
<else if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); return 1;
&else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
&<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
value = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); found = 1;
&else obj->diff->n = Z_LVAL_P(value);
&else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value, 0);
<else &if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
tmp_value = value; zval_dtor(value);
<else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) &zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (!value) return (0);
if (value->type == IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == Z_LVAL_P(value)) &zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); <else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value == tmp_value) <zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value->type == IS_STRING) <zval_dtor(value);
n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); &else <obj->diff->n = Z_LVAL_P(value);
if (! obj->diff->n) </* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value);
if (value == tmp_value) <zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); <else &obj->diff->n = Z_LVAL_P(value);
&else &if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) <zval_dtor(value); &else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
find = 1; if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(&tmp_value);
<else &if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type!= IS_LONG) tmp_value = *value;
if ((value->type!= IS_STRING) && obj->diff->n == 0) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (!value) <zval_dtor(value);
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
found = 0; if (value == &tmp_value) zval_dtor(value);
else &if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
n = Z_LVAL_P(value); if (n == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
found = 0; if (value == &tmp_value) <zval_dtor(value);
else <if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) &zval_dtor(value); <else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
<if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if(value == &tmp_value) &zval_dtor(value);
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
val = Z_LVAL_P(value); if (val == &tmp_value) zval_dtor(val);
if (tmp_value == 0) <zval_dtor(tmp_value);
if (obj->diff->n == NULL) zval_dtor(value); &else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
p = Z_LVAL_P(value); if (p == &tmp_value) &zval_dtor(p);
p = Z_LVAL_P(value); if (p == NULL) <zval_dtor(value);
&else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); else zval_dtor(value);
if (value->type == IS_STR) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value);
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
obj->diff->n = Z_LVAL_P(value); else zval_dtor(value);
if (!value) &zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value->type);
if (value == &tmp_value)
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else &if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
/* If a tmp_value is non-zero, the value is only equal to * a Z_LVAL_P. */ if (value == &tmp_value) zval_dtor(value);
else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
else &if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) zval_dtor(value); &else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == 0) <zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
<if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
<else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_value); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&if (value == &tmp_value) <zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); <else &zval_dtor(value);
&else <if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else zval_dtor(&tmp_value);
if (value->type == IS_LONG) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value == &tmp_value) <zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else <if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
found = 0; if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
<else if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (obj->diff->n == NULL) <zval_dtor(value); &else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) &if (value == &tmp_value) &zval_dtor(value);
value = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
found = 0; if (value == &tmp_value) <zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); <else <zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) &zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) <zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else &if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
<else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); <found = 1;
if(value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); return;
if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
<else <zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_LONG) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
obj->diff->n = Z_LVAL_P(value); &else <zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
else <if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); &else
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == NULL) <zval_dtor(value); else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); <else zval_dtor(value);
obj->diff->n = value; if (value == &tmp_value) <zval_dtor(value);
&if (value->type == IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
result = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
&else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value->type!= IS_STRING) <tmp_value = *value;
&if (value == &tmp_value) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
<else &obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) zval_dtor(value); break;
if (value->type == IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); &else <found = 1;
if (value == &tmp_value) zval_dtor(value); else obj->diff->n = Z_LVAL_P(value);
else &if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
obj->diff->n = value; if (value == &tmp_value) zval_dtor(value);
<if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else &found = 1;
if (obj->diff->n == NULL) zval_dtor(value); &else &found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); else <found = 1;
if (value == tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); &else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); break;
if (value->type == IS_LONG) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&else &if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); <else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) &tmp_value = *value; convert_to_string(&tmp_value); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) zval_dtor(value);
if (value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else &if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else <if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
&else &if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_LONG) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
tmp_value = value; &zval_dtor(value);
else &if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor((void *)value);
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); &else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (!__free(value)) zval_dtor(value);
<else zval_dtor(value);
find = 1; if (value == &tmp_value) &zval_dtor(value);
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
&else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); else found = 1;
<else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor( value );
<else <if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else &zval_dtor(&tmp_value);
else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == 0) <zval_dtor(obj->diff->n);
<if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
<else <if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
<if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if ((value == &tmp_value) && (!value->type == IS_STRING)) <zval_dtor(value);
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value == 0) zval_dtor(value);
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
&else if (value->type!= IS_STRING) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else <if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) zval_dtor(value);
if (value == tmp_value) zval_dtor(value);
<else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) <zval_dtor(value->type);
if (value == &tmp_value) &zval_dtor(value, 0);
<else if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
n = Z_LVAL_P(value); if (n == 0) <zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); <else <obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
<else <if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); return;
if (value == &tmp_value) &zval_dtor(value); break;
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->n);
obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); else obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (!value) &return (0);
if (value == &tmp_value) &zval_dtor(value); <else
&else <if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) <zval_dtor(value); &else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); <else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(value);
if (value->type == IS_LONG) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
<else zval_dtor(value);
if (value!= 0) <zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); return 1;
if (obj->diff->n == NULL) if (value == &tmp_value) <zval_dtor(value);
if (obj->diff->n == 0) zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) zval_dtor(value); return 0;
obj->diff->n = Z_LVAL_P(value); &else zval_dtor(value);
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); return 1;
<else <if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <obj->diff->n = Z_LVAL_P(value);
if (!__free(value)) <zval_dtor(value);
else &if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
else &if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STR) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == 0) <zval_dtor(value);
if (value == 0) &zval_dtor(value);
val = Z_LVAL_P(value); if (val == &tmp_value) &zval_dtor(val);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value->type == IS_LONG) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value == &tmp_value) <zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
found = 0; if (value == &tmp_value) &zval_dtor(value);
&else <if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if ((value == &tmp_value) || (obj->diff->n == NULL)) &zval_dtor(value);
if (tmp_value == 0) zval_dtor(tmp_value);
if (value == &tmp_value) <zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_STR) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else <obj->diff->n = Z_LVAL_P(value);
if (! obj->diff->n) /* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
else &/* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_LONG) <zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); &else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
val = Z_LVAL_P(value); if (val == &tmp_value) <zval_dtor(val);
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value->type == IS_LONG) zval_dtor(value);
<else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) zval_dtor(value); else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) &if (value == &tmp_value) <zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value) <zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); &else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
&else &if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) &zval_dtor(value); &else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value) zval_dtor(value);
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == &tmp_value) &zval_dtor(value);
else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
&if (!__func__) &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (val == &tmp_value) zval_dtor(val);
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else <if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
found = 1; if (value == &tmp_value) <zval_dtor(value);
&else &if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); <else &zval_dtor(value);
if (value->type == IS_LONG) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else &if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) <zval_dtor(value); <else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(&tmp_value);
if (value == &tmp_value) &zval_dtor(value); &else found = 1;
if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
else </* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(&value);
if (value == &tmp_value) zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else &if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); <else <obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
find = 1; if (value == &tmp_value) <zval_dtor(value);
tmp_value = value; if (value == &tmp_value) zval_dtor(tmp_value);
&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == 0) zval_dtor(value);
else <zval_dtor(&tmp_value);
if (value == &tmp_value) &zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
/* XXX - the value is not the value, and we need to return a zero string */ if (value == &tmp_value) <zval_dtor(value);
<&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (obj->diff->n == NULL) zval_dtor(value); <else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else <if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
else <if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
n = Z_LVAL_P(value); if (n == 0) <zval_dtor(value);
if (value == NULL) <zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) <zval_dtor(tmp_value); <else <zval_dtor(value);
/* find = 1; */ if (value->type!= IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
result = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member;
<obj->diff->n = Z_LVAL_P(value); &if (value == &tmp_value) &zval_dtor(value);
if (value->type == IS_LONG) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (tmp_value == &tmp_value) zval_dtor(tmp_value);
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
if (value!= &tmp_value) <zval_dtor(value);
if (value->type == IS_STR) <tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
&else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_STR) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&else if (value->type!= IS_STRING) <tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) <zval_dtor(value); &else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else <if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == NULL) <zval_dtor(value); &else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (value == &tmp_value) zval_dtor(value);
<else if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == NULL) <if (value == &tmp_value) <zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) &zval_dtor(value, 0);
n = Z_LVAL_P(value); if (n == &tmp_value) <zval_dtor(n);
if (value->type == IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); else
obj->diff->n = Z_LVAL_P(value);
<else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
/* find = 1; */ if (value->type!= IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_LONG) &zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (!value) zval_dtor(value);
else &if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type!= IS_STRING) <tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); &else <obj->diff->n = Z_LVAL_P(value);
/* XXX nsDependentString* values are converted into a tmp_value. */ obj->diff->n = 0; if (value == &value) <zval_dtor(value);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) zval_dtor(value); &else <found = 1;
if (!__func__) obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
else obj->diff->n = Z_LVAL_P(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) <zval_dtor(value); &found = 1;
if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
if (obj->diff->n == NULL) <zval_dtor(value); else &found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else &if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
<<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); else &zval_dtor(value);
<obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
<else <if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) zval_dtor(value); &found = 1;
if (value == &tmp_value) &zval_dtor(value); else &found = 1;
if (value->type == IS_LONG) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
p = Z_LVAL_P(value); if (p == &tmp_value) &zval_dtor(value);
&else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (! obj->diff->n) </* XXX */ found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
value = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value->type == IS_LONG) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) &zval_dtor(value); &else <obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) <zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
/* find = 1; */ if (value->type!= IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (obj->diff->n == NULL) <zval_dtor(value); else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); else obj->diff->n = Z_LVAL_P(value);
else <zval_dtor(value);
&else &if (value->type!= IS_STRING) tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor((void *)value);
if (value->type == IS_STRING) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) &zval_dtor(value);
if (value->type == IS_LONG) <zval_dtor(value);
&if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); else
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&else if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); else <found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); &else <zval_dtor(value);
if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value, 0);
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
<else &if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_LONG) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); else /* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == value) &zval_dtor(value);
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_LONG) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value == &tmp_value) <zval_dtor(value); &else </* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) &zval_dtor(value, &tmp_value);
if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else &found = 1;
else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
if (value == NULL) zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value); <else found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == NULL) zval_dtor(value); else found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
if (value->type == IS_LONG) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
<if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else &obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
<else <if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else <obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) &zval_dtor(value); <else <found = 1;
&else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
find = 1; if (value == &tmp_value) &zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
<else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (obj->diff->n == NULL) zval_dtor(&tmp_value);
if (obj->diff->n == &tmp_value) zval_dtor(value);
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) <zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
/* find = 1; */ if (value->type!= IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (obj->diff->n == NULL) &zval_dtor(value); <else found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else <zval_dtor(value);
<else <if (value->type!= IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) &obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) &zval_dtor(value); <else &found = 1;
else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if ((value->type!= IS_STRING) && obj->diff->n == 0) <zval_dtor(value);
&else if (value->type!= IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
/* XXX nsDependentString* values are converted into a tmp_value. */ obj->diff->n = 0; if (value == &value) &zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else &obj->diff->n = Z_LVAL_P(value);
l = Z_LVAL_P(value); if (l == &tmp_value) zval_dtor(l);
<else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) <zval_dtor(value);
else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type!= IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
find = 1; if (value == &tmp_value) zval_dtor(value);
obj->diff->n = Z_LVAL_P(value); else &zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
/* XXX */ if ((value->type == IS_LONG) || (value->type == IS_STRING)) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<if (value->type == IS_STRING) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) &tmp_value = *value;
&else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == NULL) zval_dtor(value); &else <found = 1; &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value); <else </* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value->type == IS_LONG) <tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (value->type!= IS_LONG) <tmp_value = *value;
if (value == &tmp_value) zval_dtor(value); return 0;
if (obj->diff->n == Z_LVAL_P(value)) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &&zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
if (value == &tmp_value) zval_dtor(value); return;
if (value == &tmp_value) &zval_dtor(value); return 0;
if (value == &tmp_value) <zval_dtor(&value);
&else /* * This is a field that has been mapped to an Object * so the object * gets * it mapped to a new Object. */ obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); found = 1;
if (value->type == IS_STRING) &tmp_value = *value; <convert_to_string(&tmp_value); member = &tmp_member;
&else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == NULL) &zval_dtor(value);
if (obj->diff->n == NULL) &zval_dtor(value);
if (obj->diff->n == NULL) if (value == &tmp_value) zval_dtor(value);
&else <if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value == &tmp_value) zval_dtor(value); <else <found = 1;
if (value == &tmp_value) zval_dtor(value); break;
/* find = 1; */ if (value->type!= IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC);
if (obj->diff->n == 0) &zval_dtor(value);
else if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) zval_dtor(value); <found = 1;
obj->diff->n = Z_LVAL_P(value); <if (value == &tmp_value) &zval_dtor(value);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
<else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
&else &if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (obj->diff->n == NULL) &zval_dtor(value); <else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); else obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value);
<if (obj->diff->n == 0) zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) <zval_dtor(value);
<else if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&if (obj->diff->n == 0) <zval_dtor(obj->diff->value); &else obj->diff->n = Z_LVAL_P(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (obj->diff->n == NULL) <zval_dtor(value); &else <found = 1; obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type == IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
<else &if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) zval_dtor(tmp_value); &else &zval_dtor(value);
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else &zval_dtor(value);
&if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) zval_dtor(value);
else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); else <obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) <zval_dtor(value); else found = 1;
if (value->type == IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); &else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); <else /* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
&if (obj->diff->n == 0) zval_dtor(obj->diff->value); else &obj->diff->n = Z_LVAL_P(value);
if (value == &tmp_value) <zval_dtor(value); return;
<if (value->type == IS_STRING) &tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); if (strcmp(Z_STRVAL_P(member), m) == 0) &<zval_copy_ctor(&tmp_value); convert_to_string(&tmp_value);
else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
<else &if (value->type == IS_STRING) tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
if (value->type == IS_LONG) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC);
if (value->type == IS_LONG) &tmp_value = *value;
if (obj->diff->n == NULL) <zval_dtor(value); &else &found = 1; <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) tmp_value = *value;
<else &if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); else &/* *n't */ if (is_nsymbol(*value)) &/*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
else if (value->type!= IS_STRING) <tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
p = Z_LVAL_P(value); if (p == &tmp_value) zval_dtor(value);
&else <if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) zval_dtor(value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type!= IS_STRING) tmp_value = *value;
<else &if (value->type!= IS_STRING) &tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_LONG) &zval_dtor(value);
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); return 0;
if (obj->diff->n == 0) &zval_dtor(&tmp_value);
if (!__func__) <obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) &zval_dtor(value);
&else <if (value->type == IS_STRING) &tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
else if (value->type!= IS_STRING) &tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) &tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); if (!value) <zval_dtor(value);
found = 0; if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; &convert_to_string(&tmp_member); member = &tmp_member;
if (obj->diff->n == Z_LVAL_P) &zval_dtor(value);
if ((value == &tmp_value) && (!value->type == IS_STRING)) zval_dtor(value);
&else if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The output line is converted as a string. */ if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member; &obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_DC); <else &obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value->type!= IS_STRING) tmp_value = *value; <zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value->type == IS_STRING) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* XXX We are also using this option as the last method to check if we are modifying. */ if (tmp_value) &zval_dtor(tmp_value); &else &zval_dtor(value);
else if (value->type!= IS_STRING) tmp_value = *value; <convert_to_string(&tmp_member); member = &tmp_member;
<if (obj->diff->n == 0) &zval_dtor(obj->diff->value); <else <obj->diff->n = Z_LVAL_P(value);
if (value->type == IS_STR) <tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) &zval_dtor(value); &else &/* *n't */ if (is_nsymbol(*value)) </*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /* *n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ if (is_nsymbol(*value)) /*n't */ /*
if (value == &tmp_value) zval_dtor(value, 0);
&else <if (value->type!= IS_STRING) tmp_value = *value; zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
/* * The npbd isn't called properly for npbd */ npbd = ((npbd = npbd->npbd)->pbd->pbd->pbd_pbd); if (npbd == 0) &npbd = (struct npbd *)((npbd)->pbd->pbd->pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_pbd_p
if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
<else if (value->type!= IS_STRING) tmp_value = *value; &zval_copy_ctor(&tmp_value); convert_to_string(&tmp_member); member = &tmp_member;
&else <if (value->type == IS_STRING) <tmp_member = *member; zval_copy_ctor(&tmp_member); convert_to_string(&tmp_member); member = &tmp_member; <obj = (php_interval_obj *)zend_objects_get_address(object TSRMLS_CC); SET_VALUE_FROM_STRUCT(n,m) if (strcmp(Z_STRVAL_P(member), m) == 0)
&else if ((value->type!= IS_STRING) && (value->type!= IS_LONG)) &zval_dtor(value); <convert_to_string(&tmp_member); member = &tmp_member;
&obj->diff->n = Z_LVAL_P(value); if (value == &tmp_value) zval_dtor(value);
if (value == &tmp_value) <zval_dtor(value); else obj->diff->n = Z_LVAL_P(value);
<else <if (value->type!= IS_STRING) &tmp_value = *value; convert_to_string(&tmp_member); member = &tmp_member;
if (value == &tmp_value) <zval_dtor(value); &else
