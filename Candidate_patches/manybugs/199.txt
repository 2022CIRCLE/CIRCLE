golden:
_Py_Finalizing = NULL;
inference:
#endif

setlocale(LC_CTYPE, "");
Py_FatalError("Py_Initialize: can't make first interpreter");
Py_DebugFlag = add_flag(Py_DebugFlag, p);
return;
break;
return 0;
*pstderr = '0';
Py_VerboseFlag = add_flag(Py_VerboseFlag, p);
tstate = PyThreadState_New(interp);
if (!interp) return;
Py_InitializeEx(interp);
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p);
Py_InitializeFlag = add_flag(Py_InitializeFlag, p);
tstate = Py_ThreadState_New(interp);
else Py_FatalError("Py_Initialize: can't make first interpreter");
initialized = 1;
return (0);
*pstderr = NULL;
Py_EnvFlag = add_flag(Py_EnvFlag, p);
if (interp) Py_FatalError("Py_Initialize: can't make first interpreter");
PY_FatalError("Py_Initialize: can't make first interpreter");
if (interp == NULL) return;
#if defined(HAVE_LANGINFO_H) && defined(HAVE_SETLOCALE)
*pstderr = pstderr;
if (initialized) return;
interp = PyInterpreterState_New();
DebugFlag = add_flag(Py_DebugFlag, p);
#else
pstderr = '0';
free(interp);
setlocale(LC_CTYPE, '0');
continue;
PZ_FatalError("Py_Initialize: can't make first interpreter");
if (!interp) break;
(void) Py_InitializeEx(interp);
splx(s);
*pstderr = 0;
#ifdef DEBUG
@endif
Py_Initialized = 1;
if (interp == NULL)
setlocale(LC_CTYPE, NULL);
return -1;
if (interp == NULL) break;
Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
return 1;
if (p!= '0')
"");
if (!interp)  return;
Py_FatalError("Py_Initialize: Can't make first interpreter");
/* XXX */
Py_NotifyFlag = add_flag(Py_NotifyFlag, p);
Py_DestroyFlag = add_flag(Py_DestroyFlag, p);
Py_LocalFlag = add_flag(Py_LocalFlag, p);
pstderr = pstderr;
Py_debugFlag = add_flag(Py_debugFlag, p);
Py_ShutdownFlag = add_flag(Py_ShutdownFlag, p);
Py_InterpreterFlag = add_flag(Py_InterpreterFlag, p);
Py_Error("Py_Initialize: can't make first interpreter");
#ifdef DIAGNOSTIC
printf("Py_Initialize: can't make first interpretern");
PZ_UNLOCK(interp);
_Py_FatalError("Py_Initialize: can't make first interpreter");
Py_ThreadState_New(interp);
setlocale(LC_CTYPE, ""); setlocale(LC_CTYPE, "");
Py_DragonFlag = add_flag(Py_DragonFlag, p);
Py_Py_FatalError("Py_Initialize: can't make first interpreter");
*p!= '0'
return initialized;
exit(1);
Py_InitializeEx();
Py_OutputFlag = add_flag(Py_OutputFlag, p);
Py_SyntaxFlag = add_flag(Py_SyntaxFlag, p);
Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
if (*p!= '0')
Py_LockFlag = add_flag(Py_LockFlag, p);
Py_SpecialFlag = add_flag(Py_SpecialFlag, p);
PZ_RELEASE(interp);
Py_BaseFlag = add_flag(Py_BaseFlag, p);
Py_QuickFlag = add_flag(Py_QuickFlag, p);
Py_LocaleFlag = add_flag(Py_LocaleFlag, p);
tstate = PyInterpreterState_New(interp);
Py_FatalError("Py_Initialize: can't make interpreter");
setlocale(LC_CTYPE, ""); #endif
Py_ImportFlag = add_flag(Py_ImportFlag, p);
pstderr = NULL;
PZ_UNLOCK_GIANT();
Py_MemoryFlag = add_flag(Py_MemoryFlag, p);
else Py_InitializeEx(interp);
PZ_InitializeEx(interp);
if (!initialized) return;
(void)interp;
printf("Py_Initialize: can't make first interpreter");
Py_GetDebugFlag = add_flag(Py_GetDebugFlag, p);
debug_flag = add_flag(Py_DebugFlag, p);
else
Py_FatalError("Initialize: can't make first interpreter");
(void)Py_InitializeEx(interp);
install_sigs = 1;
Py_FatalError("Py_Initialize: can't make first interpretern");
if (interp == NULL) setlocale(LC_CTYPE, "");
debugflag = add_flag(Py_DebugFlag, p);
Py_FatalError("py_Initialize: can't make first interpreter");
Py_Py_DebugFlag = add_flag(Py_DebugFlag, p);
#if defined(HAVE_LANGINFO_H) && defined(HAVE_SETLOCALE) #endif
(void) _Py_InitializeEx(interp);
setlocale(LC_CTYPE, 0);
install_sigs = 0;
Py_InterpreterState_New();
printf("Py_InitializeEx: can't make first interpretern");
else  Py_FatalError("Py_Initialize: can't make first interpreter");
*p!= '0';
pstderr = 0;
#else Py_FatalError("Py_Initialize: can't make first interpreter");
Py_InterpreterState_New(interp);
*pstderr = "";
#if 0
p = Py_GETENV("PYTHONVERBOSE") && *p!= '0'
if (interp == NULL) Py_FatalError("Py_Initialize: cannot initialize");
_Py_InitializeEx(interp);
Py_FatalError("Py_FatalError: can't make first interpreter");
**pstderr = '0';
Py_InitializeEx = 0;
if (p == NULL) return;
setlocale(LC_CTYPE, ""); break;
setlocale(LC_CTYPE,"");
Py_IsInitialized = 1;
Py_FatalError("Py_Initialize: can't make first interpreter.");
tstate = PyThreadState_New();
Py_FatalError("Py_Initialize: can't make last interpreter");
#else Py_FatalError("Py_Initialize: can't make first interpreter"); #endif
Py_Py_InitializeEx(interp);
#else Py_InitializeEx(interp);
add_flag(Py_DebugFlag, p);
Py_FatalError("Py_Initialize: cant make first interpreter");
printf("Py_InitializeEx: can't make first interpreter");
#if defined(HAVE_SETLOCALE)
Py_FatalError("Py_Initialize: cannot make first interpreter");
if (interp == NULL) Py_DebugFlag = add_flag(Py_DebugFlag, p);
tstate = Py_Thread_New(interp);
sysmod = sysmod;
tstate = Py_ThreadState_New();
if (interp == NULL) Py_InitializeEx(interp);
Py_FatalError("Py_Py_Initialize: can't make first interpreter");
Py_FatalError("Py_Initialize: can not make first interpreter");
Py_FatalError("Py_Initialize: cannot initialize");
Py_ThreadState *tstate = PyThreadState_New(interp);
p = Py_GETENV("PYTHONDEBUG");
if (interp!= NULL) return;
Py_Py_InitializeFlag = add_flag(Py_Py_InitializeFlag, p);
Py_FatalError("Py_Initialized: can't make first interpreter");
Py_FatalError("Py_Initialize: can't make second interpreter");
Py_FatalError("Py_Initialize: can't make first interpreter"); break;
Py_FatalError("Py_Initialize: can't make first interface");
tstate = Py_ReadyTypes(interp);
Py_FatalError("Py_Initialize: can't initialize");
if (interp) Py_InitializeEx(interp);
setlocale(LC_CTYPE, "")
setlocale(LC_CTYPE, 1);
Py_DebugFlag = add_flag(Py_DebugFlag, "");
Py_InitializeEx(interp, NULL);
#if defined(HAVE_LANGINFO_H)
p = Py_GETENV("PYTHONDEBUG") && *p!= '0'
if (!install_sigs) return;
setlocale(LC_CTYPE, '"');
tstate = PyThreadState_New(tstate);
if (p!= '0') return;
if (interp == NULL) continue;
Py_FatalError("Py_Initialize: can't make first interpreter"); return;
Py_FatalError("Py_Initialize: can't make first interpreter!");
Py_FatalError("Py_Initialize: can't make the first interpreter");
setlocale(LC_CTYPE, '');
tstate = PyInterpreterState_New();
InterpreterState *interp = PyInterpreterState_New();
*pstderr = 'n';
if (initialized == 1) return;
Py_FatalError("Py_Initialize: can't make first interpreter"); #endif
Py_DebugFlag = add_flag(Py_DebugFlag, '0');
debugflag = add_flag(Py_debugflag, p);
p = Py_GETENV("PYTHONVERBOSE")
Py_FatalError("Py_Initialize: can't make new interpreter");
p = Py_GETENV("PYTHONVERBOSE");
setlocale(LC_CTYPE, ""); return;
Py_InitializeEx(interp, tstate);
*p = Py_GETENV("PYTHONVERBOSE")
interp = PyInterpreterState_New(interp);
Py_FatalError("Py_Initialize: can't make initialize");
p = Py_GETENV("PYTHONTWRITEBYTECODE");
Py_MsgFlag = add_flag(Py_MsgFlag, p);
if (interp == NULL) Py_FatalError("Py_Initialize: can't make first interpreter");
PZ_SetLabel(node);
Py_XibiPy q;
#if defined(HAVE_SETLOCALE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
Py_DestroyProblems(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0')
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_SetError("Py_Initialize: cannot install %s" % _Py___________________________________________________________________________________________________________________________________________________________________________________________________________________________________
Py_SynthesizedBinding = add_flag(Py_SynthesizedBinding, p);
Py_ThreadState_Create_instance(*interp);
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PY_DEBUG_Flag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Impact_Flag = add_flag(Py_Impact_Flag, p);
if (!interp) Py_Py_Interpreter_Notify();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY))  /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
Py_Preff_flag = add_flag(Py_Preff_flag, p);
Py_Initialize();
Py_ImportsFlag = add_flag(Py_ImportsFlag, p);
#if defined(HAVE_WIN) && defined(HAVE_OS2) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
Py_ResetLocale(LP_CTYPE, '0');
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DisableSupports();
/* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
if (p == NULL) Py_FatalError("Py_Initialize: can't make first interpreter");
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0') Py_UpdateEx(interp);
Py_QuoteStringFlag = add_flag(Py_QuoteStringFlag, p);
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
#if defined(HAVE_LAYOUT_H) && defined(HAVE_LAYOUT_CTYPE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
Py_Unsigned32Flag = add_flag(Py_Unsigned32Flag, p);
Py_Set_Flag(Py_Set_Flag, p);
/* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */
Py_UpdateInitializeFlag = add_flag(Py_UpdateInitializeFlag, p);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef IPSEC_DEBUG if (!interp)  if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize");  else  if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
Py_Py_TinyFlag = add_flag(Py_TinyFlag, p); if ((p = Py_GETENV("PYTHONTUNIXFlag")) && *p!= '0')
Py_DropStateFlag = add_flag(Py_DropStateFlag, p);
#if defined(HAVE_XP_CTYPE) && defined(HAVE_XP_CTYPE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
if (initialized)  tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (initialized) return; initialized = 1;
/* If the local libname is not set, we have no local name. */
else  p = Py_GETENV("PYTHONDEBUG") && *p!= '0'  Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
/* * Make sure the path is * initialized * with the LC_CTYPE locale. */ setlocale(LC_CTYPE, "");
/* This doesn't really work here, as * it works for a fixup file that will set the interface file. */ setlocale(LC_CTYPE, "");
Py_LoadDebugFlag = add_flag(Py_LoadDebugFlag, p);
Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p); if ((p = Py_GETENV("PY_Premiscation")) && *p!= '0') Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p);
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
Py_SetTcflag = 0;
#ifdef PY_INTERPRET_SETLOCALE /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */
Py_EndTransactionFlag = add_flag(Py_EndTransactionFlag, p);
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
Py_UnsetMode("display");
Py_DestroyState();
if (!(p = Py_GETENV("PYTHONDEBUG")) && *p!= '0')
if (p == Py_GETENV("PYTHONVERBOSE"))  Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_NotifySupportsFlag = add_flag(Py_NotifySupportsFlag, p);
Py_CXX_LOCK_ASSERT(interp == NULL);
Py_TTYFlag = add_flag(Py_TTYFlag, p);
if (!isDebug())  PZ_Free(interp);
#if defined(HAVE_LAYER_H) && defined(HAVE_LAYER_SETLOCALE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (!interp)  Py_FatalError("Py_Initialize: can't make first interpreter");
if (sysmod == '0')  if (_Py_Py_InitializeEx(interp))  Py_FatalError("Py_Initialize: can't make first interpreter");  Py_Py_InitializeEx(interp);
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0') Py_WasHasFlag = add_flag(Py_WasHasFlag, p);
Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONOKTIMIZE")) && *p!= '0') Py_UseDefaultTimerFlag = add_flag(Py_UseDefaultTimerFlag, p);
#if defined(HAVE_LANGINFO_H) && defined(HAVE_SETLOCALE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, ""); #endif
/* Now install the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */
Py_AddRefCacheLock = add_flag(Py_AddRefCacheLock, p);
Py_NotifyOpts(p);
Py_PreventCacheDuplicateFlag = add_flag(Py_PreventCacheDuplicateFlag, p);
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
Py_ConvertUnicodeEncoderFlag = add_flag(Py_ConvertUnicodeEncoderFlag, p);
Py_Py_Flag = add_flag(Py_Py_Flag, p);
Py_WrapFlag = add_flag(Py_WrapFlag, p);
#if defined(HAVE_SETLOCALE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, ""); #endif
if (p!= '0')  Py_LimitLog(Py_LimitLog, "%s", p);
#if defined(HAVE_LANGINFO_H) && defined(HAVE_SETLOCALE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
Py_GetSys_sys_enabled = PR_TRUE;
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
if (!interp)  /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0)  Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
/* If we're writing a file, do 'init' to the file, use '/'. */
/* * Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
#if defined(HAVE_FLAG_DISPLAY_ANY) && defined(HAVE_FLAG_ASYNC) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, "");
#if defined(HAVE_RANGEINFO_H) && defined(HAVE_RANGESETLOCALE) /* Set up the LC_CTYPE locale, so we can obtain the locale's charset without having to switch locales. */ setlocale(LC_CTYPE, ""); #endif
Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_UpdateBytecodeFlag = add_flag(Py_UpdateBytecodeFlag, p);
#ifdef USE_UNKNOWN if (!interp) return;
else  if (Py_XY_State == Py_XY_State_New())  if (Py_XY_State == Py_XY_State_New())  Py_XXX_State = Py_XXX_State_New();  else  Py_XXX_State = Py_XXX_State_New();
Py_InitializePage(interp, &p);
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0')
Py_Cygwin_Flag = add_flag(Py_Cygwin_Flag, p);
if (Interp == NULL) Py_FatalError("Py_Initialize: can't make first interpreter");
Py_GetSlotSlotFlag = add_flag(Py_GetSlotSlotFlag, p);
Py_SynchronousFlag = add_flag(Py_SynchronousFlag, p);
/* This may be something we are doing with */
Py_ScheduleFlag = add_flag(Py_ScheduleFlag, p);
if (!interp)  if (!interp)  Py_Error("Py_Initialize: can't make first interpreter");
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
Py_SetDebugFlag = add_flag(Py_SetDebugFlag, p);
Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p); if ((p = Py_GETENV("TXFree")) && *p!= '0') Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p);
Py_Py_DragonFlag = add_flag(Py_DragonFlag, p);
Py_FreeAssignmentFlag = add_flag(Py_FreeAssignmentFlag, p);
Py_ImplementationFlag = add_flag(Py_ImplementationFlag, p);
if (p == Py_GETENV("PYTHONVARCHAR")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py
if (!isfile)  Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter");
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_InterpreterState_Free(interp);
else  char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_C++;
#ifdef PY_ICOMPLETION_NO_SETLOCALE

<else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
&else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
*p!= '&0'
<else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
&else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0') Py_UpdateEx(interp);
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (!interp) <if (!interp) &Py_Error("Py_Initialize: can't make first interpreter");
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (!interp) if (!interp) Py_Error("Py_Initialize: can't make first interpreter");
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
if (p!= '&0') <Py_LimitLog(Py_LimitLog, "%s", p);
else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '0')
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
setlocale(LC_CTYPE, '<0');
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (p!= '0') <Py_LimitLog(Py_LimitLog, "%s", p);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
*p!= '0';
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
<else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_Py_TinyFlag = add_flag(Py_TinyFlag, p); if ((p = Py_GETENV("PYTHONTUNIXFlag")) && *p!= '<0')
Py_FatalError("Py_Initialize: can't make first interpretern");
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
Py_Py_TinyFlag = add_flag(Py_TinyFlag, p); if ((p = Py_GETENV("PYTHONTUNIXFlag")) && *p!= '&0')
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (!interp) &return;
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
*p!= '&0';
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONOKTIMIZE")) && *p!= '<0') Py_UseDefaultTimerFlag = add_flag(Py_UseDefaultTimerFlag, p);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, '0');
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p); if ((p = Py_GETENV("TXFree")) && *p!= '&0') Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p);
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '<0')
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p); if ((p = Py_GETENV("PY_Premiscation")) && *p!= '&0') Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p);
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
*p!= '0'
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (initialized) &tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (initialized) return; initialized = 1;
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
&else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '<0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '<0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
<else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0') Py_UpdateEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
<else &Py_FatalError("Py_Initialize: can't make first interpreter");
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (!(p = Py_GETENV("PYTHONDEBUG")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '&0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
&else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '<0')
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
printf("Py_InitializeEx: can't make first interpreter&n");
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '<0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '<0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
<else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
setlocale(LC_CTYPE, "");
<else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '&0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
<else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
&else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
<else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
&else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '<0') Py_UpdateEx(interp);
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '<0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '&0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '&0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '<0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
&else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
Py_FatalError("Py_Initialize: can't make first interpreter&n");
if (!(p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0')
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
&else &Py_FatalError("Py_Initialize: can't make first interpreter");
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (*p!= '0')
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (*p!= '&0')
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (p!= '<0') <Py_LimitLog(Py_LimitLog, "%s", p);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DisableSupports();
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
&else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '&0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '&0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
<else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
&else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (!isDebug()) <PZ_Free(interp);
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '&0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '<0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
&else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
<else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
<else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
Py_ResetLocale(LP_CTYPE, '<0');
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, '&0');
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
<else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '&0') return;
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (!isfile) Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter");
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
*pstderr = 'n';
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
*pstderr = '<n';
else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p!= '<0') return;
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (!interp) &Py_FatalError("Py_Initialize: can't make first interpreter");
if (!interp) &if (!interp) <Py_Error("Py_Initialize: can't make first interpreter");
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '&0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '<0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
**pstderr = '<0';
else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
p = Py_GETENV("PYTHONVERBOSE") && *p!= '<0'
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '<0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
*pstderr = '<0';
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p == Py_GETENV("PYTHONVARCHAR")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
<else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '&0') Py_WasHasFlag = add_flag(Py_WasHasFlag, p);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_UpdateBytecodeFlag = add_flag(Py_UpdateBytecodeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
&else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
<else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
printf("Py_Initialize: can't make first interpreter&n");
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
<else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
<else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
*pstderr = '&0';
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
&else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (p!= '0') return;
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '<0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
return;
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_ResetLocale(LP_CTYPE, '&0');
if (p == Py_GETENV("PYTHONVARCHAR")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
PY_DEBUG_Flag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Impact_Flag = add_flag(Py_Impact_Flag, p);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
pstderr = '<0';
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
&else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
else &Py_FatalError("Py_Initialize: can't make first interpreter");
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
else Py_FatalError("Py_Initialize: can't make first interpreter");
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '<0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '&0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
&else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
return 0;
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '<0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '<0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
&else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '<0') Py_UpdateEx(interp);
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
**pstderr = '&0';
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (!interp) <Py_FatalError("Py_Initialize: can't make first interpreter");
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
&else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
<else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONOKTIMIZE")) && *p!= '&0') Py_UseDefaultTimerFlag = add_flag(Py_UseDefaultTimerFlag, p);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
<else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '&0') Py_UpdateEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
<else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p); if ((p = Py_GETENV("PY_Premiscation")) && *p!= '<0') Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p);
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DisableSupports();
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
<else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
*pstderr = '0';
if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '<0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (p!= '&0') Py_LimitLog(Py_LimitLog, "%s", p);
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
&else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
p = Py_GETENV("PYTHONDEBUG") && *p!= '&0'
setlocale(LC_CTYPE, '&0');
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '<0') Py_WasHasFlag = add_flag(Py_WasHasFlag, p);
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
&else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '&0') Py_UpdateEx(interp);
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0') Py_WasHasFlag = add_flag(Py_WasHasFlag, p);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
&else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
p = Py_GETENV("PYTHONVERBOSE") && *p!= '&0'
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
pstderr = '&0';
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
setlocale(LC_CTYPE, '0');
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (initialized) <tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (initialized) return; initialized = 1;
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
p = Py_GETENV("PYTHONVERBOSE") && *p!= '0'
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
<else Py_FatalError("Py_Initialize: can't make first interpreter");
else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_UpdateBytecodeFlag = add_flag(Py_UpdateBytecodeFlag, p);
<else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
*pstderr = '&n';
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
&else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!isDebug()) &PZ_Free(interp);
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
p = Py_GETENV("PYTHONDEBUG") && *p!= '<0'
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
printf("Py_Initialize: can't make first interpretern");
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
PY_DEBUG_Flag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Impact_Flag = add_flag(Py_Impact_Flag, p);
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (!interp) if (!interp) &Py_Error("Py_Initialize: can't make first interpreter");
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0') Py_UpdateEx(interp);
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
else <Py_FatalError("Py_Initialize: can't make first interpreter");
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p!= '&0')
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
&else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (*p!= '<0')
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
**pstderr = '0';
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (!interp) if (!interp) <Py_Error("Py_Initialize: can't make first interpreter");
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
&else <Py_FatalError("Py_Initialize: can't make first interpreter");
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '&0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); <else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
&else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '&0') Py_UpdateEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
<else if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, '<0');
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '<0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '&0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (!(p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0')
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
&else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVARCHAR")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
<else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONOKTIMIZE")) && *p!= '0') Py_UseDefaultTimerFlag = add_flag(Py_UseDefaultTimerFlag, p);
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_ENV")) && *p!= '&0') Py_DirtyRefflag = add_flag(Py_DirtyRefff, p); if ((p = Py_GETENV("PY_DirtyReffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
pstderr = '0';
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_LimitLog(Py_LimitLog, "%s", p);
else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
printf("Py_InitializeEx: can't make first interpreter<n");
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
<else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p); if ((p = Py_GETENV("PY_Premiscation")) && *p!= '0') Py_PremiscationFlag = add_flag(Py_PremiscationFlag, p);
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (!interp) <if (!interp) Py_Error("Py_Initialize: can't make first interpreter");
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
&else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
<else <if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p); if ((p = Py_GETENV("TXFree")) && *p!= '<0') Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DisableSupports();
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
*p!= '<0'
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_FatalError("Py_Initialize: can't make first interpreter<n");
&else Py_FatalError("Py_Initialize: can't make first interpreter");
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (!interp) Py_FatalError("Py_Initialize: can't make first interpreter");
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if (!isDebug()) PZ_Free(interp);
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '&0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '&0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
if (!interp) <if (!interp) <Py_Error("Py_Initialize: can't make first interpreter");
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
<else <Py_FatalError("Py_Initialize: can't make first interpreter");
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
if (p!= '&0') &Py_LimitLog(Py_LimitLog, "%s", p);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
&else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (sysmod == '&0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (sysmod == '<0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
break;
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
&else p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (!interp) &if (!interp) &Py_Error("Py_Initialize: can't make first interpreter");
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
&else &if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
<else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
<else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
else p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '&0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p); if ((p = Py_GETENV("PYTHONTIMMARY_INIT")) && *p!= '0') Py_ThreadFlag = add_flag(Py_ThreadFlag, p);
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (!interp) &if (!interp) Py_Error("Py_Initialize: can't make first interpreter");
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ResetLocale(LP_CTYPE, '0');
if (!isfile) &Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter");
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
p = Py_GETENV("PYTHONDEBUG") && *p!= '0'
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '0') Py_LimitLog(Py_LimitLog, "%s", p);
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '0')
&else <if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
*p!= '<0';
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
printf("Py_Initialize: can't make first interpreter<n");
if (p!= '0') &Py_LimitLog(Py_LimitLog, "%s", p);
<else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
<else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_UpdateBytecodeFlag = add_flag(Py_UpdateBytecodeFlag, p);
Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p); if ((p = Py_GETENV("TXFree")) && *p!= '0') Py_TxFreeFlag = add_flag(Py_TxFreeFlag, p);
<else p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p);
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (p!= '&0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_Py_TinyFlag = add_flag(Py_TinyFlag, p); if ((p = Py_GETENV("PYTHONTUNIXFlag")) && *p!= '0')
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
if (!isfile) <Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter");
if (p!= '<0') &Py_LimitLog(Py_LimitLog, "%s", p);
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '&0') Py_Verbose
else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (!interp) return;
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '0') Py_DestroyFlag = add_flag(Py_DestroyFlag, p); if ((p = Py_GETENV("PYTHONSECTION")) && *p!= '&0') Py_BytecodeFlag = add_flag(Py_BytecodeFlag, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (!interp) <return;
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
&else <if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbo
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) &/* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (sysmod == '0') &if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
<else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
<else if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '<0') Py_UpdateEx(interp);
&else <p = Py_GETENV("PYTHONDEBUG") && *p!= '<0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '&0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
#ifdef IPSEC_DEBUG if (!interp) if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else &if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_Verb
if (sysmod == '<0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '<0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
if (p!= '&0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
#ifdef IPSEC_OS_PC if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_Urlswitch = add_flag(Py_Urlswitch, p);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '<0') Py_Verbose
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
if (sysmod == '0') if (_Py_Py_InitializeEx(interp)) &Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (sysmod == '&0') &if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py
if (p!= '0') Py_PrototypeFlag = add_flag(Py_PrototypeFlag, p); if ((p = Py_GETENV("PY_PROTO_SETLOCALE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PY_VERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *
Py_EncryptCacheFlag = add_flag(Py_EncryptCacheFlag, p); if ((p = Py_GETENV("PY_ENcryptCache")) && *p!= '<0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptSecurityFlag")) && *p!= '&0') Py_DecryptSecurityFlag = add_flag(Py_DecryptSecurityFlag, p); if ((p = Py_GETENV("PY_DecryptS
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '<0') Py_EnvFlag = add_flag(Py_EnvFlag, p); if ((p = Py_GETENV("PYTHONVERSION")) && *p!= '0') Py_EnvFlag = add_flag(Py_EnvFlag, p);
/* * The LC_CTYPE locale may have to be a charset without having to switch locales. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_InitializeFlag = add_flag(Py_InitializeFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '<0') Py_FatalError("Py_Initialize: can't make first interpreter"); if (interp == NULL) Py_FatalError("Py_Ini
&else &p = Py_GETENV("PYTHONDEBUG") && *p!= '0' &Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
&else &if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbos
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMIZE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONNOOPTIMI
/* If the program is going to be done, we're re-reading the lc_c_c_fs if it is called from the server, which won't happen if it was in the server -> -> /dev/fs */ if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag,
<else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
printf("Py_InitializeEx: can't make first interpretern");
if (p!= '<0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_Verbo
if (!interp) &/* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseF
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_Verbos
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
if (p == Py_GETENV("PYTHONVERBOSE")) &Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
Py_ScannerFlag = add_flag(Py_ScannerFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbo
if (!interp) </* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
&else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
<else if (Py_XY_State == Py_XY_State_New()) &if (Py_XY_State == Py_XY_State_New()) <Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
#ifdef IPSEC_DEBUG if (!interp) <if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); else if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_Verb
<else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
if (!interp) /* * XXX can't do a fix for our own build. */ Py_DragnupFlag = add_flag(Py_DragnupFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p); if ((p = Py_GETENV("PYTHONONTORBOSE")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONTORBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseF
if (sysmod == '<0') if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); Py_Py_InitializeEx(interp);
if (p == Py_GETENV("PYTHONVERBOSE")) Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
&else <char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* * Make a lib-based lib is used in a Py_lib. */ if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Verbos
if (p!= '0') Py_UnbindFlag = add_flag(Py_UnbindFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '<0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNbind")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '&0') Py_LunblockFlag = add_flag(Py_LunblockFlag, p); if ((p = Py_GETENV("PYTHONUNblockFlag")) && *p!= '0')
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py
if (p == Py_GETENV("PYTHONVERBOSE")) <Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py
Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONTWRITEBYTECODE")) && *p!= '0') Py_Verbose
else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) </* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
if (initialized) tstate = PyThreadState_New(interp); if (tstate == NULL) Py_FatalError("Py_Initialize: can't make first interpreter"); tstate = PyThreadState_New(interp); if (initialized) return; initialized = 1;
if ((p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '&0')
if (sysmod == '0') <if (_Py_Py_InitializeEx(interp)) Py_FatalError("Py_Initialize: can't make first interpreter"); &Py_Py_InitializeEx(interp);
if (sysmod == '&0') <if (_Py_Py_InitializeEx(interp)) <Py_FatalError("Py_Initialize: can't make first interpreter"); <Py_Py_InitializeEx(interp);
/* * FIXME: need to update the stdlib. */ if (__Py_ReadyTypes(interp)!= 0) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONNOBUFS")) && *p!= '0') Py_VerboseFlag = add_flag(Py_Verb
if (p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if
#ifdef NECKO /* XXX */ Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PY
else char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
<else if (Py_XY_State == Py_XY_State_New()) <if (Py_XY_State == Py_XY_State_New()) &Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
<else &char *arg = p; if ((p = Py_GETENV("PYTHONDEBUG")) && *p!= '<0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONDEBUG")) && *p!= '&0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p!= '0') Py_VerboseFlag = add
if (p = Py_GETENV("PYTHONTWRITEBYTECODE")) && *p!= '&0')
PY_DEBUG_Flag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_Impact_Flag = add_flag(Py_Impact_Flag, p);
&else &if (Py_XY_State == Py_XY_State_New()) if (Py_XY_State == Py_XY_State_New()) Py_XXX_State = Py_XXX_State_New(); else Py_XXX_State = Py_XXX_State_New();
else <p = Py_GETENV("PYTHONDEBUG") && *p!= '&0' <Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONDONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseF
/* Note that this type of OS can get defined as an OS 'io' (e.g., if defined(OS)) || defined(OS) if (!is_strdup(OS->IP_DISPLAY)) /* We have to use opcode and do this for the OS type in the OS. */ if (__FALSE) Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p =
#ifdef IPSEC_DEBUG if (!interp) &if (initialized) return; initialized = 1; Py_ReportError("Py_ReportError: unable to update initialize"); &else <if (!interp) return; initialized = 1; Py_ReportError("Py_ReportError: unable to install");
if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '&0') Py_DebugFlag = add_flag(Py_DebugFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONONVERBOSE")) && *p!= '<0') Py_VerboseFlag = add_flag(Py_VerboseFlag, p); if ((p = Py_GETENV("PYTHONVERBOSE")) && *p!= '0') Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteByt
