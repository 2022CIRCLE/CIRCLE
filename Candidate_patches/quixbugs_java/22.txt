golden:
otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));
inference:
otherwise.addAll(Collections.nCopies(digit_list.length));
otherwise.addAll(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, null));
otherwise.addAll(Collections.nCopies(digit_list.length + 1, 0));
otherwise.addAll(digit_list.length);
otherwise.addAll(Collections.nCopies(digit_list.length, 0, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 1));
otherwise.add(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list));
otherwise.addElement(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length), 0);
otherwise.addAll(Collections.nCopies(digit_list.length+1));
otherwise.addAll(Collections.nCopies(digit_list.length+1, 0));
otherwise.addAll(Collections.nCopies(digit_list, 0));
otherwise.addAll(Collections.nCopies(digit_list.size, 0));
otherwise.add(digit_list.length);
otherwise.addAll(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.size(), 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 1);
otherwise.addAll(Collections.nCopies(digit_list.len, 0));
otherwise.addAll(Collections.nCopies(digit_list.length - 1));
otherwise.addAll(Collections.nCopies(digit_list.length-1));
otherwise.addAll(Collections.nCopies(num_digits, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 1, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 2));
otherwise.addAll(Collections.nCopies(digit_list.length, 0, null));
otherwise.addAll(Collections.nCopies(digit_list.length + 2, 0));
otherwise.addAll(Collections.nCopies());
otherwise.addAll(Collections.nCopies(digit_list.length + 1));
otherwise.addAll(digit_list.length - 1);
otherwise.append(Collections.nCopies(digit_list.length, 0));
otherwise.addMatch(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length-2, 0));
otherwise.addAll(Collections.nCopies (digit_list.length, 0));
otherwise.add(Collections.nCopies(digit_list.length));
otherwise.addAll(Collections.nCopies(digit_list.length);
otherwise.addAll(Collections.nCopies(digit_list.length), null);
otherwise.addAll(digit_list.copy());
otherwise.add(Collections.nCopies(digit_list.length, null));
otherwise.addAll(collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 0));
otherwise.add(Collections.nCopies(digit_list.length - 1, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, -1));
otherwise.addAll(Collections.NCopies(digit_list.length, 0));
otherwise.add(Collections.nCopies(digit_list.length-1, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 0)));
otherwise.addAll(Copies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length), 1);
otherwise.addAll(Collections.Copies(digit_list.length, 0));
otherwise.addAll(nsCRT::Copies(digit_list.length, 0));
otherwise.addAll(Collections.mCopies(digit_list.length, 0));
otherwise.addAll(ncopies);
otherwise.addAll(Collections.copy(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, false));
otherwise.addAll(ICollections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.kCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length), 0));
otherwise.addAll(Collections.nCopies(digit_list.length - 1, 1));
otherwise.addAll(cols.nCopies(digit_list.length, 0));
otherwise.add(Collections.nCopies(digit_list.length, 0, 0));
otherwise.add(collections.nCopies(digit_list.length, 0));
otherwise.addAll(null);
otherwise.addAll(PRUint32(digit_list.length), 0));
otherwise.addAll(digit_list.size());
otherwise.addAll(Collections.nCopies(digit_list.length+1), 0));
otherwise.addAll(Collections.nCopies(&digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.get(), 0));
otherwise.add(Collections.nCopies(digit_list.length, 1));
otherwise.addAll(num_digits);
otherwise.addAll(Collections.nCopies(digit_list.length, false));
otherwise.addAll(cols.nCopies(digit_list.length, 0));
otherwise.addAll(Dictionary.nCopies(digit_list.length, 0));
otherwise.addAll(Copies.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.long, 0));
otherwise.addAll(Collections.nCopies(digit_list.count, 0));
otherwise.addAll(nsCopies(digit_list.length, 0));
otherwise.addMost(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length == 0));
otherwise.addAll(Collections.nCopies(digit_list[0]));
otherwise.addAll(Collections.nCopies(digit_list, null));
otherwise.addAll(Collections.nCopies(digit_list.length, 2, 0));
otherwise.addAll(Utils.nCopies(digit_list.length, 0));
otherwise.addAll(Collections[digit_list.length]);
otherwise.addAll(digit_list);
otherwise.addAll(Collections.nCopies(digit_list.length, 4));
otherwise.addAll(Collections.nCopies(digit_list.length, 1L));
otherwise.addAll(PRUint32(digit_list.length));
otherwise.addAll(Collections.nCopies(digit_list.length - 1, 2));
otherwise.addAll(digit_list.length + 1);
otherwise.addAll(&Collections.nCopies(digit_list.length, 0));
otherwise.addAll(GetCollections(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list[0], 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 0), 1);
otherwise.addAll(Collections.nCopies(digit_list.length - 1, 1);
otherwise.addAll(Collections.nCopies(digit_list.length, 3));
otherwise.addAll(Collections.nCopies(digit_list.length + 1);
otherwise.appendAll(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(cols);
otherwise.addAll(collections[digit_list.length]);
otherwise.addAll(Collections.nCopies(digit_list.length-1), 0));
otherwise.addAll(Collections.nCopies(digit_list.length(), 0));
otherwise.add(Collections.nCopies(digit_list.length + 1, 0));
otherwise.addAll(Map.nCopies(digit_list.length, 0));
otherwise.add(digit_list.length - 1);
otherwise.addAll(Collections.nCopies(digit_list.length, 1, null));
otherwise.addAll(Collections.nCopies(digit_list.length - 1);
otherwise.addAll(!Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length/2, 0));
otherwise.addAll(nCopies);
otherwise.addTag(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(PRUint32(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length - 1););
otherwise.addAll(digit_list.length, 0);
otherwise.addAll(Collections.nCopies(digit_list);
otherwise.addAll(Collections.nCopies(digit_list_length, 0));
otherwise.addAll(false);
otherwise.addAll(Elements.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length > 0));
otherwise.addAll(nodeInfo.nCopies(digit_list.length, 0));
otherwise.addAll(data);
otherwise.addAll(Collections.numCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, None));
otherwise.addAll(Collections.cmp(digit_list.length, 0));
otherwise.addAll(digit_list.len);
otherwise.addAll(do_QueryInterface(digit_list.length));
otherwise.addAll(Collections.ElementAt(digit_list.length, 0));
otherwise.addAll(digit_list.nCopies());
else.addAll(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length-1, null));
otherwise.addAll(EmptyCollections(digit_list.length, 0));
else.addAll(Collections.nCopies(digit_list.length));
otherwise.addAll(Collections.nCopies(digit_list.length, 0));
otherwise.add(Collections.nCopies(digit_list.length), 0);
otherwise.addAll(Collections.nCopies(digit_list.length); otherwise.add(1);
otherwise.put(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(collections.nCopies(digit_list.length-1, 0));
otherwise.addAll(nsCRT::copies(digit_list.length, 0));
otherwise.addAll(Collections.copies(digit_list.length, 0));
otherwise.addAll(Collections::nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.first, 0));
otherwise.addAll(Collections.nCupies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 1 - 1));
else.addAll(Collections.nCopies(digit_list.length-1, 0));
otherwise.addAll(nodeInfo.nCopies(digit_list.length, 0));
otherwise.add(Collections.nCopies(digit_list));
otherwise.addAll(None);
otherwise.addAll(collections.nCopies(digit_list.length));
otherwise.addAll(Collections.nCopies(digit_list.length + 1, 1);
otherwise.addAll(digit_list.length > 0);
otherwise.addAll(Collections.nCopies(digit_list.length, 10));
otherwise.addAll(Collections.nCopies(digit_list, 0, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, null));
otherwise.addAll(Components.nCopies(digit_list.length, 0));
otherwise.push(Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCollections(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length-2));
otherwise.addAll(digit_list.count);
otherwise.addAll(Collections.nCopies(digit_list.length - 2));
otherwise.addAll(Collections[digit_list.length - 1]);
otherwise.addAll(collections);
otherwise.addAll(Collections.eCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length + 1, 1));
otherwise.addAll(Collections.nCopies(digit_list.length, 5));
otherwise.addAll(Dictionary(digit_list.length, 0));
otherwise.addAll(nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length,0));
otherwise.addAll(Collections.nCopies(digit_list.length, 1, 1));
otherwise.addAll(digit_list.get());
otherwise.addAll(Collections.Collections(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 0)+1);
otherwise.addAll(Collections.nCopies(digit_list.length, i));
otherwise.addAll(Collections.nCopies(digit_list.length, int));
otherwise.addAll(Collections.nCopies(digit_list.length, len));
otherwise.addAll(digit_list.Copies());
otherwise.addAll(digit_list[0]);
otherwise.addAll(nc);
otherwise.add(Collections.nCopies(digit_list.length, 0), 0);
otherwise.addAll(Collections[digit_list.length-1]);
otherwise.addAll(Collections.nCopies(digit_list.length - 1);));
otherwise.addAll(Collections.copy());
otherwise.addAll(type);
otherwise.addAll(digit_list.length - 1, 0);
otherwise.add(digit_list);
otherwise.addAll(nodeInfo);
otherwise.addAll(ntohl(digit_list.length));
otherwise.addAll(coll);
otherwise.addAll(digit_list.length == 0);
otherwise.addMore(digit_list.length);
otherwise.addAll(Collections.nCopies(0));
otherwise.addAll(Collections.nCopies(digit));
otherwise.addAll(digit_list.nCopies);
otherwise.addAll(digit_list));
otherwise.addAll(digit_list.clone());
otherwise.addAll(Collections.nCopies(digit_list.length, 0)) &&!num_digits;
otherwise.addAll(Collections.nCopies(digit_list.length, 1), null);
otherwise.addAll(Collections.nCopies(digit_list.length, 0)); else.add(1);
otherwise.addAll(Collections.nCopies(digit_list.length - 2, 0));
otherwise.addAll(Collections.nCopies(digit_list.length + 1 + 1, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, &added));
otherwise.addAll(Collections.nCopies(digit_list.length, -1, 1));
otherwise.addAll(Collections.nCopies(digit_list.length + 1 + (digit_list.length + 1))));
otherwise.addAll(Collections.nCopies(digit_list.length - 1, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, -1, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, (int)0));
otherwise.addAll(Collections.nCopies(digit_list.length - 1); 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 0, true));
otherwise.addAll(Collections.nCopies(digit_list.length, digit_list.length + 1));
otherwise.addAll(Collections.nCopies(digit_list.length + 1), 0));
otherwise.addAll(Collections.nCopies(digit_list.length, digit_list.length));
otherwise.addAll(Collections.nCopies(digit_list.length, 0, false));
otherwise.addAll(Collections.nCopies(digit_list.length - 1), 0));
otherwise.addAll(Collections.nCopies(digit_list.length, (void *)0));
otherwise.addAll(Collections.nCopies(digit_list.length, 0)) ||!Collections.nCopies(digit_list.length, 0));
otherwise.addAll(Collections.nCopies(digit_list.length, 0)); else.add(' ');
otherwise.addAll(Collections.nCopies(digit_list.length, 0, EIF_NAMED));
otherwise.addAll(Collections.nCopies(digit_list.length, -1, 1 + 1));
otherwise.addAll(digit_list.length - digit_list.length);
otherwise.addAll(Collections.nCopies(digit_list.length, -1, -1));
otherwise.addAll(Collections.nCopies(digit_list.length, 0, EIF_IF_IN));
