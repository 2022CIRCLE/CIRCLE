golden:
c = bin_op.apply(b,a);
inference:
c = bin_op.apply(a, b);
c = bin_op.apply(a,b);
bin_op.apply(a, b);
c = bin_op.apply((int)a,b);
bin_op.apply(a,b);
bin_op = bin_op.apply(a,b);
c = bin_op.apply(token, b);
c = op.apply(a,b);
c = bin_op.apply(token,b);
c = bin_op.apply(a);
c = bin_op.apply(token);
c = op.apply(a,b);
bin_op.apply(a,b);
c = Bin_op.apply(a, b);
Bin_op.apply(a,b);

c = bin_op.apply((u_long)a,b);
c = bin_op.apply(&a,b);
c = bin_op.apply((void *)a,b);
c = bin_op.apply((unsigned long)a,b);
c = bin_op.apply (a, b);
c = Bin_op.apply(a,b);
bin_op = bin_op.apply(a, b);
c = bin_op.apply(a, (int)b);
c = bin_op.apply(b);
c = bin_op.apply((a,b));
c = bin_op.apply((char *)a,b);
c = bin_op.apply(token, a, b);
*c = bin_op.apply(a,b);
c = bin_apply(a, b);
c = bin_op.apply(op,a,b);
c = bin_op.apply(a, b);
binary_op.apply(a,b);
c = bin_op.apply(i,b);
c = bin_op.apply(op, a, b);
c = bin_op.apply((long)a,b);
bin = bin_op.apply(a,b);
c = bin_op.apply(a,b);
bin_op.apply(a);
(void)bin_op.apply(a,b);
(void) bin_op.apply(a,b);
c = bin_op.apply((void **)a,b);
c = bin_op.apply(m,b);
bin_op = bin_op.apply(a,b);
c = bin_op.apply(b,a);
int c = bin_op.apply(a,b);
c = bin_op(a,b);
c = bin_apply(a,b);
c = bin_op.apply(i, b);
c = bin_op.apply( a, b );
c = bin_op.apply(token,a,b);
c = bin_op_apply(a,b);
c = bin_op.apply(a,(int)b);
c = bin_op.apply(buf, b);
binary_op = bin_op.apply(a,b);
bin_op.apply(token);
bin_op = bin_apply(a,b);
b = bin_op.apply(a,b);
c = bin_op.apply(a, *b);
c = bin.apply(a,b);
c = op.apply(a, b);
c = bin_op.apply((a, b));
c = binary_op.apply(a,b);
c = bin_op.apply(*a,b);
c = bin_op.apply(c,a,b);
c = bin_op.apply(a + b);
c = bin_op.apply(u,b);
c = bin_op.apply(buf,b);
c = bin_op.apply(a, (void *)b);
a = bin_op.apply(a,b);
c = bin_op.apply(m, b);
c = bin_op.apply(0);
c = bin_op.apply((char*)a,b);
c = bin_op::apply(a,b);
c = bin_op.apply((void*)a,b);
double c = bin_op.apply(a,b);
c = bin.apply(a,b);
c = bin_op.apply(a, (u_long)b);
const char* c = bin_op.apply(a,b);
cp = bin_op.apply(a,b);
c = bin_op.apply(x, y);
c = bin_op.apply(arg,b);
c=bin_op.apply(a,b);
c = bin_ops.apply(a,b);
c = bin_op.apply(a, &b);
c = _bin_op.apply(a,b);
c = bin_op.apply((ulong)a,b);
bin_op.apply(b);
c = bin_op.apply((String)a,b);
binary = bin_op.apply(a,b);
c = bin_op.apply([a,b]);
c = bin_object.apply(a,b);
return bin_op.apply(a,b);
c = bin_op.apply((b)a,b);
c = bin_p.apply(a,b);
c = bin_op.apply(n,b);
p = bin_op.apply(a,b);
c = bin_op[a];
bin_apply(a,b);
token = bin_op.apply(a,b);
c = bin_op.apply(e,b);
c = bin_op.apply((u_char)a,b);
c = bin_op.apply((int) a,b);
result = bin_op.apply(a,b);
i = bin_op.apply(a,b);
bin_p = bin_op.apply(a,b);
bin_op = bin_op;
/* c = bin_op.apply(a,b); */
c = bin_op.apply((double)a,b);
c = bin_op.apply((uint)a,b);
n = bin_op.apply(a,b);
ch = bin_op.apply(a,b);
l = bin_op.apply(a,b);
op = bin_op.apply(a,b);
bin_op = op.apply(a,b);
c = bin_op.apply((char **)a,b);
c = bin_opapply(a, b);
c = op.apply(a, b);
c = bin_op.apply(token, a);
c = bin_op;
c = bin_op.apply(c, a, b);
c = rpn_op.apply(a,b);
c = bin_op.apply((int)a, b);
c = bin_op(a, b);
bin_op = op.apply(a,b);
c = bin_op.apply(A, b);
bin_op.apply(&a,b);
c = bin_op.apply(A,b);
c = bin_op.apply(in,b);
c = bin_op.apply(c);
c = bin_op.apply(x, b);
c = bin(a,b);
c = bin_op.apply(b,a,b);
c = bin_op.apply(e, b);
c = BinaryOperator_op.apply(a,b);
bin_op.apply(token, b);
c = bin_op.apply(a + 1, b);
c = bin_op.apply(a, (int) b);
c = bin_op.apply(a, (unsigned long)b);
bin_op = bin_apply(a, b);
c = bin_op.apply(a, c);
C = bin_op.apply(a, b);
c = bin_op = bin_op.apply(a,b);
bin_op.apply((int)a,(int)b);
c = bin_op.apply(a, (char *)b);
binary_op.apply(a,b);
c = bin_op.Apply(a, b);
c = bin_op.apply((Int)a,b);
c = bin_op.apply(',');
c = bin_op.apply(a,b,0);
s = bin_op.apply(a,b);
op.apply(a,b);
c = bin_op.apply(a,c);
c = bin_op.apply(a, (long)b);
c = bin_op.apply(a, 0, b);
c = bin_op.apply(a, (double)b);
c = bin_op.apply(buf, a, b);
r = bin_op.apply(a,b);
c = bin_op.apply(token,a);
c = bin_op.apply((*)a,b);
c = bin_op.apply(op, b);
c = bin_op.apply((void *) a,b);
Bin_op = bin_op.apply(a,b);
ret = bin_op.apply(a,b);
c = bin_op.apply((char *)a, b);
bin.apply(a,b);
c = bin_op.apply(bool(a), b);
c = bin_op.apply(token.a, b);
c = bin_op.apply(&a, b);
c = bin_op++;
c = bin_op.apply(op, a,b);
c = bin_op.apply((float)a,b);
c = bin_op.apply((short)a,b);
bin_op = bin_op.apply(a, b);
c = bin_op.apply(a, b, 0);
c = bin_op.apply((char *) a,b);
c = bin_op.apply(bin_op,a,b);
bp = bin_op.apply(a,b);
c = bin_op.apply((String*)a,b);
a = bin_op.apply(a, b);
binary = bin_op.apply(a,b); c = binary;
c = bin_op.apply(&a, &b);
/* c = bin_op.apply(a,b);*/
c = bin_op.apply(a,b,c);
bin = bin_op.apply(a,b); c = bin;
c = bin_op.apply(a,(u_long)b);
c = bin_op.apply((void *)a, b);
c = bin_op.apply(token, a,b);
c = bin_op.apply(a, (void *) b);
c = bin_op.apply((Double)a,b);
c = Bin_op.apply((int)a,b);
c = bin_op.apply(bool(a),b);
c = bin_op.apply((a_long)a,b);
c = bin_op.apply((const double)a,b);
c = bin_op.apply(((int)a,b);
c = bin_op.apply(((u_long)a,b));
bin_op.apply(a,b,0);
c = bin_op.apply((vaddr_t)a,(vaddr_t)b);
c = bin_op.apply((struct op *)a,(struct op *)b);
c = bin_op.apply(a, (u_int)b);
c = bin_op.apply((u_int32_t)a,(u_int32_t)b);
bin_op.apply((struct bin_op *)a,b);
c = bin_op.apply((c == 0)? a + b : b);
c = bin_op.apply((uint32)a,b);
c = bin_op.apply((int)a,(int)b);
c = bin_op.apply(((struct sockaddr*)a,((void *)b));
c = bin_op.apply((unsigned char)a,(unsigned char)b);
c = bin_op.apply((u_int)a,(u_int)b);
c = bin_op.apply((u_long)a,(u_long)b);
c = bin_op.apply((unsigned char *)a,b);
c = bin_op.apply((const char*)a,b);
c = bin_op.apply((op.b_op_num) /* (a, b) */);
c = bin_op.apply((unsigned long)a,(unsigned long)b);
c = bin_op.apply(&(a,b));
c = bin_op.apply(a, (c = 0x7ffffffffffffffff)? a : b);
c = bin_op.apply((unsigned char)a,b);
c = bin_op.apply((PRUint32)a,b);
bin_op.apply((unsigned long)a,b);
c = bin_op.apply((vaddr_t)a,b);
c = bin_op.apply(a,b); if (c == '0')  /* * Only put into double-string value. */ if (a == '0')  bin_op.apply(a,b);
c = bin_op.apply((op.op_type == OP_DEVICE_CONTRACTID)? a : b);
c = bin_op.apply(a, (double) b);
c = bin_op.apply((char*)a,(char*)b);
c = bin_op.apply((char *)a,(char *)b);
c = bin_op.apply(a,b,a + 1);
bin_op.apply((int)a,b);
c = bin_op.apply((struct mbuf *)a,b);
c = bin_op.apply((op? '0' : '0'));
c = bin_op.apply((uintptr_t)a,b);
bin_op.apply((char *)a,b);
c = bin_op.apply((u_int)a,b);
c = bin_op.apply((baddr_t)a,b);
c = bin_op.apply((c_int)a,(c_int)b);
c = bin_op.apply(a,b, 0);
c = bin_op.apply(((u_int)a,b);
bin_op.apply(a,b,p,h);
c = bin_op.apply((struct mb *) a, b);
c = bin_op.apply(a,b,l);
c = bin_op.apply((uintmax_t)a,b);
c = bin_op.apply((*(a)));
c = bin_op.apply((*a,b));
bin_op.apply((b,));
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply((op? '0' : '<0'));
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply((op? '0' : '0'));
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply((op? '&0' : '&0'));
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
c = bin_op.apply((op? '<0' : '&0'));
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply((op? '&0' : '0'));
<c = bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
&c = bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
&c = bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '<0') <bin_op.apply(a,b);
c = bin_op.apply((op? '0' : '&0'));
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply((op? '<0' : '0'));
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '&0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') &/* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '<0') bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
<c = bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') </* * Only put into double-string value. */ if (a == '0') bin_op.apply(a,b);
c = bin_op.apply((op? '&0' : '<0'));
c = bin_op.apply((op? '<0' : '<0'));
c = bin_op.apply(a,b); if (c == '<0') </* * Only put into double-string value. */ if (a == '&0') <bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') /* * Only put into double-string value. */ if (a == '0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') /* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '<0') &/* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '0') /* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') &/* * Only put into double-string value. */ if (a == '<0') &bin_op.apply(a,b);
c = bin_op.apply(a,b); if (c == '&0') </* * Only put into double-string value. */ if (a == '&0') &bin_op.apply(a,b);
